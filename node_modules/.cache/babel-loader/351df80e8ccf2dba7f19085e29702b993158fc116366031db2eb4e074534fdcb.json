{"ast":null,"code":"import { updatePair, getPairs, getMatches, getGames } from \"../lib/database\";\nexport class MatchResultCalculator {\n  /**\n   * Calcula estadísticas de un partido\n   */\n  static calculateMatchStatistics(match, games) {\n    console.log(\"🎯 === CÁLCULO DE ESTADÍSTICAS ===\");\n    console.log(\"🎯 Partido ID:\", match.id);\n    console.log(\"🎯 Total de juegos:\", games.length);\n    let pair1GamesWon = 0;\n    let pair2GamesWon = 0;\n    let pair1TotalPoints = 0;\n    let pair2TotalPoints = 0;\n    let pair1SetsWon = 0;\n    let pair2SetsWon = 0;\n\n    // Procesar cada juego\n    games.forEach((game, index) => {\n      console.log(`📊 === JUEGO ${index + 1} ===`);\n      console.log(\"📊 Datos del juego:\", JSON.stringify(game, null, 2));\n      if (game.is_tie_break) {\n        console.log(\"📊 Es un tie-break\");\n        // Para tie-breaks\n        if (game.tie_break_pair1_points > game.tie_break_pair2_points) {\n          pair1GamesWon++;\n          console.log(`✅ Pareja 1 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`);\n        } else if (game.tie_break_pair2_points > game.tie_break_pair1_points) {\n          pair2GamesWon++;\n          console.log(`✅ Pareja 2 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`);\n        } else {\n          console.log(`🤝 Empate en tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`);\n        }\n        pair1TotalPoints += game.tie_break_pair1_points;\n        pair2TotalPoints += game.tie_break_pair2_points;\n      } else {\n        console.log(\"📊 Es un juego normal\");\n        console.log(`📊 Puntos Pareja 1: ${game.pair1_games}, Puntos Pareja 2: ${game.pair2_games}`);\n\n        // Para juegos normales\n        if (game.pair1_games > game.pair2_games) {\n          pair1GamesWon++;\n          console.log(`✅ Pareja 1 gana juego: ${game.pair1_games}-${game.pair2_games}`);\n        } else if (game.pair2_games > game.pair1_games) {\n          pair2GamesWon++;\n          console.log(`✅ Pareja 2 gana juego: ${game.pair1_games}-${game.pair2_games}`);\n        } else {\n          console.log(`🤝 Empate en juego: ${game.pair1_games}-${game.pair2_games}`);\n        }\n        pair1TotalPoints += game.pair1_games;\n        pair2TotalPoints += game.pair2_games;\n      }\n\n      // Verificar si alguna pareja llegó a 6 puntos en este juego (gana 1 set)\n      if (!game.is_tie_break) {\n        if (game.pair1_games >= 6) {\n          pair1SetsWon++;\n          console.log(`🏆 Pareja 1 gana 1 SET en juego ${index + 1} con ${game.pair1_games} puntos`);\n        }\n        if (game.pair2_games >= 6) {\n          pair2SetsWon++;\n          console.log(`🏆 Pareja 2 gana 1 SET en juego ${index + 1} con ${game.pair2_games} puntos`);\n        }\n      }\n      console.log(`📊 Después del juego ${index + 1}: Pareja 1 = ${pair1GamesWon} juegos, Pareja 2 = ${pair2GamesWon} juegos`);\n    });\n    console.log(\"🔍 === RESULTADO FINAL ===\");\n    console.log(`🔍 Juegos: Pareja 1 = ${pair1GamesWon}, Pareja 2 = ${pair2GamesWon}`);\n    console.log(`🔍 Sets: Pareja 1 = ${pair1SetsWon}, Pareja 2 = ${pair2SetsWon}`);\n    console.log(`🔍 Puntos totales: Pareja 1 = ${pair1TotalPoints}, Pareja 2 = ${pair2TotalPoints}`);\n\n    // Determinar si es empate (cuando los números son iguales)\n    const isTie = pair1GamesWon === pair2GamesWon;\n    console.log(`🔍 Es empate: ${isTie} (${pair1GamesWon}-${pair2GamesWon})`);\n    console.log(\"🎯 === FIN CÁLCULO ===\");\n    return {\n      pair1GamesWon,\n      pair2GamesWon,\n      pair1SetsWon,\n      pair2SetsWon,\n      pair1TotalPoints,\n      pair2TotalPoints,\n      isTie\n    };\n  }\n\n  /**\n   * Actualiza estadísticas de un partido específico\n   */\n  static async updateMatchStatistics(match, games, pairs) {\n    try {\n      console.log(\"🔄 === INICIO ACTUALIZACIÓN ===\");\n      const stats = this.calculateMatchStatistics(match, games);\n      const pair1 = pairs.find(p => p.id === match.pair1_id);\n      const pair2 = pairs.find(p => p.id === match.pair2_id);\n      console.log(\"📊 Actualizando estadísticas del partido:\", {\n        pair1GamesWon: stats.pair1GamesWon,\n        pair2GamesWon: stats.pair2GamesWon,\n        pair1SetsWon: stats.pair1SetsWon,\n        pair2SetsWon: stats.pair2SetsWon,\n        isTie: stats.isTie\n      });\n\n      // ACTUALIZAR ESTADÍSTICAS EN LA BASE DE DATOS\n      if (pair1) {\n        var _pair1$player, _pair1$player2;\n        console.log(`📊 Actualizando Pareja 1: ${(_pair1$player = pair1.player1) === null || _pair1$player === void 0 ? void 0 : _pair1$player.name} y ${(_pair1$player2 = pair1.player2) === null || _pair1$player2 === void 0 ? void 0 : _pair1$player2.name}`);\n        await updatePair(pair1.id, {\n          games_won: stats.pair1GamesWon,\n          sets_won: stats.pair1SetsWon,\n          points: stats.pair1TotalPoints,\n          matches_played: 1\n        });\n        console.log(`✅ Pareja 1 actualizada: ${stats.pair1GamesWon} juegos, ${stats.pair1SetsWon} sets`);\n      }\n      if (pair2) {\n        var _pair2$player, _pair2$player2;\n        console.log(`📊 Actualizando Pareja 2: ${(_pair2$player = pair2.player1) === null || _pair2$player === void 0 ? void 0 : _pair2$player.name} y ${(_pair2$player2 = pair2.player2) === null || _pair2$player2 === void 0 ? void 0 : _pair2$player2.name}`);\n        await updatePair(pair2.id, {\n          games_won: stats.pair2GamesWon,\n          sets_won: stats.pair2SetsWon,\n          points: stats.pair2TotalPoints,\n          matches_played: 1\n        });\n        console.log(`✅ Pareja 2 actualizada: ${stats.pair2GamesWon} juegos, ${stats.pair2SetsWon} sets`);\n      }\n\n      // Determinar ganador\n      let winnerId;\n      console.log(\"🏆 === DETERMINACIÓN DEL GANADOR ===\");\n      console.log(`🏆 Sets: Pareja 1 = ${stats.pair1SetsWon}, Pareja 2 = ${stats.pair2SetsWon}`);\n      console.log(`🏆 Juegos: Pareja 1 = ${stats.pair1GamesWon}, Pareja 2 = ${stats.pair2GamesWon}`);\n      console.log(`🏆 Es empate: ${stats.isTie}`);\n      if (stats.isTie) {\n        // Es un empate\n        winnerId = undefined;\n        console.log(\"🤝 Partido terminó en EMPATE\");\n      } else if (stats.pair1SetsWon > stats.pair2SetsWon) {\n        winnerId = match.pair1_id;\n        console.log(\"🏆 Pareja 1 gana por sets\");\n      } else if (stats.pair2SetsWon > stats.pair1SetsWon) {\n        winnerId = match.pair2_id;\n        console.log(\"🏆 Pareja 2 gana por sets\");\n      } else if (stats.pair1SetsWon === stats.pair2SetsWon) {\n        // Empate en sets - verificar por juegos\n        if (stats.pair1GamesWon > stats.pair2GamesWon) {\n          winnerId = match.pair1_id;\n          console.log(\"🏆 Pareja 1 gana por juegos\");\n        } else if (stats.pair2GamesWon > stats.pair1GamesWon) {\n          winnerId = match.pair2_id;\n          console.log(\"🏆 Pareja 2 gana por juegos\");\n        } else {\n          // Empate total\n          winnerId = undefined;\n          console.log(\"🤝 Empate total\");\n        }\n      } else {\n        // Caso inesperado\n        winnerId = undefined;\n        console.log(\"❌ Caso inesperado en determinación del ganador\");\n      }\n      let message;\n      if (stats.isTie) {\n        message = `✅ Partido finalizado.\\n\\n🤝 EMPATE (${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets)`;\n      } else if (winnerId) {\n        var _pair1$player3, _pair1$player4, _pair2$player3, _pair2$player4;\n        const winnerName = winnerId === match.pair1_id ? `${pair1 === null || pair1 === void 0 ? void 0 : (_pair1$player3 = pair1.player1) === null || _pair1$player3 === void 0 ? void 0 : _pair1$player3.name} y ${pair1 === null || pair1 === void 0 ? void 0 : (_pair1$player4 = pair1.player2) === null || _pair1$player4 === void 0 ? void 0 : _pair1$player4.name}` : `${pair2 === null || pair2 === void 0 ? void 0 : (_pair2$player3 = pair2.player1) === null || _pair2$player3 === void 0 ? void 0 : _pair2$player3.name} y ${pair2 === null || pair2 === void 0 ? void 0 : (_pair2$player4 = pair2.player2) === null || _pair2$player4 === void 0 ? void 0 : _pair2$player4.name}`;\n        message = `✅ Partido finalizado.\\n\\n🏆 Ganador: ${winnerName} (${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets)`;\n      } else {\n        message = `✅ Partido finalizado.\\n\\n🤝 Empate (${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets)`;\n      }\n      console.log(\"🔄 === FIN ACTUALIZACIÓN ===\");\n      return {\n        success: true,\n        message,\n        pair1Stats: {\n          gamesWon: stats.pair1GamesWon,\n          setsWon: stats.pair1SetsWon,\n          points: stats.pair1TotalPoints\n        },\n        pair2Stats: {\n          gamesWon: stats.pair2GamesWon,\n          setsWon: stats.pair2SetsWon,\n          points: stats.pair2TotalPoints\n        },\n        winnerId,\n        isTie: stats.isTie\n      };\n    } catch (error) {\n      console.error(\"❌ Error en updateMatchStatistics:\", error);\n      return {\n        success: false,\n        message: \"Error al actualizar estadísticas del partido\",\n        pair1Stats: {\n          gamesWon: 0,\n          setsWon: 0,\n          points: 0\n        },\n        pair2Stats: {\n          gamesWon: 0,\n          setsWon: 0,\n          points: 0\n        },\n        isTie: false\n      };\n    }\n  }\n\n  /**\n   * Recalcula todas las estadísticas del torneo\n   */\n  static async recalculateAllStatistics(tournamentId) {\n    try {\n      console.log(\"🔄 === INICIO RECÁLCULO ===\");\n\n      // Obtener todos los datos del torneo\n      const pairs = await getPairs(tournamentId);\n      const matches = await getMatches(tournamentId);\n\n      // Resetear todas las estadísticas de las parejas\n      console.log(\"🔄 Reseteando estadísticas de todas las parejas...\");\n      for (const pair of pairs) {\n        await updatePair(pair.id, {\n          games_won: 0,\n          sets_won: 0,\n          points: 0,\n          matches_played: 0\n        });\n      }\n\n      // Recalcular estadísticas para cada partido finalizado\n      let processedMatches = 0;\n      for (const match of matches) {\n        if (match.is_finished) {\n          console.log(`🔄 Procesando partido: ${match.id}`);\n          const games = await getGames(match.id);\n          if (games.length > 0) {\n            await this.updateMatchStatistics(match, games, pairs);\n            processedMatches++;\n          }\n        }\n      }\n      console.log(`✅ Estadísticas recalculadas para ${processedMatches} partidos`);\n      console.log(\"🔄 === FIN RECÁLCULO ===\");\n      return {\n        success: true,\n        message: `✅ Estadísticas recalculadas exitosamente para ${processedMatches} partidos`\n      };\n    } catch (error) {\n      console.error(\"❌ Error en recalculateAllStatistics:\", error);\n      return {\n        success: false,\n        message: \"Error al recalcular estadísticas del torneo\"\n      };\n    }\n  }\n\n  /**\n   * Calcula el ranking de las parejas\n   */\n  static calculateRanking(pairs) {\n    return [...pairs].sort((a, b) => {\n      // Primero por sets ganados\n      if (a.sets_won !== b.sets_won) {\n        return b.sets_won - a.sets_won;\n      }\n      // Luego por juegos ganados\n      if (a.games_won !== b.games_won) {\n        return b.games_won - a.games_won;\n      }\n      // Finalmente por puntos totales\n      return b.points - a.points;\n    });\n  }\n}","map":{"version":3,"names":["updatePair","getPairs","getMatches","getGames","MatchResultCalculator","calculateMatchStatistics","match","games","console","log","id","length","pair1GamesWon","pair2GamesWon","pair1TotalPoints","pair2TotalPoints","pair1SetsWon","pair2SetsWon","forEach","game","index","JSON","stringify","is_tie_break","tie_break_pair1_points","tie_break_pair2_points","pair1_games","pair2_games","isTie","updateMatchStatistics","pairs","stats","pair1","find","p","pair1_id","pair2","pair2_id","_pair1$player","_pair1$player2","player1","name","player2","games_won","sets_won","points","matches_played","_pair2$player","_pair2$player2","winnerId","undefined","message","_pair1$player3","_pair1$player4","_pair2$player3","_pair2$player4","winnerName","success","pair1Stats","gamesWon","setsWon","pair2Stats","error","recalculateAllStatistics","tournamentId","matches","pair","processedMatches","is_finished","calculateRanking","sort","a","b"],"sources":["/Users/nedev/padel-tournament-app/src/components/MatchResultCalculator.tsx"],"sourcesContent":["import { Game, Match, Pair } from \"../lib/database\";\nimport { updatePair, getPairs, getMatches, getGames } from \"../lib/database\";\n\nexport interface MatchResult {\n  success: boolean;\n  message: string;\n  pair1Stats: {\n    gamesWon: number;\n    setsWon: number;\n    points: number;\n  };\n  pair2Stats: {\n    gamesWon: number;\n    setsWon: number;\n    points: number;\n  };\n  winnerId?: string;\n  isTie: boolean;\n}\n\nexport class MatchResultCalculator {\n  /**\n   * Calcula estadísticas de un partido\n   */\n  static calculateMatchStatistics(\n    match: Match,\n    games: Game[]\n  ): {\n    pair1GamesWon: number;\n    pair2GamesWon: number;\n    pair1SetsWon: number;\n    pair2SetsWon: number;\n    pair1TotalPoints: number;\n    pair2TotalPoints: number;\n    isTie: boolean;\n  } {\n    console.log(\"🎯 === CÁLCULO DE ESTADÍSTICAS ===\");\n    console.log(\"🎯 Partido ID:\", match.id);\n    console.log(\"🎯 Total de juegos:\", games.length);\n\n    let pair1GamesWon = 0;\n    let pair2GamesWon = 0;\n    let pair1TotalPoints = 0;\n    let pair2TotalPoints = 0;\n    let pair1SetsWon = 0;\n    let pair2SetsWon = 0;\n\n    // Procesar cada juego\n    games.forEach((game, index) => {\n      console.log(`📊 === JUEGO ${index + 1} ===`);\n      console.log(\"📊 Datos del juego:\", JSON.stringify(game, null, 2));\n\n      if (game.is_tie_break) {\n        console.log(\"📊 Es un tie-break\");\n        // Para tie-breaks\n        if (game.tie_break_pair1_points > game.tie_break_pair2_points) {\n          pair1GamesWon++;\n          console.log(\n            `✅ Pareja 1 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`\n          );\n        } else if (game.tie_break_pair2_points > game.tie_break_pair1_points) {\n          pair2GamesWon++;\n          console.log(\n            `✅ Pareja 2 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`\n          );\n        } else {\n          console.log(\n            `🤝 Empate en tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`\n          );\n        }\n        pair1TotalPoints += game.tie_break_pair1_points;\n        pair2TotalPoints += game.tie_break_pair2_points;\n      } else {\n        console.log(\"📊 Es un juego normal\");\n        console.log(\n          `📊 Puntos Pareja 1: ${game.pair1_games}, Puntos Pareja 2: ${game.pair2_games}`\n        );\n\n        // Para juegos normales\n        if (game.pair1_games > game.pair2_games) {\n          pair1GamesWon++;\n          console.log(\n            `✅ Pareja 1 gana juego: ${game.pair1_games}-${game.pair2_games}`\n          );\n        } else if (game.pair2_games > game.pair1_games) {\n          pair2GamesWon++;\n          console.log(\n            `✅ Pareja 2 gana juego: ${game.pair1_games}-${game.pair2_games}`\n          );\n        } else {\n          console.log(\n            `🤝 Empate en juego: ${game.pair1_games}-${game.pair2_games}`\n          );\n        }\n        pair1TotalPoints += game.pair1_games;\n        pair2TotalPoints += game.pair2_games;\n      }\n\n      // Verificar si alguna pareja llegó a 6 puntos en este juego (gana 1 set)\n      if (!game.is_tie_break) {\n        if (game.pair1_games >= 6) {\n          pair1SetsWon++;\n          console.log(\n            `🏆 Pareja 1 gana 1 SET en juego ${index + 1} con ${\n              game.pair1_games\n            } puntos`\n          );\n        }\n        if (game.pair2_games >= 6) {\n          pair2SetsWon++;\n          console.log(\n            `🏆 Pareja 2 gana 1 SET en juego ${index + 1} con ${\n              game.pair2_games\n            } puntos`\n          );\n        }\n      }\n\n      console.log(\n        `📊 Después del juego ${\n          index + 1\n        }: Pareja 1 = ${pair1GamesWon} juegos, Pareja 2 = ${pair2GamesWon} juegos`\n      );\n    });\n\n    console.log(\"🔍 === RESULTADO FINAL ===\");\n    console.log(\n      `🔍 Juegos: Pareja 1 = ${pair1GamesWon}, Pareja 2 = ${pair2GamesWon}`\n    );\n    console.log(\n      `🔍 Sets: Pareja 1 = ${pair1SetsWon}, Pareja 2 = ${pair2SetsWon}`\n    );\n    console.log(\n      `🔍 Puntos totales: Pareja 1 = ${pair1TotalPoints}, Pareja 2 = ${pair2TotalPoints}`\n    );\n\n    // Determinar si es empate (cuando los números son iguales)\n    const isTie = pair1GamesWon === pair2GamesWon;\n    console.log(`🔍 Es empate: ${isTie} (${pair1GamesWon}-${pair2GamesWon})`);\n\n    console.log(\"🎯 === FIN CÁLCULO ===\");\n\n    return {\n      pair1GamesWon,\n      pair2GamesWon,\n      pair1SetsWon,\n      pair2SetsWon,\n      pair1TotalPoints,\n      pair2TotalPoints,\n      isTie,\n    };\n  }\n\n  /**\n   * Actualiza estadísticas de un partido específico\n   */\n  static async updateMatchStatistics(\n    match: Match,\n    games: Game[],\n    pairs: Pair[]\n  ): Promise<MatchResult> {\n    try {\n      console.log(\"🔄 === INICIO ACTUALIZACIÓN ===\");\n\n      const stats = this.calculateMatchStatistics(match, games);\n      const pair1 = pairs.find((p) => p.id === match.pair1_id);\n      const pair2 = pairs.find((p) => p.id === match.pair2_id);\n\n      console.log(\"📊 Actualizando estadísticas del partido:\", {\n        pair1GamesWon: stats.pair1GamesWon,\n        pair2GamesWon: stats.pair2GamesWon,\n        pair1SetsWon: stats.pair1SetsWon,\n        pair2SetsWon: stats.pair2SetsWon,\n        isTie: stats.isTie,\n      });\n\n      // ACTUALIZAR ESTADÍSTICAS EN LA BASE DE DATOS\n      if (pair1) {\n        console.log(\n          `📊 Actualizando Pareja 1: ${pair1.player1?.name} y ${pair1.player2?.name}`\n        );\n        await updatePair(pair1.id, {\n          games_won: stats.pair1GamesWon,\n          sets_won: stats.pair1SetsWon,\n          points: stats.pair1TotalPoints,\n          matches_played: 1,\n        });\n        console.log(\n          `✅ Pareja 1 actualizada: ${stats.pair1GamesWon} juegos, ${stats.pair1SetsWon} sets`\n        );\n      }\n\n      if (pair2) {\n        console.log(\n          `📊 Actualizando Pareja 2: ${pair2.player1?.name} y ${pair2.player2?.name}`\n        );\n        await updatePair(pair2.id, {\n          games_won: stats.pair2GamesWon,\n          sets_won: stats.pair2SetsWon,\n          points: stats.pair2TotalPoints,\n          matches_played: 1,\n        });\n        console.log(\n          `✅ Pareja 2 actualizada: ${stats.pair2GamesWon} juegos, ${stats.pair2SetsWon} sets`\n        );\n      }\n\n      // Determinar ganador\n      let winnerId: string | undefined;\n\n      console.log(\"🏆 === DETERMINACIÓN DEL GANADOR ===\");\n      console.log(\n        `🏆 Sets: Pareja 1 = ${stats.pair1SetsWon}, Pareja 2 = ${stats.pair2SetsWon}`\n      );\n      console.log(\n        `🏆 Juegos: Pareja 1 = ${stats.pair1GamesWon}, Pareja 2 = ${stats.pair2GamesWon}`\n      );\n      console.log(`🏆 Es empate: ${stats.isTie}`);\n\n      if (stats.isTie) {\n        // Es un empate\n        winnerId = undefined;\n        console.log(\"🤝 Partido terminó en EMPATE\");\n      } else if (stats.pair1SetsWon > stats.pair2SetsWon) {\n        winnerId = match.pair1_id;\n        console.log(\"🏆 Pareja 1 gana por sets\");\n      } else if (stats.pair2SetsWon > stats.pair1SetsWon) {\n        winnerId = match.pair2_id;\n        console.log(\"🏆 Pareja 2 gana por sets\");\n      } else if (stats.pair1SetsWon === stats.pair2SetsWon) {\n        // Empate en sets - verificar por juegos\n        if (stats.pair1GamesWon > stats.pair2GamesWon) {\n          winnerId = match.pair1_id;\n          console.log(\"🏆 Pareja 1 gana por juegos\");\n        } else if (stats.pair2GamesWon > stats.pair1GamesWon) {\n          winnerId = match.pair2_id;\n          console.log(\"🏆 Pareja 2 gana por juegos\");\n        } else {\n          // Empate total\n          winnerId = undefined;\n          console.log(\"🤝 Empate total\");\n        }\n      } else {\n        // Caso inesperado\n        winnerId = undefined;\n        console.log(\"❌ Caso inesperado en determinación del ganador\");\n      }\n\n      let message: string;\n      if (stats.isTie) {\n        message = `✅ Partido finalizado.\\n\\n🤝 EMPATE (${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets)`;\n      } else if (winnerId) {\n        const winnerName =\n          winnerId === match.pair1_id\n            ? `${pair1?.player1?.name} y ${pair1?.player2?.name}`\n            : `${pair2?.player1?.name} y ${pair2?.player2?.name}`;\n        message = `✅ Partido finalizado.\\n\\n🏆 Ganador: ${winnerName} (${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets)`;\n      } else {\n        message = `✅ Partido finalizado.\\n\\n🤝 Empate (${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets)`;\n      }\n\n      console.log(\"🔄 === FIN ACTUALIZACIÓN ===\");\n\n      return {\n        success: true,\n        message,\n        pair1Stats: {\n          gamesWon: stats.pair1GamesWon,\n          setsWon: stats.pair1SetsWon,\n          points: stats.pair1TotalPoints,\n        },\n        pair2Stats: {\n          gamesWon: stats.pair2GamesWon,\n          setsWon: stats.pair2SetsWon,\n          points: stats.pair2TotalPoints,\n        },\n        winnerId,\n        isTie: stats.isTie,\n      };\n    } catch (error) {\n      console.error(\"❌ Error en updateMatchStatistics:\", error);\n      return {\n        success: false,\n        message: \"Error al actualizar estadísticas del partido\",\n        pair1Stats: { gamesWon: 0, setsWon: 0, points: 0 },\n        pair2Stats: { gamesWon: 0, setsWon: 0, points: 0 },\n        isTie: false,\n      };\n    }\n  }\n\n  /**\n   * Recalcula todas las estadísticas del torneo\n   */\n  static async recalculateAllStatistics(tournamentId: string): Promise<{\n    success: boolean;\n    message: string;\n  }> {\n    try {\n      console.log(\"🔄 === INICIO RECÁLCULO ===\");\n\n      // Obtener todos los datos del torneo\n      const pairs = await getPairs(tournamentId);\n      const matches = await getMatches(tournamentId);\n\n      // Resetear todas las estadísticas de las parejas\n      console.log(\"🔄 Reseteando estadísticas de todas las parejas...\");\n      for (const pair of pairs) {\n        await updatePair(pair.id, {\n          games_won: 0,\n          sets_won: 0,\n          points: 0,\n          matches_played: 0,\n        });\n      }\n\n      // Recalcular estadísticas para cada partido finalizado\n      let processedMatches = 0;\n      for (const match of matches) {\n        if (match.is_finished) {\n          console.log(`🔄 Procesando partido: ${match.id}`);\n          const games = await getGames(match.id);\n\n          if (games.length > 0) {\n            await this.updateMatchStatistics(match, games, pairs);\n            processedMatches++;\n          }\n        }\n      }\n\n      console.log(\n        `✅ Estadísticas recalculadas para ${processedMatches} partidos`\n      );\n      console.log(\"🔄 === FIN RECÁLCULO ===\");\n\n      return {\n        success: true,\n        message: `✅ Estadísticas recalculadas exitosamente para ${processedMatches} partidos`,\n      };\n    } catch (error) {\n      console.error(\"❌ Error en recalculateAllStatistics:\", error);\n      return {\n        success: false,\n        message: \"Error al recalcular estadísticas del torneo\",\n      };\n    }\n  }\n\n  /**\n   * Calcula el ranking de las parejas\n   */\n  static calculateRanking(pairs: Pair[]): Pair[] {\n    return [...pairs].sort((a, b) => {\n      // Primero por sets ganados\n      if (a.sets_won !== b.sets_won) {\n        return b.sets_won - a.sets_won;\n      }\n      // Luego por juegos ganados\n      if (a.games_won !== b.games_won) {\n        return b.games_won - a.games_won;\n      }\n      // Finalmente por puntos totales\n      return b.points - a.points;\n    });\n  }\n}\n"],"mappings":"AACA,SAASA,UAAU,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,iBAAiB;AAmB5E,OAAO,MAAMC,qBAAqB,CAAC;EACjC;AACF;AACA;EACE,OAAOC,wBAAwBA,CAC7BC,KAAY,EACZC,KAAa,EASb;IACAC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IACjDD,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,KAAK,CAACI,EAAE,CAAC;IACvCF,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,KAAK,CAACI,MAAM,CAAC;IAEhD,IAAIC,aAAa,GAAG,CAAC;IACrB,IAAIC,aAAa,GAAG,CAAC;IACrB,IAAIC,gBAAgB,GAAG,CAAC;IACxB,IAAIC,gBAAgB,GAAG,CAAC;IACxB,IAAIC,YAAY,GAAG,CAAC;IACpB,IAAIC,YAAY,GAAG,CAAC;;IAEpB;IACAV,KAAK,CAACW,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAC7BZ,OAAO,CAACC,GAAG,CAAC,gBAAgBW,KAAK,GAAG,CAAC,MAAM,CAAC;MAC5CZ,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEY,IAAI,CAACC,SAAS,CAACH,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;MAEjE,IAAIA,IAAI,CAACI,YAAY,EAAE;QACrBf,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;QACjC;QACA,IAAIU,IAAI,CAACK,sBAAsB,GAAGL,IAAI,CAACM,sBAAsB,EAAE;UAC7Db,aAAa,EAAE;UACfJ,OAAO,CAACC,GAAG,CACT,8BAA8BU,IAAI,CAACK,sBAAsB,IAAIL,IAAI,CAACM,sBAAsB,EAC1F,CAAC;QACH,CAAC,MAAM,IAAIN,IAAI,CAACM,sBAAsB,GAAGN,IAAI,CAACK,sBAAsB,EAAE;UACpEX,aAAa,EAAE;UACfL,OAAO,CAACC,GAAG,CACT,8BAA8BU,IAAI,CAACK,sBAAsB,IAAIL,IAAI,CAACM,sBAAsB,EAC1F,CAAC;QACH,CAAC,MAAM;UACLjB,OAAO,CAACC,GAAG,CACT,2BAA2BU,IAAI,CAACK,sBAAsB,IAAIL,IAAI,CAACM,sBAAsB,EACvF,CAAC;QACH;QACAX,gBAAgB,IAAIK,IAAI,CAACK,sBAAsB;QAC/CT,gBAAgB,IAAII,IAAI,CAACM,sBAAsB;MACjD,CAAC,MAAM;QACLjB,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACpCD,OAAO,CAACC,GAAG,CACT,uBAAuBU,IAAI,CAACO,WAAW,sBAAsBP,IAAI,CAACQ,WAAW,EAC/E,CAAC;;QAED;QACA,IAAIR,IAAI,CAACO,WAAW,GAAGP,IAAI,CAACQ,WAAW,EAAE;UACvCf,aAAa,EAAE;UACfJ,OAAO,CAACC,GAAG,CACT,0BAA0BU,IAAI,CAACO,WAAW,IAAIP,IAAI,CAACQ,WAAW,EAChE,CAAC;QACH,CAAC,MAAM,IAAIR,IAAI,CAACQ,WAAW,GAAGR,IAAI,CAACO,WAAW,EAAE;UAC9Cb,aAAa,EAAE;UACfL,OAAO,CAACC,GAAG,CACT,0BAA0BU,IAAI,CAACO,WAAW,IAAIP,IAAI,CAACQ,WAAW,EAChE,CAAC;QACH,CAAC,MAAM;UACLnB,OAAO,CAACC,GAAG,CACT,uBAAuBU,IAAI,CAACO,WAAW,IAAIP,IAAI,CAACQ,WAAW,EAC7D,CAAC;QACH;QACAb,gBAAgB,IAAIK,IAAI,CAACO,WAAW;QACpCX,gBAAgB,IAAII,IAAI,CAACQ,WAAW;MACtC;;MAEA;MACA,IAAI,CAACR,IAAI,CAACI,YAAY,EAAE;QACtB,IAAIJ,IAAI,CAACO,WAAW,IAAI,CAAC,EAAE;UACzBV,YAAY,EAAE;UACdR,OAAO,CAACC,GAAG,CACT,mCAAmCW,KAAK,GAAG,CAAC,QAC1CD,IAAI,CAACO,WAAW,SAEpB,CAAC;QACH;QACA,IAAIP,IAAI,CAACQ,WAAW,IAAI,CAAC,EAAE;UACzBV,YAAY,EAAE;UACdT,OAAO,CAACC,GAAG,CACT,mCAAmCW,KAAK,GAAG,CAAC,QAC1CD,IAAI,CAACQ,WAAW,SAEpB,CAAC;QACH;MACF;MAEAnB,OAAO,CAACC,GAAG,CACT,wBACEW,KAAK,GAAG,CAAC,gBACKR,aAAa,uBAAuBC,aAAa,SACnE,CAAC;IACH,CAAC,CAAC;IAEFL,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzCD,OAAO,CAACC,GAAG,CACT,yBAAyBG,aAAa,gBAAgBC,aAAa,EACrE,CAAC;IACDL,OAAO,CAACC,GAAG,CACT,uBAAuBO,YAAY,gBAAgBC,YAAY,EACjE,CAAC;IACDT,OAAO,CAACC,GAAG,CACT,iCAAiCK,gBAAgB,gBAAgBC,gBAAgB,EACnF,CAAC;;IAED;IACA,MAAMa,KAAK,GAAGhB,aAAa,KAAKC,aAAa;IAC7CL,OAAO,CAACC,GAAG,CAAC,iBAAiBmB,KAAK,KAAKhB,aAAa,IAAIC,aAAa,GAAG,CAAC;IAEzEL,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IAErC,OAAO;MACLG,aAAa;MACbC,aAAa;MACbG,YAAY;MACZC,YAAY;MACZH,gBAAgB;MAChBC,gBAAgB;MAChBa;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACE,aAAaC,qBAAqBA,CAChCvB,KAAY,EACZC,KAAa,EACbuB,KAAa,EACS;IACtB,IAAI;MACFtB,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAE9C,MAAMsB,KAAK,GAAG,IAAI,CAAC1B,wBAAwB,CAACC,KAAK,EAAEC,KAAK,CAAC;MACzD,MAAMyB,KAAK,GAAGF,KAAK,CAACG,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACxB,EAAE,KAAKJ,KAAK,CAAC6B,QAAQ,CAAC;MACxD,MAAMC,KAAK,GAAGN,KAAK,CAACG,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACxB,EAAE,KAAKJ,KAAK,CAAC+B,QAAQ,CAAC;MAExD7B,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAE;QACvDG,aAAa,EAAEmB,KAAK,CAACnB,aAAa;QAClCC,aAAa,EAAEkB,KAAK,CAAClB,aAAa;QAClCG,YAAY,EAAEe,KAAK,CAACf,YAAY;QAChCC,YAAY,EAAEc,KAAK,CAACd,YAAY;QAChCW,KAAK,EAAEG,KAAK,CAACH;MACf,CAAC,CAAC;;MAEF;MACA,IAAII,KAAK,EAAE;QAAA,IAAAM,aAAA,EAAAC,cAAA;QACT/B,OAAO,CAACC,GAAG,CACT,8BAAA6B,aAAA,GAA6BN,KAAK,CAACQ,OAAO,cAAAF,aAAA,uBAAbA,aAAA,CAAeG,IAAI,OAAAF,cAAA,GAAMP,KAAK,CAACU,OAAO,cAAAH,cAAA,uBAAbA,cAAA,CAAeE,IAAI,EAC3E,CAAC;QACD,MAAMzC,UAAU,CAACgC,KAAK,CAACtB,EAAE,EAAE;UACzBiC,SAAS,EAAEZ,KAAK,CAACnB,aAAa;UAC9BgC,QAAQ,EAAEb,KAAK,CAACf,YAAY;UAC5B6B,MAAM,EAAEd,KAAK,CAACjB,gBAAgB;UAC9BgC,cAAc,EAAE;QAClB,CAAC,CAAC;QACFtC,OAAO,CAACC,GAAG,CACT,2BAA2BsB,KAAK,CAACnB,aAAa,YAAYmB,KAAK,CAACf,YAAY,OAC9E,CAAC;MACH;MAEA,IAAIoB,KAAK,EAAE;QAAA,IAAAW,aAAA,EAAAC,cAAA;QACTxC,OAAO,CAACC,GAAG,CACT,8BAAAsC,aAAA,GAA6BX,KAAK,CAACI,OAAO,cAAAO,aAAA,uBAAbA,aAAA,CAAeN,IAAI,OAAAO,cAAA,GAAMZ,KAAK,CAACM,OAAO,cAAAM,cAAA,uBAAbA,cAAA,CAAeP,IAAI,EAC3E,CAAC;QACD,MAAMzC,UAAU,CAACoC,KAAK,CAAC1B,EAAE,EAAE;UACzBiC,SAAS,EAAEZ,KAAK,CAAClB,aAAa;UAC9B+B,QAAQ,EAAEb,KAAK,CAACd,YAAY;UAC5B4B,MAAM,EAAEd,KAAK,CAAChB,gBAAgB;UAC9B+B,cAAc,EAAE;QAClB,CAAC,CAAC;QACFtC,OAAO,CAACC,GAAG,CACT,2BAA2BsB,KAAK,CAAClB,aAAa,YAAYkB,KAAK,CAACd,YAAY,OAC9E,CAAC;MACH;;MAEA;MACA,IAAIgC,QAA4B;MAEhCzC,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnDD,OAAO,CAACC,GAAG,CACT,uBAAuBsB,KAAK,CAACf,YAAY,gBAAgBe,KAAK,CAACd,YAAY,EAC7E,CAAC;MACDT,OAAO,CAACC,GAAG,CACT,yBAAyBsB,KAAK,CAACnB,aAAa,gBAAgBmB,KAAK,CAAClB,aAAa,EACjF,CAAC;MACDL,OAAO,CAACC,GAAG,CAAC,iBAAiBsB,KAAK,CAACH,KAAK,EAAE,CAAC;MAE3C,IAAIG,KAAK,CAACH,KAAK,EAAE;QACf;QACAqB,QAAQ,GAAGC,SAAS;QACpB1C,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC7C,CAAC,MAAM,IAAIsB,KAAK,CAACf,YAAY,GAAGe,KAAK,CAACd,YAAY,EAAE;QAClDgC,QAAQ,GAAG3C,KAAK,CAAC6B,QAAQ;QACzB3B,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MAC1C,CAAC,MAAM,IAAIsB,KAAK,CAACd,YAAY,GAAGc,KAAK,CAACf,YAAY,EAAE;QAClDiC,QAAQ,GAAG3C,KAAK,CAAC+B,QAAQ;QACzB7B,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MAC1C,CAAC,MAAM,IAAIsB,KAAK,CAACf,YAAY,KAAKe,KAAK,CAACd,YAAY,EAAE;QACpD;QACA,IAAIc,KAAK,CAACnB,aAAa,GAAGmB,KAAK,CAAClB,aAAa,EAAE;UAC7CoC,QAAQ,GAAG3C,KAAK,CAAC6B,QAAQ;UACzB3B,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC5C,CAAC,MAAM,IAAIsB,KAAK,CAAClB,aAAa,GAAGkB,KAAK,CAACnB,aAAa,EAAE;UACpDqC,QAAQ,GAAG3C,KAAK,CAAC+B,QAAQ;UACzB7B,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC5C,CAAC,MAAM;UACL;UACAwC,QAAQ,GAAGC,SAAS;UACpB1C,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;QAChC;MACF,CAAC,MAAM;QACL;QACAwC,QAAQ,GAAGC,SAAS;QACpB1C,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;MAC/D;MAEA,IAAI0C,OAAe;MACnB,IAAIpB,KAAK,CAACH,KAAK,EAAE;QACfuB,OAAO,GAAG,uCAAuCpB,KAAK,CAACnB,aAAa,IAAImB,KAAK,CAAClB,aAAa,YAAYkB,KAAK,CAACf,YAAY,IAAIe,KAAK,CAACd,YAAY,QAAQ;MACzJ,CAAC,MAAM,IAAIgC,QAAQ,EAAE;QAAA,IAAAG,cAAA,EAAAC,cAAA,EAAAC,cAAA,EAAAC,cAAA;QACnB,MAAMC,UAAU,GACdP,QAAQ,KAAK3C,KAAK,CAAC6B,QAAQ,GACvB,GAAGH,KAAK,aAALA,KAAK,wBAAAoB,cAAA,GAALpB,KAAK,CAAEQ,OAAO,cAAAY,cAAA,uBAAdA,cAAA,CAAgBX,IAAI,MAAMT,KAAK,aAALA,KAAK,wBAAAqB,cAAA,GAALrB,KAAK,CAAEU,OAAO,cAAAW,cAAA,uBAAdA,cAAA,CAAgBZ,IAAI,EAAE,GACnD,GAAGL,KAAK,aAALA,KAAK,wBAAAkB,cAAA,GAALlB,KAAK,CAAEI,OAAO,cAAAc,cAAA,uBAAdA,cAAA,CAAgBb,IAAI,MAAML,KAAK,aAALA,KAAK,wBAAAmB,cAAA,GAALnB,KAAK,CAAEM,OAAO,cAAAa,cAAA,uBAAdA,cAAA,CAAgBd,IAAI,EAAE;QACzDU,OAAO,GAAG,wCAAwCK,UAAU,KAAKzB,KAAK,CAACnB,aAAa,IAAImB,KAAK,CAAClB,aAAa,YAAYkB,KAAK,CAACf,YAAY,IAAIe,KAAK,CAACd,YAAY,QAAQ;MACzK,CAAC,MAAM;QACLkC,OAAO,GAAG,uCAAuCpB,KAAK,CAACnB,aAAa,IAAImB,KAAK,CAAClB,aAAa,YAAYkB,KAAK,CAACf,YAAY,IAAIe,KAAK,CAACd,YAAY,QAAQ;MACzJ;MAEAT,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAE3C,OAAO;QACLgD,OAAO,EAAE,IAAI;QACbN,OAAO;QACPO,UAAU,EAAE;UACVC,QAAQ,EAAE5B,KAAK,CAACnB,aAAa;UAC7BgD,OAAO,EAAE7B,KAAK,CAACf,YAAY;UAC3B6B,MAAM,EAAEd,KAAK,CAACjB;QAChB,CAAC;QACD+C,UAAU,EAAE;UACVF,QAAQ,EAAE5B,KAAK,CAAClB,aAAa;UAC7B+C,OAAO,EAAE7B,KAAK,CAACd,YAAY;UAC3B4B,MAAM,EAAEd,KAAK,CAAChB;QAChB,CAAC;QACDkC,QAAQ;QACRrB,KAAK,EAAEG,KAAK,CAACH;MACf,CAAC;IACH,CAAC,CAAC,OAAOkC,KAAK,EAAE;MACdtD,OAAO,CAACsD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,OAAO;QACLL,OAAO,EAAE,KAAK;QACdN,OAAO,EAAE,8CAA8C;QACvDO,UAAU,EAAE;UAAEC,QAAQ,EAAE,CAAC;UAAEC,OAAO,EAAE,CAAC;UAAEf,MAAM,EAAE;QAAE,CAAC;QAClDgB,UAAU,EAAE;UAAEF,QAAQ,EAAE,CAAC;UAAEC,OAAO,EAAE,CAAC;UAAEf,MAAM,EAAE;QAAE,CAAC;QAClDjB,KAAK,EAAE;MACT,CAAC;IACH;EACF;;EAEA;AACF;AACA;EACE,aAAamC,wBAAwBA,CAACC,YAAoB,EAGvD;IACD,IAAI;MACFxD,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;;MAE1C;MACA,MAAMqB,KAAK,GAAG,MAAM7B,QAAQ,CAAC+D,YAAY,CAAC;MAC1C,MAAMC,OAAO,GAAG,MAAM/D,UAAU,CAAC8D,YAAY,CAAC;;MAE9C;MACAxD,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;MACjE,KAAK,MAAMyD,IAAI,IAAIpC,KAAK,EAAE;QACxB,MAAM9B,UAAU,CAACkE,IAAI,CAACxD,EAAE,EAAE;UACxBiC,SAAS,EAAE,CAAC;UACZC,QAAQ,EAAE,CAAC;UACXC,MAAM,EAAE,CAAC;UACTC,cAAc,EAAE;QAClB,CAAC,CAAC;MACJ;;MAEA;MACA,IAAIqB,gBAAgB,GAAG,CAAC;MACxB,KAAK,MAAM7D,KAAK,IAAI2D,OAAO,EAAE;QAC3B,IAAI3D,KAAK,CAAC8D,WAAW,EAAE;UACrB5D,OAAO,CAACC,GAAG,CAAC,0BAA0BH,KAAK,CAACI,EAAE,EAAE,CAAC;UACjD,MAAMH,KAAK,GAAG,MAAMJ,QAAQ,CAACG,KAAK,CAACI,EAAE,CAAC;UAEtC,IAAIH,KAAK,CAACI,MAAM,GAAG,CAAC,EAAE;YACpB,MAAM,IAAI,CAACkB,qBAAqB,CAACvB,KAAK,EAAEC,KAAK,EAAEuB,KAAK,CAAC;YACrDqC,gBAAgB,EAAE;UACpB;QACF;MACF;MAEA3D,OAAO,CAACC,GAAG,CACT,oCAAoC0D,gBAAgB,WACtD,CAAC;MACD3D,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MAEvC,OAAO;QACLgD,OAAO,EAAE,IAAI;QACbN,OAAO,EAAE,iDAAiDgB,gBAAgB;MAC5E,CAAC;IACH,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdtD,OAAO,CAACsD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5D,OAAO;QACLL,OAAO,EAAE,KAAK;QACdN,OAAO,EAAE;MACX,CAAC;IACH;EACF;;EAEA;AACF;AACA;EACE,OAAOkB,gBAAgBA,CAACvC,KAAa,EAAU;IAC7C,OAAO,CAAC,GAAGA,KAAK,CAAC,CAACwC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC/B;MACA,IAAID,CAAC,CAAC3B,QAAQ,KAAK4B,CAAC,CAAC5B,QAAQ,EAAE;QAC7B,OAAO4B,CAAC,CAAC5B,QAAQ,GAAG2B,CAAC,CAAC3B,QAAQ;MAChC;MACA;MACA,IAAI2B,CAAC,CAAC5B,SAAS,KAAK6B,CAAC,CAAC7B,SAAS,EAAE;QAC/B,OAAO6B,CAAC,CAAC7B,SAAS,GAAG4B,CAAC,CAAC5B,SAAS;MAClC;MACA;MACA,OAAO6B,CAAC,CAAC3B,MAAM,GAAG0B,CAAC,CAAC1B,MAAM;IAC5B,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}