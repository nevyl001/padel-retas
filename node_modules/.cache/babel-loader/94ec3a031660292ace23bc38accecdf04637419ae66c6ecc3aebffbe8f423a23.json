{"ast":null,"code":"import { updatePair, getPairs, getMatches, getGames } from \"../lib/database\";\nexport class SetCalculator {\n  /**\n   * Calcula estadísticas detectando sets cuando una pareja llega a 6 puntos\n   */\n  static calculateMatchStatistics(match, games) {\n    let pair1GamesWon = 0;\n    let pair2GamesWon = 0;\n    let pair1TotalPoints = 0;\n    let pair2TotalPoints = 0;\n    console.log(\"🎯 === INICIO CÁLCULO DE ESTADÍSTICAS ===\");\n    console.log(\"🎯 Partido ID:\", match.id);\n    console.log(\"🎯 Total de juegos:\", games.length);\n\n    // Contar juegos ganados y verificar sets por cada juego\n    games.forEach((game, index) => {\n      console.log(`📊 === JUEGO ${index + 1} ===`);\n      console.log(\"📊 Datos del juego:\", JSON.stringify(game, null, 2));\n      if (game.is_tie_break) {\n        console.log(\"📊 Es un tie-break\");\n        // Para tie-breaks\n        if (game.tie_break_pair1_points >= 10 && game.tie_break_pair1_points - game.tie_break_pair2_points >= 2) {\n          pair1GamesWon++;\n          console.log(`✅ Pareja 1 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`);\n        } else if (game.tie_break_pair2_points >= 10 && game.tie_break_pair2_points - game.tie_break_pair1_points >= 2) {\n          pair2GamesWon++;\n          console.log(`✅ Pareja 2 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`);\n        } else {\n          // Empate en tie-break - ninguna gana juego (mantener como estaba)\n          console.log(`🤝 Empate en tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points} - ninguna gana juego`);\n        }\n        pair1TotalPoints += game.tie_break_pair1_points;\n        pair2TotalPoints += game.tie_break_pair2_points;\n      } else {\n        console.log(\"📊 Es un juego normal\");\n        console.log(`📊 Puntos Pareja 1: ${game.pair1_games}, Puntos Pareja 2: ${game.pair2_games}`);\n\n        // Para juegos normales\n        if (game.pair1_games > game.pair2_games) {\n          pair1GamesWon++;\n          console.log(`✅ Pareja 1 gana juego: ${game.pair1_games}-${game.pair2_games}`);\n        } else if (game.pair2_games > game.pair1_games) {\n          pair2GamesWon++;\n          console.log(`✅ Pareja 2 gana juego: ${game.pair1_games}-${game.pair2_games}`);\n        } else {\n          // Empate en juego - ninguna gana juego (mantener como estaba)\n          console.log(`🤝 Empate en juego: ${game.pair1_games}-${game.pair2_games} - ninguna gana juego`);\n        }\n        pair1TotalPoints += game.pair1_games;\n        pair2TotalPoints += game.pair2_games;\n      }\n      console.log(`📊 Después del juego ${index + 1}: Pareja 1 = ${pair1GamesWon} juegos, Pareja 2 = ${pair2GamesWon} juegos`);\n    });\n    console.log(\"🔍 === VERIFICACIÓN DE SETS ===\");\n    console.log(`🔍 Pareja 1 tiene ${pair1GamesWon} juegos ganados`);\n    console.log(`🔍 Pareja 2 tiene ${pair2GamesWon} juegos ganados`);\n\n    // Calcular sets ganados - CRITERIO CORREGIDO:\n    // Un set se gana cuando una pareja llega a 6 puntos en un juego\n    let pair1SetsWon = 0;\n    let pair2SetsWon = 0;\n\n    // Verificar cada juego para ver si alguna pareja llegó a 6 puntos\n    games.forEach((game, index) => {\n      if (!game.is_tie_break) {\n        console.log(`🔍 Verificando juego ${index + 1} para sets:`);\n        console.log(`🔍 Pareja 1: ${game.pair1_games} puntos, Pareja 2: ${game.pair2_games} puntos`);\n\n        // Si una pareja llega a 6 puntos en este juego, gana 1 set\n        if (game.pair1_games >= 6) {\n          pair1SetsWon++;\n          console.log(`🏆 Pareja 1 gana 1 SET en juego ${index + 1} con ${game.pair1_games} puntos`);\n        }\n        if (game.pair2_games >= 6) {\n          pair2SetsWon++;\n          console.log(`🏆 Pareja 2 gana 1 SET en juego ${index + 1} con ${game.pair2_games} puntos`);\n        }\n      }\n    });\n    console.log(`📊 Sets finales: Pareja 1 = ${pair1SetsWon}, Pareja 2 = ${pair2SetsWon}`);\n\n    // Determinar si es empate - CORREGIDO\n    // Es empate solo si tienen exactamente los mismos juegos Y los mismos sets\n    const isTie = pair1GamesWon === pair2GamesWon && pair1SetsWon === pair2SetsWon;\n    console.log(\"🔍 === VERIFICACIÓN DE EMPATE ===\");\n    console.log(`🔍 Juegos: ${pair1GamesWon} vs ${pair2GamesWon} (iguales: ${pair1GamesWon === pair2GamesWon})`);\n    console.log(`🔍 Sets: ${pair1SetsWon} vs ${pair2SetsWon} (iguales: ${pair1SetsWon === pair2SetsWon})`);\n    console.log(`🔍 Es empate: ${isTie}`);\n    console.log(\"📊 === RESULTADO FINAL ===\");\n    console.log(`📊 Juegos: ${pair1GamesWon}-${pair2GamesWon}`);\n    console.log(`📊 Sets: ${pair1SetsWon}-${pair2SetsWon}`);\n    console.log(`📊 Puntos totales: ${pair1TotalPoints}-${pair2TotalPoints}`);\n    console.log(`📊 Es empate: ${isTie}`);\n    console.log(\"🎯 === FIN CÁLCULO DE ESTADÍSTICAS ===\");\n    return {\n      pair1GamesWon,\n      pair2GamesWon,\n      pair1SetsWon,\n      pair2SetsWon,\n      pair1TotalPoints,\n      pair2TotalPoints,\n      isTie\n    };\n  }\n\n  /**\n   * Actualiza estadísticas de un partido específico\n   */\n  static async updateMatchStatistics(match, games, pairs) {\n    try {\n      console.log(\"🔄 === INICIO ACTUALIZACIÓN DE ESTADÍSTICAS ===\");\n      const stats = this.calculateMatchStatistics(match, games);\n      const pair1 = pairs.find(p => p.id === match.pair1_id);\n      const pair2 = pairs.find(p => p.id === match.pair2_id);\n      console.log(\"📊 Actualizando estadísticas del partido:\", {\n        pair1GamesWon: stats.pair1GamesWon,\n        pair2GamesWon: stats.pair2GamesWon,\n        pair1SetsWon: stats.pair1SetsWon,\n        pair2SetsWon: stats.pair2SetsWon,\n        isTie: stats.isTie\n      });\n\n      // ACTUALIZAR ESTADÍSTICAS EN LA BASE DE DATOS INMEDIATAMENTE\n      if (pair1) {\n        var _pair1$player, _pair1$player2;\n        console.log(`📊 Actualizando Pareja 1: ${(_pair1$player = pair1.player1) === null || _pair1$player === void 0 ? void 0 : _pair1$player.name} y ${(_pair1$player2 = pair1.player2) === null || _pair1$player2 === void 0 ? void 0 : _pair1$player2.name}`);\n        console.log(`📊 Estadísticas actuales: ${pair1.games_won} juegos, ${pair1.sets_won} sets, ${pair1.points} puntos`);\n        console.log(`📊 Agregando: ${stats.pair1GamesWon} juegos, ${stats.pair1SetsWon} sets, ${stats.pair1TotalPoints} puntos`);\n        await updatePair(pair1.id, {\n          games_won: pair1.games_won + stats.pair1GamesWon,\n          sets_won: pair1.sets_won + stats.pair1SetsWon,\n          points: pair1.points + stats.pair1TotalPoints,\n          matches_played: pair1.matches_played + 1\n        });\n        console.log(`✅ Pareja 1 actualizada: ${stats.pair1GamesWon} juegos, ${stats.pair1SetsWon} sets`);\n      }\n      if (pair2) {\n        var _pair2$player, _pair2$player2;\n        console.log(`📊 Actualizando Pareja 2: ${(_pair2$player = pair2.player1) === null || _pair2$player === void 0 ? void 0 : _pair2$player.name} y ${(_pair2$player2 = pair2.player2) === null || _pair2$player2 === void 0 ? void 0 : _pair2$player2.name}`);\n        console.log(`📊 Estadísticas actuales: ${pair2.games_won} juegos, ${pair2.sets_won} sets, ${pair2.points} puntos`);\n        console.log(`📊 Agregando: ${stats.pair2GamesWon} juegos, ${stats.pair2SetsWon} sets, ${stats.pair2TotalPoints} puntos`);\n        await updatePair(pair2.id, {\n          games_won: pair2.games_won + stats.pair2GamesWon,\n          sets_won: pair2.sets_won + stats.pair2SetsWon,\n          points: pair2.points + stats.pair2TotalPoints,\n          matches_played: pair2.matches_played + 1\n        });\n        console.log(`✅ Pareja 2 actualizada: ${stats.pair2GamesWon} juegos, ${stats.pair2SetsWon} sets`);\n      }\n\n      // Determinar ganador basado en SETS GANADOS (criterio principal) - CORREGIDO\n      let winnerId;\n      console.log(\"🏆 === DETERMINACIÓN DEL GANADOR ===\");\n      console.log(`🏆 Sets: Pareja 1 = ${stats.pair1SetsWon}, Pareja 2 = ${stats.pair2SetsWon}`);\n      console.log(`🏆 Juegos: Pareja 1 = ${stats.pair1GamesWon}, Pareja 2 = ${stats.pair2GamesWon}`);\n      console.log(`🏆 Es empate: ${stats.isTie}`);\n      if (stats.isTie) {\n        // Es un empate\n        winnerId = undefined;\n        console.log(\"🤝 Partido terminó en EMPATE\");\n      } else if (stats.pair1SetsWon > stats.pair2SetsWon) {\n        winnerId = match.pair1_id;\n        console.log(\"🏆 Pareja 1 gana por sets\");\n      } else if (stats.pair2SetsWon > stats.pair1SetsWon) {\n        winnerId = match.pair2_id;\n        console.log(\"🏆 Pareja 2 gana por sets\");\n      } else if (stats.pair1SetsWon === stats.pair2SetsWon) {\n        // Empate en sets - verificar por juegos\n        if (stats.pair1GamesWon > stats.pair2GamesWon) {\n          winnerId = match.pair1_id;\n          console.log(\"🏆 Pareja 1 gana por juegos\");\n        } else if (stats.pair2GamesWon > stats.pair1GamesWon) {\n          winnerId = match.pair2_id;\n          console.log(\"🏆 Pareja 2 gana por juegos\");\n        } else {\n          // Empate total\n          winnerId = undefined;\n          console.log(\"🤝 Empate total\");\n        }\n      } else {\n        // Caso inesperado\n        winnerId = undefined;\n        console.log(\"❌ Caso inesperado en determinación del ganador\");\n      }\n      let message;\n      if (stats.isTie) {\n        message = `✅ Partido finalizado.\\n\\n🤝 EMPATE (${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets)`;\n      } else if (winnerId) {\n        var _pair1$player3, _pair1$player4, _pair2$player3, _pair2$player4;\n        const winnerName = winnerId === match.pair1_id ? `${pair1 === null || pair1 === void 0 ? void 0 : (_pair1$player3 = pair1.player1) === null || _pair1$player3 === void 0 ? void 0 : _pair1$player3.name} y ${pair1 === null || pair1 === void 0 ? void 0 : (_pair1$player4 = pair1.player2) === null || _pair1$player4 === void 0 ? void 0 : _pair1$player4.name}` : `${pair2 === null || pair2 === void 0 ? void 0 : (_pair2$player3 = pair2.player1) === null || _pair2$player3 === void 0 ? void 0 : _pair2$player3.name} y ${pair2 === null || pair2 === void 0 ? void 0 : (_pair2$player4 = pair2.player2) === null || _pair2$player4 === void 0 ? void 0 : _pair2$player4.name}`;\n        message = `✅ Partido finalizado.\\n\\n🏆 Ganador: ${winnerName} (${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets)`;\n      } else {\n        message = `✅ Partido finalizado.\\n\\n🤝 Empate (${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets)`;\n      }\n      console.log(\"🔄 === FIN ACTUALIZACIÓN DE ESTADÍSTICAS ===\");\n      return {\n        success: true,\n        message,\n        pair1Stats: {\n          gamesWon: stats.pair1GamesWon,\n          setsWon: stats.pair1SetsWon,\n          points: stats.pair1TotalPoints\n        },\n        pair2Stats: {\n          gamesWon: stats.pair2GamesWon,\n          setsWon: stats.pair2SetsWon,\n          points: stats.pair2TotalPoints\n        },\n        winnerId,\n        isTie: stats.isTie\n      };\n    } catch (error) {\n      console.error(\"❌ Error actualizando estadísticas:\", error);\n      return {\n        success: false,\n        message: `Error actualizando estadísticas: ${error}`,\n        pair1Stats: {\n          gamesWon: 0,\n          setsWon: 0,\n          points: 0\n        },\n        pair2Stats: {\n          gamesWon: 0,\n          setsWon: 0,\n          points: 0\n        },\n        isTie: false\n      };\n    }\n  }\n\n  /**\n   * Recalcula TODAS las estadísticas desde cero para un torneo\n   */\n  static async recalculateAllStatistics(tournamentId) {\n    try {\n      console.log(\"🔄 === INICIO RECÁLCULO COMPLETO ===\");\n      console.log(\"🔄 Recalculando TODAS las estadísticas desde cero...\");\n\n      // Obtener todas las parejas del torneo\n      const pairs = await getPairs(tournamentId);\n      console.log(`📊 Total de parejas: ${pairs.length}`);\n\n      // Resetear TODAS las estadísticas a 0\n      console.log(\"📊 Reseteando estadísticas de todas las parejas...\");\n      for (const pair of pairs) {\n        var _pair$player, _pair$player2;\n        await updatePair(pair.id, {\n          games_won: 0,\n          sets_won: 0,\n          points: 0,\n          matches_played: 0\n        });\n        console.log(`✅ Pareja ${(_pair$player = pair.player1) === null || _pair$player === void 0 ? void 0 : _pair$player.name} y ${(_pair$player2 = pair.player2) === null || _pair$player2 === void 0 ? void 0 : _pair$player2.name} reseteada`);\n      }\n      console.log(\"✅ Todas las estadísticas reseteadas a 0\");\n\n      // Obtener todos los partidos del torneo\n      const matches = await getMatches(tournamentId);\n      console.log(`📋 Total de partidos: ${matches.length}`);\n      console.log(`📋 Partidos finalizados: ${matches.filter(m => m.is_finished).length}`);\n\n      // Contadores acumulados para cada pareja\n      const pairStats = {};\n\n      // Inicializar contadores\n      pairs.forEach(pair => {\n        pairStats[pair.id] = {\n          games: 0,\n          sets: 0,\n          points: 0,\n          matches: 0\n        };\n      });\n\n      // Recalcular estadísticas para cada partido finalizado\n      let processedMatches = 0;\n      for (const match of matches) {\n        if (match.is_finished) {\n          console.log(`🎯 === PROCESANDO PARTIDO ${match.id} ===`);\n          const games = await getGames(match.id);\n          console.log(`📊 Partido tiene ${games.length} juegos`);\n          const stats = this.calculateMatchStatistics(match, games);\n          console.log(`📈 Estadísticas calculadas: ${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets`);\n\n          // Acumular estadísticas para pareja 1\n          if (pairStats[match.pair1_id]) {\n            const beforeGames = pairStats[match.pair1_id].games;\n            const beforeSets = pairStats[match.pair1_id].sets;\n            pairStats[match.pair1_id].games += stats.pair1GamesWon;\n            pairStats[match.pair1_id].sets += stats.pair1SetsWon;\n            pairStats[match.pair1_id].points += stats.pair1TotalPoints;\n            pairStats[match.pair1_id].matches += 1;\n            console.log(`📊 Pareja 1 acumulado: ${beforeGames}→${pairStats[match.pair1_id].games} juegos, ${beforeSets}→${pairStats[match.pair1_id].sets} sets`);\n          }\n\n          // Acumular estadísticas para pareja 2\n          if (pairStats[match.pair2_id]) {\n            const beforeGames = pairStats[match.pair2_id].games;\n            const beforeSets = pairStats[match.pair2_id].sets;\n            pairStats[match.pair2_id].games += stats.pair2GamesWon;\n            pairStats[match.pair2_id].sets += stats.pair2SetsWon;\n            pairStats[match.pair2_id].points += stats.pair2TotalPoints;\n            pairStats[match.pair2_id].matches += 1;\n            console.log(`📊 Pareja 2 acumulado: ${beforeGames}→${pairStats[match.pair2_id].games} juegos, ${beforeSets}→${pairStats[match.pair2_id].sets} sets`);\n          }\n          console.log(`✅ Partido ${match.id} procesado: ${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets, Empate: ${stats.isTie}`);\n          processedMatches++;\n        }\n      }\n\n      // Actualizar todas las parejas con las estadísticas finales\n      console.log(\"📊 === ACTUALIZANDO ESTADÍSTICAS FINALES ===\");\n      for (const pair of pairs) {\n        const stats = pairStats[pair.id];\n        if (stats) {\n          var _pair$player3, _pair$player4, _pair$player5, _pair$player6;\n          console.log(`📊 Actualizando ${(_pair$player3 = pair.player1) === null || _pair$player3 === void 0 ? void 0 : _pair$player3.name} y ${(_pair$player4 = pair.player2) === null || _pair$player4 === void 0 ? void 0 : _pair$player4.name}:`);\n          console.log(`📊 Juegos: ${stats.games}, Sets: ${stats.sets}, Puntos: ${stats.points}, Partidos: ${stats.matches}`);\n          await updatePair(pair.id, {\n            games_won: stats.games,\n            sets_won: stats.sets,\n            points: stats.points,\n            matches_played: stats.matches\n          });\n          console.log(`✅ ${(_pair$player5 = pair.player1) === null || _pair$player5 === void 0 ? void 0 : _pair$player5.name} y ${(_pair$player6 = pair.player2) === null || _pair$player6 === void 0 ? void 0 : _pair$player6.name}: ${stats.games} juegos, ${stats.sets} sets, ${stats.points} puntos totales, ${stats.matches} partidos`);\n        }\n      }\n      console.log(`✅ Recalculación completa: ${processedMatches} partidos procesados`);\n      console.log(\"🔄 === FIN RECÁLCULO COMPLETO ===\");\n      return {\n        success: true,\n        message: `✅ Estadísticas recalculadas correctamente. ${processedMatches} partidos procesados.`\n      };\n    } catch (error) {\n      console.error(\"❌ Error recalculando estadísticas:\", error);\n      return {\n        success: false,\n        message: `Error recalculando estadísticas: ${error}`\n      };\n    }\n  }\n\n  /**\n   * Calcula el ranking de parejas basado en SETS GANADOS como criterio principal\n   */\n  static calculateRanking(pairs) {\n    return [...pairs].sort((a, b) => {\n      // Criterio 1: Sets ganados (descendente) - CRITERIO PRINCIPAL\n      if (b.sets_won !== a.sets_won) {\n        return b.sets_won - a.sets_won;\n      }\n\n      // Criterio 2: Puntos totales (descendente)\n      if (b.points !== a.points) {\n        return b.points - a.points;\n      }\n\n      // Criterio 3: Menos partidos jugados (mejor eficiencia)\n      return a.matches_played - b.matches_played;\n    });\n  }\n}","map":{"version":3,"names":["updatePair","getPairs","getMatches","getGames","SetCalculator","calculateMatchStatistics","match","games","pair1GamesWon","pair2GamesWon","pair1TotalPoints","pair2TotalPoints","console","log","id","length","forEach","game","index","JSON","stringify","is_tie_break","tie_break_pair1_points","tie_break_pair2_points","pair1_games","pair2_games","pair1SetsWon","pair2SetsWon","isTie","updateMatchStatistics","pairs","stats","pair1","find","p","pair1_id","pair2","pair2_id","_pair1$player","_pair1$player2","player1","name","player2","games_won","sets_won","points","matches_played","_pair2$player","_pair2$player2","winnerId","undefined","message","_pair1$player3","_pair1$player4","_pair2$player3","_pair2$player4","winnerName","success","pair1Stats","gamesWon","setsWon","pair2Stats","error","recalculateAllStatistics","tournamentId","pair","_pair$player","_pair$player2","matches","filter","m","is_finished","pairStats","sets","processedMatches","beforeGames","beforeSets","_pair$player3","_pair$player4","_pair$player5","_pair$player6","calculateRanking","sort","a","b"],"sources":["/Users/nedev/padel-tournament-app/src/components/SetCalculator.tsx"],"sourcesContent":["import { Game, Match, Pair } from \"../lib/database\";\nimport { updatePair, getPairs, getMatches, getGames } from \"../lib/database\";\n\nexport interface SetCalculatorResult {\n  success: boolean;\n  message: string;\n  pair1Stats: {\n    gamesWon: number;\n    setsWon: number;\n    points: number;\n  };\n  pair2Stats: {\n    gamesWon: number;\n    setsWon: number;\n    points: number;\n  };\n  winnerId?: string;\n  isTie: boolean;\n}\n\nexport class SetCalculator {\n  /**\n   * Calcula estadísticas detectando sets cuando una pareja llega a 6 puntos\n   */\n  static calculateMatchStatistics(\n    match: Match,\n    games: Game[]\n  ): {\n    pair1GamesWon: number;\n    pair2GamesWon: number;\n    pair1SetsWon: number;\n    pair2SetsWon: number;\n    pair1TotalPoints: number;\n    pair2TotalPoints: number;\n    isTie: boolean;\n  } {\n    let pair1GamesWon = 0;\n    let pair2GamesWon = 0;\n    let pair1TotalPoints = 0;\n    let pair2TotalPoints = 0;\n\n    console.log(\"🎯 === INICIO CÁLCULO DE ESTADÍSTICAS ===\");\n    console.log(\"🎯 Partido ID:\", match.id);\n    console.log(\"🎯 Total de juegos:\", games.length);\n\n    // Contar juegos ganados y verificar sets por cada juego\n    games.forEach((game, index) => {\n      console.log(`📊 === JUEGO ${index + 1} ===`);\n      console.log(\"📊 Datos del juego:\", JSON.stringify(game, null, 2));\n\n      if (game.is_tie_break) {\n        console.log(\"📊 Es un tie-break\");\n        // Para tie-breaks\n        if (\n          game.tie_break_pair1_points >= 10 &&\n          game.tie_break_pair1_points - game.tie_break_pair2_points >= 2\n        ) {\n          pair1GamesWon++;\n          console.log(\n            `✅ Pareja 1 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`\n          );\n        } else if (\n          game.tie_break_pair2_points >= 10 &&\n          game.tie_break_pair2_points - game.tie_break_pair1_points >= 2\n        ) {\n          pair2GamesWon++;\n          console.log(\n            `✅ Pareja 2 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`\n          );\n        } else {\n          // Empate en tie-break - ninguna gana juego (mantener como estaba)\n          console.log(\n            `🤝 Empate en tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points} - ninguna gana juego`\n          );\n        }\n        pair1TotalPoints += game.tie_break_pair1_points;\n        pair2TotalPoints += game.tie_break_pair2_points;\n      } else {\n        console.log(\"📊 Es un juego normal\");\n        console.log(\n          `📊 Puntos Pareja 1: ${game.pair1_games}, Puntos Pareja 2: ${game.pair2_games}`\n        );\n\n        // Para juegos normales\n        if (game.pair1_games > game.pair2_games) {\n          pair1GamesWon++;\n          console.log(\n            `✅ Pareja 1 gana juego: ${game.pair1_games}-${game.pair2_games}`\n          );\n        } else if (game.pair2_games > game.pair1_games) {\n          pair2GamesWon++;\n          console.log(\n            `✅ Pareja 2 gana juego: ${game.pair1_games}-${game.pair2_games}`\n          );\n        } else {\n          // Empate en juego - ninguna gana juego (mantener como estaba)\n          console.log(\n            `🤝 Empate en juego: ${game.pair1_games}-${game.pair2_games} - ninguna gana juego`\n          );\n        }\n        pair1TotalPoints += game.pair1_games;\n        pair2TotalPoints += game.pair2_games;\n      }\n\n      console.log(\n        `📊 Después del juego ${\n          index + 1\n        }: Pareja 1 = ${pair1GamesWon} juegos, Pareja 2 = ${pair2GamesWon} juegos`\n      );\n    });\n\n    console.log(\"🔍 === VERIFICACIÓN DE SETS ===\");\n    console.log(`🔍 Pareja 1 tiene ${pair1GamesWon} juegos ganados`);\n    console.log(`🔍 Pareja 2 tiene ${pair2GamesWon} juegos ganados`);\n\n    // Calcular sets ganados - CRITERIO CORREGIDO:\n    // Un set se gana cuando una pareja llega a 6 puntos en un juego\n    let pair1SetsWon = 0;\n    let pair2SetsWon = 0;\n\n    // Verificar cada juego para ver si alguna pareja llegó a 6 puntos\n    games.forEach((game, index) => {\n      if (!game.is_tie_break) {\n        console.log(`🔍 Verificando juego ${index + 1} para sets:`);\n        console.log(\n          `🔍 Pareja 1: ${game.pair1_games} puntos, Pareja 2: ${game.pair2_games} puntos`\n        );\n\n        // Si una pareja llega a 6 puntos en este juego, gana 1 set\n        if (game.pair1_games >= 6) {\n          pair1SetsWon++;\n          console.log(\n            `🏆 Pareja 1 gana 1 SET en juego ${index + 1} con ${\n              game.pair1_games\n            } puntos`\n          );\n        }\n\n        if (game.pair2_games >= 6) {\n          pair2SetsWon++;\n          console.log(\n            `🏆 Pareja 2 gana 1 SET en juego ${index + 1} con ${\n              game.pair2_games\n            } puntos`\n          );\n        }\n      }\n    });\n\n    console.log(\n      `📊 Sets finales: Pareja 1 = ${pair1SetsWon}, Pareja 2 = ${pair2SetsWon}`\n    );\n\n    // Determinar si es empate - CORREGIDO\n    // Es empate solo si tienen exactamente los mismos juegos Y los mismos sets\n    const isTie =\n      pair1GamesWon === pair2GamesWon && pair1SetsWon === pair2SetsWon;\n\n    console.log(\"🔍 === VERIFICACIÓN DE EMPATE ===\");\n    console.log(\n      `🔍 Juegos: ${pair1GamesWon} vs ${pair2GamesWon} (iguales: ${\n        pair1GamesWon === pair2GamesWon\n      })`\n    );\n    console.log(\n      `🔍 Sets: ${pair1SetsWon} vs ${pair2SetsWon} (iguales: ${\n        pair1SetsWon === pair2SetsWon\n      })`\n    );\n    console.log(`🔍 Es empate: ${isTie}`);\n\n    console.log(\"📊 === RESULTADO FINAL ===\");\n    console.log(`📊 Juegos: ${pair1GamesWon}-${pair2GamesWon}`);\n    console.log(`📊 Sets: ${pair1SetsWon}-${pair2SetsWon}`);\n    console.log(`📊 Puntos totales: ${pair1TotalPoints}-${pair2TotalPoints}`);\n    console.log(`📊 Es empate: ${isTie}`);\n    console.log(\"🎯 === FIN CÁLCULO DE ESTADÍSTICAS ===\");\n\n    return {\n      pair1GamesWon,\n      pair2GamesWon,\n      pair1SetsWon,\n      pair2SetsWon,\n      pair1TotalPoints,\n      pair2TotalPoints,\n      isTie,\n    };\n  }\n\n  /**\n   * Actualiza estadísticas de un partido específico\n   */\n  static async updateMatchStatistics(\n    match: Match,\n    games: Game[],\n    pairs: Pair[]\n  ): Promise<SetCalculatorResult> {\n    try {\n      console.log(\"🔄 === INICIO ACTUALIZACIÓN DE ESTADÍSTICAS ===\");\n\n      const stats = this.calculateMatchStatistics(match, games);\n      const pair1 = pairs.find((p) => p.id === match.pair1_id);\n      const pair2 = pairs.find((p) => p.id === match.pair2_id);\n\n      console.log(\"📊 Actualizando estadísticas del partido:\", {\n        pair1GamesWon: stats.pair1GamesWon,\n        pair2GamesWon: stats.pair2GamesWon,\n        pair1SetsWon: stats.pair1SetsWon,\n        pair2SetsWon: stats.pair2SetsWon,\n        isTie: stats.isTie,\n      });\n\n      // ACTUALIZAR ESTADÍSTICAS EN LA BASE DE DATOS INMEDIATAMENTE\n      if (pair1) {\n        console.log(\n          `📊 Actualizando Pareja 1: ${pair1.player1?.name} y ${pair1.player2?.name}`\n        );\n        console.log(\n          `📊 Estadísticas actuales: ${pair1.games_won} juegos, ${pair1.sets_won} sets, ${pair1.points} puntos`\n        );\n        console.log(\n          `📊 Agregando: ${stats.pair1GamesWon} juegos, ${stats.pair1SetsWon} sets, ${stats.pair1TotalPoints} puntos`\n        );\n\n        await updatePair(pair1.id, {\n          games_won: pair1.games_won + stats.pair1GamesWon,\n          sets_won: pair1.sets_won + stats.pair1SetsWon,\n          points: pair1.points + stats.pair1TotalPoints,\n          matches_played: pair1.matches_played + 1,\n        });\n        console.log(\n          `✅ Pareja 1 actualizada: ${stats.pair1GamesWon} juegos, ${stats.pair1SetsWon} sets`\n        );\n      }\n\n      if (pair2) {\n        console.log(\n          `📊 Actualizando Pareja 2: ${pair2.player1?.name} y ${pair2.player2?.name}`\n        );\n        console.log(\n          `📊 Estadísticas actuales: ${pair2.games_won} juegos, ${pair2.sets_won} sets, ${pair2.points} puntos`\n        );\n        console.log(\n          `📊 Agregando: ${stats.pair2GamesWon} juegos, ${stats.pair2SetsWon} sets, ${stats.pair2TotalPoints} puntos`\n        );\n\n        await updatePair(pair2.id, {\n          games_won: pair2.games_won + stats.pair2GamesWon,\n          sets_won: pair2.sets_won + stats.pair2SetsWon,\n          points: pair2.points + stats.pair2TotalPoints,\n          matches_played: pair2.matches_played + 1,\n        });\n        console.log(\n          `✅ Pareja 2 actualizada: ${stats.pair2GamesWon} juegos, ${stats.pair2SetsWon} sets`\n        );\n      }\n\n      // Determinar ganador basado en SETS GANADOS (criterio principal) - CORREGIDO\n      let winnerId: string | undefined;\n\n      console.log(\"🏆 === DETERMINACIÓN DEL GANADOR ===\");\n      console.log(\n        `🏆 Sets: Pareja 1 = ${stats.pair1SetsWon}, Pareja 2 = ${stats.pair2SetsWon}`\n      );\n      console.log(\n        `🏆 Juegos: Pareja 1 = ${stats.pair1GamesWon}, Pareja 2 = ${stats.pair2GamesWon}`\n      );\n      console.log(`🏆 Es empate: ${stats.isTie}`);\n\n      if (stats.isTie) {\n        // Es un empate\n        winnerId = undefined;\n        console.log(\"🤝 Partido terminó en EMPATE\");\n      } else if (stats.pair1SetsWon > stats.pair2SetsWon) {\n        winnerId = match.pair1_id;\n        console.log(\"🏆 Pareja 1 gana por sets\");\n      } else if (stats.pair2SetsWon > stats.pair1SetsWon) {\n        winnerId = match.pair2_id;\n        console.log(\"🏆 Pareja 2 gana por sets\");\n      } else if (stats.pair1SetsWon === stats.pair2SetsWon) {\n        // Empate en sets - verificar por juegos\n        if (stats.pair1GamesWon > stats.pair2GamesWon) {\n          winnerId = match.pair1_id;\n          console.log(\"🏆 Pareja 1 gana por juegos\");\n        } else if (stats.pair2GamesWon > stats.pair1GamesWon) {\n          winnerId = match.pair2_id;\n          console.log(\"🏆 Pareja 2 gana por juegos\");\n        } else {\n          // Empate total\n          winnerId = undefined;\n          console.log(\"🤝 Empate total\");\n        }\n      } else {\n        // Caso inesperado\n        winnerId = undefined;\n        console.log(\"❌ Caso inesperado en determinación del ganador\");\n      }\n\n      let message: string;\n      if (stats.isTie) {\n        message = `✅ Partido finalizado.\\n\\n🤝 EMPATE (${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets)`;\n      } else if (winnerId) {\n        const winnerName =\n          winnerId === match.pair1_id\n            ? `${pair1?.player1?.name} y ${pair1?.player2?.name}`\n            : `${pair2?.player1?.name} y ${pair2?.player2?.name}`;\n        message = `✅ Partido finalizado.\\n\\n🏆 Ganador: ${winnerName} (${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets)`;\n      } else {\n        message = `✅ Partido finalizado.\\n\\n🤝 Empate (${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets)`;\n      }\n\n      console.log(\"🔄 === FIN ACTUALIZACIÓN DE ESTADÍSTICAS ===\");\n\n      return {\n        success: true,\n        message,\n        pair1Stats: {\n          gamesWon: stats.pair1GamesWon,\n          setsWon: stats.pair1SetsWon,\n          points: stats.pair1TotalPoints,\n        },\n        pair2Stats: {\n          gamesWon: stats.pair2GamesWon,\n          setsWon: stats.pair2SetsWon,\n          points: stats.pair2TotalPoints,\n        },\n        winnerId,\n        isTie: stats.isTie,\n      };\n    } catch (error) {\n      console.error(\"❌ Error actualizando estadísticas:\", error);\n      return {\n        success: false,\n        message: `Error actualizando estadísticas: ${error}`,\n        pair1Stats: { gamesWon: 0, setsWon: 0, points: 0 },\n        pair2Stats: { gamesWon: 0, setsWon: 0, points: 0 },\n        isTie: false,\n      };\n    }\n  }\n\n  /**\n   * Recalcula TODAS las estadísticas desde cero para un torneo\n   */\n  static async recalculateAllStatistics(tournamentId: string): Promise<{\n    success: boolean;\n    message: string;\n  }> {\n    try {\n      console.log(\"🔄 === INICIO RECÁLCULO COMPLETO ===\");\n      console.log(\"🔄 Recalculando TODAS las estadísticas desde cero...\");\n\n      // Obtener todas las parejas del torneo\n      const pairs = await getPairs(tournamentId);\n      console.log(`📊 Total de parejas: ${pairs.length}`);\n\n      // Resetear TODAS las estadísticas a 0\n      console.log(\"📊 Reseteando estadísticas de todas las parejas...\");\n      for (const pair of pairs) {\n        await updatePair(pair.id, {\n          games_won: 0,\n          sets_won: 0,\n          points: 0,\n          matches_played: 0,\n        });\n        console.log(\n          `✅ Pareja ${pair.player1?.name} y ${pair.player2?.name} reseteada`\n        );\n      }\n\n      console.log(\"✅ Todas las estadísticas reseteadas a 0\");\n\n      // Obtener todos los partidos del torneo\n      const matches = await getMatches(tournamentId);\n      console.log(`📋 Total de partidos: ${matches.length}`);\n      console.log(\n        `📋 Partidos finalizados: ${\n          matches.filter((m) => m.is_finished).length\n        }`\n      );\n\n      // Contadores acumulados para cada pareja\n      const pairStats: {\n        [pairId: string]: {\n          games: number;\n          sets: number;\n          points: number;\n          matches: number;\n        };\n      } = {};\n\n      // Inicializar contadores\n      pairs.forEach((pair) => {\n        pairStats[pair.id] = { games: 0, sets: 0, points: 0, matches: 0 };\n      });\n\n      // Recalcular estadísticas para cada partido finalizado\n      let processedMatches = 0;\n      for (const match of matches) {\n        if (match.is_finished) {\n          console.log(`🎯 === PROCESANDO PARTIDO ${match.id} ===`);\n          const games = await getGames(match.id);\n          console.log(`📊 Partido tiene ${games.length} juegos`);\n\n          const stats = this.calculateMatchStatistics(match, games);\n          console.log(\n            `📈 Estadísticas calculadas: ${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets`\n          );\n\n          // Acumular estadísticas para pareja 1\n          if (pairStats[match.pair1_id]) {\n            const beforeGames = pairStats[match.pair1_id].games;\n            const beforeSets = pairStats[match.pair1_id].sets;\n\n            pairStats[match.pair1_id].games += stats.pair1GamesWon;\n            pairStats[match.pair1_id].sets += stats.pair1SetsWon;\n            pairStats[match.pair1_id].points += stats.pair1TotalPoints;\n            pairStats[match.pair1_id].matches += 1;\n\n            console.log(\n              `📊 Pareja 1 acumulado: ${beforeGames}→${\n                pairStats[match.pair1_id].games\n              } juegos, ${beforeSets}→${pairStats[match.pair1_id].sets} sets`\n            );\n          }\n\n          // Acumular estadísticas para pareja 2\n          if (pairStats[match.pair2_id]) {\n            const beforeGames = pairStats[match.pair2_id].games;\n            const beforeSets = pairStats[match.pair2_id].sets;\n\n            pairStats[match.pair2_id].games += stats.pair2GamesWon;\n            pairStats[match.pair2_id].sets += stats.pair2SetsWon;\n            pairStats[match.pair2_id].points += stats.pair2TotalPoints;\n            pairStats[match.pair2_id].matches += 1;\n\n            console.log(\n              `📊 Pareja 2 acumulado: ${beforeGames}→${\n                pairStats[match.pair2_id].games\n              } juegos, ${beforeSets}→${pairStats[match.pair2_id].sets} sets`\n            );\n          }\n\n          console.log(\n            `✅ Partido ${match.id} procesado: ${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets, Empate: ${stats.isTie}`\n          );\n          processedMatches++;\n        }\n      }\n\n      // Actualizar todas las parejas con las estadísticas finales\n      console.log(\"📊 === ACTUALIZANDO ESTADÍSTICAS FINALES ===\");\n      for (const pair of pairs) {\n        const stats = pairStats[pair.id];\n        if (stats) {\n          console.log(\n            `📊 Actualizando ${pair.player1?.name} y ${pair.player2?.name}:`\n          );\n          console.log(\n            `📊 Juegos: ${stats.games}, Sets: ${stats.sets}, Puntos: ${stats.points}, Partidos: ${stats.matches}`\n          );\n\n          await updatePair(pair.id, {\n            games_won: stats.games,\n            sets_won: stats.sets,\n            points: stats.points,\n            matches_played: stats.matches,\n          });\n          console.log(\n            `✅ ${pair.player1?.name} y ${pair.player2?.name}: ${stats.games} juegos, ${stats.sets} sets, ${stats.points} puntos totales, ${stats.matches} partidos`\n          );\n        }\n      }\n\n      console.log(\n        `✅ Recalculación completa: ${processedMatches} partidos procesados`\n      );\n      console.log(\"🔄 === FIN RECÁLCULO COMPLETO ===\");\n      return {\n        success: true,\n        message: `✅ Estadísticas recalculadas correctamente. ${processedMatches} partidos procesados.`,\n      };\n    } catch (error) {\n      console.error(\"❌ Error recalculando estadísticas:\", error);\n      return {\n        success: false,\n        message: `Error recalculando estadísticas: ${error}`,\n      };\n    }\n  }\n\n  /**\n   * Calcula el ranking de parejas basado en SETS GANADOS como criterio principal\n   */\n  static calculateRanking(pairs: Pair[]): Pair[] {\n    return [...pairs].sort((a, b) => {\n      // Criterio 1: Sets ganados (descendente) - CRITERIO PRINCIPAL\n      if (b.sets_won !== a.sets_won) {\n        return b.sets_won - a.sets_won;\n      }\n\n      // Criterio 2: Puntos totales (descendente)\n      if (b.points !== a.points) {\n        return b.points - a.points;\n      }\n\n      // Criterio 3: Menos partidos jugados (mejor eficiencia)\n      return a.matches_played - b.matches_played;\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}