{"ast":null,"code":"import{updatePair,getPairs,getMatches,getGames}from\"../lib/database\";export class MatchResultCalculator{/**\n   * Calcula estadísticas de un partido\n   */static calculateMatchStatistics(match,games){console.log(\"🎯 === CÁLCULO DE ESTADÍSTICAS ===\");console.log(\"🎯 Partido ID:\",match.id);console.log(\"🎯 Total de juegos:\",games.length);let pair1GamesWon=0;let pair2GamesWon=0;let pair1TotalPoints=0;let pair2TotalPoints=0;let pair1SetsWon=0;let pair2SetsWon=0;// Procesar cada juego\ngames.forEach((game,index)=>{console.log(`📊 === JUEGO ${index+1} ===`);console.log(\"📊 Datos del juego:\",JSON.stringify(game,null,2));if(game.is_tie_break){console.log(\"📊 Es un tie-break\");// Para tie-breaks\nif(game.tie_break_pair1_points>game.tie_break_pair2_points){pair1GamesWon++;console.log(`✅ Pareja 1 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`);}else if(game.tie_break_pair2_points>game.tie_break_pair1_points){pair2GamesWon++;console.log(`✅ Pareja 2 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`);}else{console.log(`🤝 Empate en tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`);}pair1TotalPoints+=game.tie_break_pair1_points;pair2TotalPoints+=game.tie_break_pair2_points;}else{console.log(\"📊 Es un juego normal\");console.log(`📊 Puntos Pareja 1: ${game.pair1_games}, Puntos Pareja 2: ${game.pair2_games}`);// Para juegos normales\nif(game.pair1_games>game.pair2_games){pair1GamesWon++;console.log(`✅ Pareja 1 gana juego: ${game.pair1_games}-${game.pair2_games}`);}else if(game.pair2_games>game.pair1_games){pair2GamesWon++;console.log(`✅ Pareja 2 gana juego: ${game.pair1_games}-${game.pair2_games}`);}else{console.log(`🤝 Empate en juego: ${game.pair1_games}-${game.pair2_games}`);}pair1TotalPoints+=game.pair1_games;pair2TotalPoints+=game.pair2_games;}// Verificar si alguna pareja llegó a 6 puntos en este juego (gana 1 set)\nif(!game.is_tie_break){// La pareja que llegue a 6 puntos gana 1 set (sin importar el marcador del oponente)\nif(game.pair1_games>=6){pair1SetsWon++;console.log(`🏆 Pareja 1 gana 1 SET en juego ${index+1} con ${game.pair1_games} puntos`);}if(game.pair2_games>=6){pair2SetsWon++;console.log(`🏆 Pareja 2 gana 1 SET en juego ${index+1} con ${game.pair2_games} puntos`);}}console.log(`📊 Después del juego ${index+1}: Pareja 1 = ${pair1GamesWon} juegos, Pareja 2 = ${pair2GamesWon} juegos`);});console.log(\"🔍 === RESULTADO FINAL ===\");console.log(`🔍 Juegos: Pareja 1 = ${pair1GamesWon}, Pareja 2 = ${pair2GamesWon}`);console.log(`🔍 Sets: Pareja 1 = ${pair1SetsWon}, Pareja 2 = ${pair2SetsWon}`);console.log(`🔍 Puntos totales: Pareja 1 = ${pair1TotalPoints}, Pareja 2 = ${pair2TotalPoints}`);// Determinar si es empate (cuando los puntos totales son iguales)\nconst isTie=pair1TotalPoints===pair2TotalPoints;console.log(`🔍 Es empate: ${isTie} (${pair1TotalPoints}-${pair2TotalPoints} puntos totales)`);console.log(\"🎯 === FIN CÁLCULO ===\");return{pair1GamesWon,pair2GamesWon,pair1SetsWon,pair2SetsWon,pair1TotalPoints,pair2TotalPoints,isTie};}/**\n   * Actualiza estadísticas de un partido específico\n   */static async updateMatchStatistics(match,games,pairs){let shouldAccumulate=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;try{console.log(\"🔄 === INICIO ACTUALIZACIÓN ===\");const stats=this.calculateMatchStatistics(match,games);const pair1=pairs.find(p=>p.id===match.pair1_id);const pair2=pairs.find(p=>p.id===match.pair2_id);console.log(\"📊 Actualizando estadísticas del partido:\",{pair1GamesWon:stats.pair1GamesWon,pair2GamesWon:stats.pair2GamesWon,pair1SetsWon:stats.pair1SetsWon,pair2SetsWon:stats.pair2SetsWon,isTie:stats.isTie});// ACTUALIZAR ESTADÍSTICAS EN LA BASE DE DATOS\nif(pair1){var _pair1$player,_pair1$player2;console.log(`📊 Actualizando Pareja 1: ${(_pair1$player=pair1.player1)===null||_pair1$player===void 0?void 0:_pair1$player.name} y ${(_pair1$player2=pair1.player2)===null||_pair1$player2===void 0?void 0:_pair1$player2.name}`);console.log(`📊 Estadísticas actuales: ${pair1.games_won} juegos, ${pair1.sets_won} sets, ${pair1.points} puntos, ${pair1.matches_played} partidos`);console.log(`📊 Estadísticas del partido: ${stats.pair1GamesWon} juegos, ${stats.pair1SetsWon} sets, ${stats.pair1TotalPoints} puntos`);console.log(`📊 Modo: ${shouldAccumulate?\"Acumular\":\"Solo recalcular\"}`);if(shouldAccumulate){// ACUMULAR estadísticas (solo al finalizar partido)\nawait updatePair(pair1.id,{games_won:pair1.games_won+stats.pair1GamesWon,sets_won:pair1.sets_won+stats.pair1SetsWon,points:pair1.points+stats.pair1TotalPoints,matches_played:pair1.matches_played+1});console.log(`✅ Pareja 1 actualizada (ACUMULADO): ${pair1.games_won+stats.pair1GamesWon} juegos, ${pair1.sets_won+stats.pair1SetsWon} sets, ${pair1.points+stats.pair1TotalPoints} puntos, ${pair1.matches_played+1} partidos`);}else{// SOLO RECALCULAR estadísticas (al corregir juegos)\nconsole.log(`✅ Pareja 1: Solo recálculo de estadísticas (sin acumular)`);}}if(pair2){var _pair2$player,_pair2$player2;console.log(`📊 Actualizando Pareja 2: ${(_pair2$player=pair2.player1)===null||_pair2$player===void 0?void 0:_pair2$player.name} y ${(_pair2$player2=pair2.player2)===null||_pair2$player2===void 0?void 0:_pair2$player2.name}`);console.log(`📊 Estadísticas actuales: ${pair2.games_won} juegos, ${pair2.sets_won} sets, ${pair2.points} puntos, ${pair2.matches_played} partidos`);console.log(`📊 Estadísticas del partido: ${stats.pair2GamesWon} juegos, ${stats.pair2SetsWon} sets, ${stats.pair2TotalPoints} puntos`);console.log(`📊 Modo: ${shouldAccumulate?\"Acumular\":\"Solo recalcular\"}`);if(shouldAccumulate){// ACUMULAR estadísticas (solo al finalizar partido)\nawait updatePair(pair2.id,{games_won:pair2.games_won+stats.pair2GamesWon,sets_won:pair2.sets_won+stats.pair2SetsWon,points:pair2.points+stats.pair2TotalPoints,matches_played:pair2.matches_played+1});console.log(`✅ Pareja 2 actualizada (ACUMULADO): ${pair2.games_won+stats.pair2GamesWon} juegos, ${pair2.sets_won+stats.pair2SetsWon} sets, ${pair2.points+stats.pair2TotalPoints} puntos, ${pair2.matches_played+1} partidos`);}else{// SOLO RECALCULAR estadísticas (al corregir juegos)\nconsole.log(`✅ Pareja 2: Solo recálculo de estadísticas (sin acumular)`);}}// Determinar ganador\nlet winnerId;console.log(\"🏆 === DETERMINACIÓN DEL GANADOR ===\");console.log(`🏆 Sets: Pareja 1 = ${stats.pair1SetsWon}, Pareja 2 = ${stats.pair2SetsWon}`);console.log(`🏆 Juegos: Pareja 1 = ${stats.pair1GamesWon}, Pareja 2 = ${stats.pair2GamesWon}`);console.log(`🏆 Es empate: ${stats.isTie}`);if(stats.isTie){// Es un empate por puntos totales\nwinnerId=undefined;console.log(\"🤝 Partido terminó en EMPATE por puntos totales\");}else if(stats.pair1TotalPoints>stats.pair2TotalPoints){// Pareja 1 tiene más puntos totales\nwinnerId=match.pair1_id;console.log(\"🏆 Pareja 1 gana por puntos totales\");}else if(stats.pair2TotalPoints>stats.pair1TotalPoints){// Pareja 2 tiene más puntos totales\nwinnerId=match.pair2_id;console.log(\"🏆 Pareja 2 gana por puntos totales\");}else{// Caso inesperado\nwinnerId=undefined;console.log(\"❌ Caso inesperado en determinación del ganador\");}let message;if(stats.isTie){message=`✅ Partido finalizado.\\n\\n🤝 EMPATE (${stats.pair1TotalPoints}-${stats.pair2TotalPoints} puntos totales)`;}else if(winnerId){var _pair1$player3,_pair1$player4,_pair2$player3,_pair2$player4;const winnerName=winnerId===match.pair1_id?`${pair1===null||pair1===void 0?void 0:(_pair1$player3=pair1.player1)===null||_pair1$player3===void 0?void 0:_pair1$player3.name} y ${pair1===null||pair1===void 0?void 0:(_pair1$player4=pair1.player2)===null||_pair1$player4===void 0?void 0:_pair1$player4.name}`:`${pair2===null||pair2===void 0?void 0:(_pair2$player3=pair2.player1)===null||_pair2$player3===void 0?void 0:_pair2$player3.name} y ${pair2===null||pair2===void 0?void 0:(_pair2$player4=pair2.player2)===null||_pair2$player4===void 0?void 0:_pair2$player4.name}`;message=`✅ Partido finalizado.\\n\\n🏆 Ganador: ${winnerName} (${stats.pair1TotalPoints}-${stats.pair2TotalPoints} puntos totales)`;}else{message=`✅ Partido finalizado.\\n\\n🤝 Empate (${stats.pair1TotalPoints}-${stats.pair2TotalPoints} puntos totales)`;}console.log(\"🔄 === FIN ACTUALIZACIÓN ===\");return{success:true,message,pair1Stats:{gamesWon:stats.pair1GamesWon,setsWon:stats.pair1SetsWon,points:stats.pair1TotalPoints},pair2Stats:{gamesWon:stats.pair2GamesWon,setsWon:stats.pair2SetsWon,points:stats.pair2TotalPoints},winnerId,isTie:stats.isTie};}catch(error){console.error(\"❌ Error en updateMatchStatistics:\",error);return{success:false,message:\"Error al actualizar estadísticas del partido\",pair1Stats:{gamesWon:0,setsWon:0,points:0},pair2Stats:{gamesWon:0,setsWon:0,points:0},isTie:false};}}/**\n   * Recalcula todas las estadísticas del torneo\n   */static async recalculateAllStatistics(tournamentId){try{console.log(\"🔄 === INICIO RECÁLCULO ===\");// Obtener todos los datos del torneo\nconst pairs=await getPairs(tournamentId);const matches=await getMatches(tournamentId);// Resetear todas las estadísticas de las parejas\nconsole.log(\"🔄 Reseteando estadísticas de todas las parejas...\");for(const pair of pairs){await updatePair(pair.id,{games_won:0,sets_won:0,points:0,matches_played:0});}// Crear un mapa para acumular estadísticas de cada pareja\nconst pairStats=new Map();// Inicializar estadísticas para todas las parejas\nfor(const pair of pairs){pairStats.set(pair.id,{gamesWon:0,setsWon:0,points:0,matchesPlayed:0});}// Procesar cada partido finalizado y acumular estadísticas\nlet processedMatches=0;for(const match of matches){if(match.is_finished){console.log(`🔄 Procesando partido: ${match.id}`);const games=await getGames(match.id);if(games.length>0){const stats=this.calculateMatchStatistics(match,games);// Acumular estadísticas para pareja 1\nconst pair1Stats=pairStats.get(match.pair1_id);pair1Stats.gamesWon+=stats.pair1GamesWon;pair1Stats.setsWon+=stats.pair1SetsWon;pair1Stats.points+=stats.pair1TotalPoints;pair1Stats.matchesPlayed+=1;// Acumular estadísticas para pareja 2\nconst pair2Stats=pairStats.get(match.pair2_id);pair2Stats.gamesWon+=stats.pair2GamesWon;pair2Stats.setsWon+=stats.pair2SetsWon;pair2Stats.points+=stats.pair2TotalPoints;pair2Stats.matchesPlayed+=1;processedMatches++;}}}// Actualizar todas las parejas con sus estadísticas acumuladas\nconsole.log(\"🔄 Actualizando estadísticas acumuladas...\");for(const pair of pairs){const stats=pairStats.get(pair.id);if(stats){await updatePair(pair.id,{games_won:stats.gamesWon,sets_won:stats.setsWon,points:stats.points,matches_played:stats.matchesPlayed});console.log(`📊 Pareja ${pair.id}: ${stats.points} puntos, ${stats.setsWon} sets, ${stats.gamesWon} juegos`);}}console.log(`✅ Estadísticas recalculadas para ${processedMatches} partidos`);console.log(\"🔄 === FIN RECÁLCULO ===\");return{success:true,message:`✅ Estadísticas recalculadas exitosamente para ${processedMatches} partidos`};}catch(error){console.error(\"❌ Error en recalculateAllStatistics:\",error);return{success:false,message:\"Error al recalcular estadísticas del torneo\"};}}/**\n   * Calcula el ranking de las parejas\n   */static calculateRanking(pairs){return[...pairs].sort((a,b)=>{// Criterio 1: Puntos totales (descendente) - CRITERIO PRINCIPAL\nif(a.points!==b.points){return b.points-a.points;}// Criterio 2: Sets ganados (descendente) - CRITERIO DE DESEMPATE\nif(a.sets_won!==b.sets_won){return b.sets_won-a.sets_won;}// Criterio 3: Juegos ganados (descendente)\nif(a.games_won!==b.games_won){return b.games_won-a.games_won;}// Criterio 4: Menos partidos jugados (mejor eficiencia)\nreturn a.matches_played-b.matches_played;});}}","map":{"version":3,"names":["updatePair","getPairs","getMatches","getGames","MatchResultCalculator","calculateMatchStatistics","match","games","console","log","id","length","pair1GamesWon","pair2GamesWon","pair1TotalPoints","pair2TotalPoints","pair1SetsWon","pair2SetsWon","forEach","game","index","JSON","stringify","is_tie_break","tie_break_pair1_points","tie_break_pair2_points","pair1_games","pair2_games","isTie","updateMatchStatistics","pairs","shouldAccumulate","arguments","undefined","stats","pair1","find","p","pair1_id","pair2","pair2_id","_pair1$player","_pair1$player2","player1","name","player2","games_won","sets_won","points","matches_played","_pair2$player","_pair2$player2","winnerId","message","_pair1$player3","_pair1$player4","_pair2$player3","_pair2$player4","winnerName","success","pair1Stats","gamesWon","setsWon","pair2Stats","error","recalculateAllStatistics","tournamentId","matches","pair","pairStats","Map","set","matchesPlayed","processedMatches","is_finished","get","calculateRanking","sort","a","b"],"sources":["/Users/nedev/padel-tournament-app/src/components/MatchResultCalculator.tsx"],"sourcesContent":["import { Game, Match, Pair } from \"../lib/database\";\nimport { updatePair, getPairs, getMatches, getGames } from \"../lib/database\";\n\nexport interface MatchResult {\n  success: boolean;\n  message: string;\n  pair1Stats: {\n    gamesWon: number;\n    setsWon: number;\n    points: number;\n  };\n  pair2Stats: {\n    gamesWon: number;\n    setsWon: number;\n    points: number;\n  };\n  winnerId?: string;\n  isTie: boolean;\n}\n\nexport class MatchResultCalculator {\n  /**\n   * Calcula estadísticas de un partido\n   */\n  static calculateMatchStatistics(\n    match: Match,\n    games: Game[]\n  ): {\n    pair1GamesWon: number;\n    pair2GamesWon: number;\n    pair1SetsWon: number;\n    pair2SetsWon: number;\n    pair1TotalPoints: number;\n    pair2TotalPoints: number;\n    isTie: boolean;\n  } {\n    console.log(\"🎯 === CÁLCULO DE ESTADÍSTICAS ===\");\n    console.log(\"🎯 Partido ID:\", match.id);\n    console.log(\"🎯 Total de juegos:\", games.length);\n\n    let pair1GamesWon = 0;\n    let pair2GamesWon = 0;\n    let pair1TotalPoints = 0;\n    let pair2TotalPoints = 0;\n    let pair1SetsWon = 0;\n    let pair2SetsWon = 0;\n\n    // Procesar cada juego\n    games.forEach((game, index) => {\n      console.log(`📊 === JUEGO ${index + 1} ===`);\n      console.log(\"📊 Datos del juego:\", JSON.stringify(game, null, 2));\n\n      if (game.is_tie_break) {\n        console.log(\"📊 Es un tie-break\");\n        // Para tie-breaks\n        if (game.tie_break_pair1_points > game.tie_break_pair2_points) {\n          pair1GamesWon++;\n          console.log(\n            `✅ Pareja 1 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`\n          );\n        } else if (game.tie_break_pair2_points > game.tie_break_pair1_points) {\n          pair2GamesWon++;\n          console.log(\n            `✅ Pareja 2 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`\n          );\n        } else {\n          console.log(\n            `🤝 Empate en tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`\n          );\n        }\n        pair1TotalPoints += game.tie_break_pair1_points;\n        pair2TotalPoints += game.tie_break_pair2_points;\n      } else {\n        console.log(\"📊 Es un juego normal\");\n        console.log(\n          `📊 Puntos Pareja 1: ${game.pair1_games}, Puntos Pareja 2: ${game.pair2_games}`\n        );\n\n        // Para juegos normales\n        if (game.pair1_games > game.pair2_games) {\n          pair1GamesWon++;\n          console.log(\n            `✅ Pareja 1 gana juego: ${game.pair1_games}-${game.pair2_games}`\n          );\n        } else if (game.pair2_games > game.pair1_games) {\n          pair2GamesWon++;\n          console.log(\n            `✅ Pareja 2 gana juego: ${game.pair1_games}-${game.pair2_games}`\n          );\n        } else {\n          console.log(\n            `🤝 Empate en juego: ${game.pair1_games}-${game.pair2_games}`\n          );\n        }\n        pair1TotalPoints += game.pair1_games;\n        pair2TotalPoints += game.pair2_games;\n      }\n\n      // Verificar si alguna pareja llegó a 6 puntos en este juego (gana 1 set)\n      if (!game.is_tie_break) {\n        // La pareja que llegue a 6 puntos gana 1 set (sin importar el marcador del oponente)\n        if (game.pair1_games >= 6) {\n          pair1SetsWon++;\n          console.log(\n            `🏆 Pareja 1 gana 1 SET en juego ${index + 1} con ${\n              game.pair1_games\n            } puntos`\n          );\n        }\n        if (game.pair2_games >= 6) {\n          pair2SetsWon++;\n          console.log(\n            `🏆 Pareja 2 gana 1 SET en juego ${index + 1} con ${\n              game.pair2_games\n            } puntos`\n          );\n        }\n      }\n\n      console.log(\n        `📊 Después del juego ${\n          index + 1\n        }: Pareja 1 = ${pair1GamesWon} juegos, Pareja 2 = ${pair2GamesWon} juegos`\n      );\n    });\n\n    console.log(\"🔍 === RESULTADO FINAL ===\");\n    console.log(\n      `🔍 Juegos: Pareja 1 = ${pair1GamesWon}, Pareja 2 = ${pair2GamesWon}`\n    );\n    console.log(\n      `🔍 Sets: Pareja 1 = ${pair1SetsWon}, Pareja 2 = ${pair2SetsWon}`\n    );\n    console.log(\n      `🔍 Puntos totales: Pareja 1 = ${pair1TotalPoints}, Pareja 2 = ${pair2TotalPoints}`\n    );\n\n    // Determinar si es empate (cuando los puntos totales son iguales)\n    const isTie = pair1TotalPoints === pair2TotalPoints;\n    console.log(\n      `🔍 Es empate: ${isTie} (${pair1TotalPoints}-${pair2TotalPoints} puntos totales)`\n    );\n\n    console.log(\"🎯 === FIN CÁLCULO ===\");\n\n    return {\n      pair1GamesWon,\n      pair2GamesWon,\n      pair1SetsWon,\n      pair2SetsWon,\n      pair1TotalPoints,\n      pair2TotalPoints,\n      isTie,\n    };\n  }\n\n  /**\n   * Actualiza estadísticas de un partido específico\n   */\n  static async updateMatchStatistics(\n    match: Match,\n    games: Game[],\n    pairs: Pair[],\n    shouldAccumulate: boolean = true\n  ): Promise<MatchResult> {\n    try {\n      console.log(\"🔄 === INICIO ACTUALIZACIÓN ===\");\n\n      const stats = this.calculateMatchStatistics(match, games);\n      const pair1 = pairs.find((p) => p.id === match.pair1_id);\n      const pair2 = pairs.find((p) => p.id === match.pair2_id);\n\n      console.log(\"📊 Actualizando estadísticas del partido:\", {\n        pair1GamesWon: stats.pair1GamesWon,\n        pair2GamesWon: stats.pair2GamesWon,\n        pair1SetsWon: stats.pair1SetsWon,\n        pair2SetsWon: stats.pair2SetsWon,\n        isTie: stats.isTie,\n      });\n\n      // ACTUALIZAR ESTADÍSTICAS EN LA BASE DE DATOS\n      if (pair1) {\n        console.log(\n          `📊 Actualizando Pareja 1: ${pair1.player1?.name} y ${pair1.player2?.name}`\n        );\n        console.log(\n          `📊 Estadísticas actuales: ${pair1.games_won} juegos, ${pair1.sets_won} sets, ${pair1.points} puntos, ${pair1.matches_played} partidos`\n        );\n        console.log(\n          `📊 Estadísticas del partido: ${stats.pair1GamesWon} juegos, ${stats.pair1SetsWon} sets, ${stats.pair1TotalPoints} puntos`\n        );\n        console.log(\n          `📊 Modo: ${shouldAccumulate ? \"Acumular\" : \"Solo recalcular\"}`\n        );\n\n        if (shouldAccumulate) {\n          // ACUMULAR estadísticas (solo al finalizar partido)\n          await updatePair(pair1.id, {\n            games_won: pair1.games_won + stats.pair1GamesWon,\n            sets_won: pair1.sets_won + stats.pair1SetsWon,\n            points: pair1.points + stats.pair1TotalPoints,\n            matches_played: pair1.matches_played + 1,\n          });\n\n          console.log(\n            `✅ Pareja 1 actualizada (ACUMULADO): ${\n              pair1.games_won + stats.pair1GamesWon\n            } juegos, ${pair1.sets_won + stats.pair1SetsWon} sets, ${\n              pair1.points + stats.pair1TotalPoints\n            } puntos, ${pair1.matches_played + 1} partidos`\n          );\n        } else {\n          // SOLO RECALCULAR estadísticas (al corregir juegos)\n          console.log(\n            `✅ Pareja 1: Solo recálculo de estadísticas (sin acumular)`\n          );\n        }\n      }\n\n      if (pair2) {\n        console.log(\n          `📊 Actualizando Pareja 2: ${pair2.player1?.name} y ${pair2.player2?.name}`\n        );\n        console.log(\n          `📊 Estadísticas actuales: ${pair2.games_won} juegos, ${pair2.sets_won} sets, ${pair2.points} puntos, ${pair2.matches_played} partidos`\n        );\n        console.log(\n          `📊 Estadísticas del partido: ${stats.pair2GamesWon} juegos, ${stats.pair2SetsWon} sets, ${stats.pair2TotalPoints} puntos`\n        );\n        console.log(\n          `📊 Modo: ${shouldAccumulate ? \"Acumular\" : \"Solo recalcular\"}`\n        );\n\n        if (shouldAccumulate) {\n          // ACUMULAR estadísticas (solo al finalizar partido)\n          await updatePair(pair2.id, {\n            games_won: pair2.games_won + stats.pair2GamesWon,\n            sets_won: pair2.sets_won + stats.pair2SetsWon,\n            points: pair2.points + stats.pair2TotalPoints,\n            matches_played: pair2.matches_played + 1,\n          });\n\n          console.log(\n            `✅ Pareja 2 actualizada (ACUMULADO): ${\n              pair2.games_won + stats.pair2GamesWon\n            } juegos, ${pair2.sets_won + stats.pair2SetsWon} sets, ${\n              pair2.points + stats.pair2TotalPoints\n            } puntos, ${pair2.matches_played + 1} partidos`\n          );\n        } else {\n          // SOLO RECALCULAR estadísticas (al corregir juegos)\n          console.log(\n            `✅ Pareja 2: Solo recálculo de estadísticas (sin acumular)`\n          );\n        }\n      }\n\n      // Determinar ganador\n      let winnerId: string | undefined;\n\n      console.log(\"🏆 === DETERMINACIÓN DEL GANADOR ===\");\n      console.log(\n        `🏆 Sets: Pareja 1 = ${stats.pair1SetsWon}, Pareja 2 = ${stats.pair2SetsWon}`\n      );\n      console.log(\n        `🏆 Juegos: Pareja 1 = ${stats.pair1GamesWon}, Pareja 2 = ${stats.pair2GamesWon}`\n      );\n      console.log(`🏆 Es empate: ${stats.isTie}`);\n\n      if (stats.isTie) {\n        // Es un empate por puntos totales\n        winnerId = undefined;\n        console.log(\"🤝 Partido terminó en EMPATE por puntos totales\");\n      } else if (stats.pair1TotalPoints > stats.pair2TotalPoints) {\n        // Pareja 1 tiene más puntos totales\n        winnerId = match.pair1_id;\n        console.log(\"🏆 Pareja 1 gana por puntos totales\");\n      } else if (stats.pair2TotalPoints > stats.pair1TotalPoints) {\n        // Pareja 2 tiene más puntos totales\n        winnerId = match.pair2_id;\n        console.log(\"🏆 Pareja 2 gana por puntos totales\");\n      } else {\n        // Caso inesperado\n        winnerId = undefined;\n        console.log(\"❌ Caso inesperado en determinación del ganador\");\n      }\n\n      let message: string;\n      if (stats.isTie) {\n        message = `✅ Partido finalizado.\\n\\n🤝 EMPATE (${stats.pair1TotalPoints}-${stats.pair2TotalPoints} puntos totales)`;\n      } else if (winnerId) {\n        const winnerName =\n          winnerId === match.pair1_id\n            ? `${pair1?.player1?.name} y ${pair1?.player2?.name}`\n            : `${pair2?.player1?.name} y ${pair2?.player2?.name}`;\n        message = `✅ Partido finalizado.\\n\\n🏆 Ganador: ${winnerName} (${stats.pair1TotalPoints}-${stats.pair2TotalPoints} puntos totales)`;\n      } else {\n        message = `✅ Partido finalizado.\\n\\n🤝 Empate (${stats.pair1TotalPoints}-${stats.pair2TotalPoints} puntos totales)`;\n      }\n\n      console.log(\"🔄 === FIN ACTUALIZACIÓN ===\");\n\n      return {\n        success: true,\n        message,\n        pair1Stats: {\n          gamesWon: stats.pair1GamesWon,\n          setsWon: stats.pair1SetsWon,\n          points: stats.pair1TotalPoints,\n        },\n        pair2Stats: {\n          gamesWon: stats.pair2GamesWon,\n          setsWon: stats.pair2SetsWon,\n          points: stats.pair2TotalPoints,\n        },\n        winnerId,\n        isTie: stats.isTie,\n      };\n    } catch (error) {\n      console.error(\"❌ Error en updateMatchStatistics:\", error);\n      return {\n        success: false,\n        message: \"Error al actualizar estadísticas del partido\",\n        pair1Stats: { gamesWon: 0, setsWon: 0, points: 0 },\n        pair2Stats: { gamesWon: 0, setsWon: 0, points: 0 },\n        isTie: false,\n      };\n    }\n  }\n\n  /**\n   * Recalcula todas las estadísticas del torneo\n   */\n  static async recalculateAllStatistics(tournamentId: string): Promise<{\n    success: boolean;\n    message: string;\n  }> {\n    try {\n      console.log(\"🔄 === INICIO RECÁLCULO ===\");\n\n      // Obtener todos los datos del torneo\n      const pairs = await getPairs(tournamentId);\n      const matches = await getMatches(tournamentId);\n\n      // Resetear todas las estadísticas de las parejas\n      console.log(\"🔄 Reseteando estadísticas de todas las parejas...\");\n      for (const pair of pairs) {\n        await updatePair(pair.id, {\n          games_won: 0,\n          sets_won: 0,\n          points: 0,\n          matches_played: 0,\n        });\n      }\n\n      // Crear un mapa para acumular estadísticas de cada pareja\n      const pairStats = new Map<\n        string,\n        {\n          gamesWon: number;\n          setsWon: number;\n          points: number;\n          matchesPlayed: number;\n        }\n      >();\n\n      // Inicializar estadísticas para todas las parejas\n      for (const pair of pairs) {\n        pairStats.set(pair.id, {\n          gamesWon: 0,\n          setsWon: 0,\n          points: 0,\n          matchesPlayed: 0,\n        });\n      }\n\n      // Procesar cada partido finalizado y acumular estadísticas\n      let processedMatches = 0;\n      for (const match of matches) {\n        if (match.is_finished) {\n          console.log(`🔄 Procesando partido: ${match.id}`);\n          const games = await getGames(match.id);\n\n          if (games.length > 0) {\n            const stats = this.calculateMatchStatistics(match, games);\n\n            // Acumular estadísticas para pareja 1\n            const pair1Stats = pairStats.get(match.pair1_id)!;\n            pair1Stats.gamesWon += stats.pair1GamesWon;\n            pair1Stats.setsWon += stats.pair1SetsWon;\n            pair1Stats.points += stats.pair1TotalPoints;\n            pair1Stats.matchesPlayed += 1;\n\n            // Acumular estadísticas para pareja 2\n            const pair2Stats = pairStats.get(match.pair2_id)!;\n            pair2Stats.gamesWon += stats.pair2GamesWon;\n            pair2Stats.setsWon += stats.pair2SetsWon;\n            pair2Stats.points += stats.pair2TotalPoints;\n            pair2Stats.matchesPlayed += 1;\n\n            processedMatches++;\n          }\n        }\n      }\n\n      // Actualizar todas las parejas con sus estadísticas acumuladas\n      console.log(\"🔄 Actualizando estadísticas acumuladas...\");\n      for (const pair of pairs) {\n        const stats = pairStats.get(pair.id);\n        if (stats) {\n          await updatePair(pair.id, {\n            games_won: stats.gamesWon,\n            sets_won: stats.setsWon,\n            points: stats.points,\n            matches_played: stats.matchesPlayed,\n          });\n          console.log(\n            `📊 Pareja ${pair.id}: ${stats.points} puntos, ${stats.setsWon} sets, ${stats.gamesWon} juegos`\n          );\n        }\n      }\n\n      console.log(\n        `✅ Estadísticas recalculadas para ${processedMatches} partidos`\n      );\n      console.log(\"🔄 === FIN RECÁLCULO ===\");\n\n      return {\n        success: true,\n        message: `✅ Estadísticas recalculadas exitosamente para ${processedMatches} partidos`,\n      };\n    } catch (error) {\n      console.error(\"❌ Error en recalculateAllStatistics:\", error);\n      return {\n        success: false,\n        message: \"Error al recalcular estadísticas del torneo\",\n      };\n    }\n  }\n\n  /**\n   * Calcula el ranking de las parejas\n   */\n  static calculateRanking(pairs: Pair[]): Pair[] {\n    return [...pairs].sort((a, b) => {\n      // Criterio 1: Puntos totales (descendente) - CRITERIO PRINCIPAL\n      if (a.points !== b.points) {\n        return b.points - a.points;\n      }\n      // Criterio 2: Sets ganados (descendente) - CRITERIO DE DESEMPATE\n      if (a.sets_won !== b.sets_won) {\n        return b.sets_won - a.sets_won;\n      }\n      // Criterio 3: Juegos ganados (descendente)\n      if (a.games_won !== b.games_won) {\n        return b.games_won - a.games_won;\n      }\n      // Criterio 4: Menos partidos jugados (mejor eficiencia)\n      return a.matches_played - b.matches_played;\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}