{"ast":null,"code":"import { updateMatch } from \"../lib/database\";\nimport { MatchResultCalculator } from \"./MatchResultCalculator\";\nexport class FlexibleMatchFinisher {\n  /**\n   * Finaliza un partido con l√≥gica simple que suma juegos tal como est√°n\n   */\n  static async finishMatch(match, games, pairs, onUpdate) {\n    console.log(\"=== FINALIZANDO PARTIDO CON FLEXIBLEMATCHFINISHER ===\");\n    console.log(\"Match:\", match.id);\n    console.log(\"Games:\", games.length);\n    try {\n      // Validar que hay juegos\n      if (games.length === 0) {\n        return {\n          success: false,\n          message: \"No se puede finalizar un partido sin juegos\",\n          isTie: false,\n          pair1Games: 0,\n          pair2Games: 0,\n          pair1TotalPoints: 0,\n          pair2TotalPoints: 0\n        };\n      }\n\n      // Calcular juegos ganados por cada pareja - L√ìGICA SIMPLE\n      let pair1Games = 0;\n      let pair2Games = 0;\n      let pair1TotalPoints = 0;\n      let pair2TotalPoints = 0;\n      games.forEach((game, index) => {\n        console.log(`Analizando Juego ${index + 1}:`, {\n          pair1_games: game.pair1_games,\n          pair2_games: game.pair2_games,\n          is_tie_break: game.is_tie_break,\n          tie_break_pair1: game.tie_break_pair1_points,\n          tie_break_pair2: game.tie_break_pair2_points\n        });\n        if (game.is_tie_break) {\n          // Para tie-breaks - L√ìGICA SIMPLE\n          if (game.tie_break_pair1_points >= 10 && game.tie_break_pair1_points - game.tie_break_pair2_points >= 2) {\n            pair1Games++;\n            console.log(\"Tie-break ganado por pareja 1\");\n          } else if (game.tie_break_pair2_points >= 10 && game.tie_break_pair2_points - game.tie_break_pair1_points >= 2) {\n            pair2Games++;\n            console.log(\"Tie-break ganado por pareja 2\");\n          } else {\n            // EMPATE EN TIE-BREAK - AMBAS PAREJAS GANAN 1 JUEGO\n            pair1Games++;\n            pair2Games++;\n            console.log(\"Tie-break empatado - ambas parejas ganan 1 juego\");\n          }\n          pair1TotalPoints += game.tie_break_pair1_points;\n          pair2TotalPoints += game.tie_break_pair2_points;\n        } else {\n          // Para juegos normales - L√ìGICA SIMPLE\n          if (game.pair1_games > game.pair2_games) {\n            pair1Games++;\n            console.log(\"Juego normal ganado por pareja 1\");\n          } else if (game.pair2_games > game.pair1_games) {\n            pair2Games++;\n            console.log(\"Juego normal ganado por pareja 2\");\n          } else {\n            // EMPATE EN JUEGO - AMBAS PAREJAS GANAN 1 JUEGO\n            pair1Games++;\n            pair2Games++;\n            console.log(\"Juego normal empatado - ambas parejas ganan 1 juego\");\n          }\n          pair1TotalPoints += game.pair1_games;\n          pair2TotalPoints += game.pair2_games;\n        }\n      });\n      console.log(\"Resultado calculado:\", {\n        pair1Games,\n        pair2Games,\n        pair1TotalPoints,\n        pair2TotalPoints\n      });\n\n      // Determinar si es empate (incluyendo empates parciales)\n      const isTie = pair1Games === pair2Games;\n      const winnerId = isTie ? undefined : pair1Games > pair2Games ? match.pair1_id : match.pair2_id;\n      console.log(\"Decisi√≥n final:\", {\n        isTie,\n        winnerId,\n        pair1Games,\n        pair2Games\n      });\n\n      // Actualizar el partido en la base de datos\n      await updateMatch(match.id, {\n        winner_id: winnerId,\n        is_finished: true\n      });\n      console.log(\"‚úÖ Partido actualizado en base de datos\");\n\n      // ACUMULAR estad√≠sticas del partido (solo al finalizar)\n      const statsResult = await MatchResultCalculator.accumulateMatchStatistics(match, games, pairs);\n      if (statsResult.success) {\n        console.log(\"‚úÖ Estad√≠sticas actualizadas correctamente\");\n      } else {\n        console.error(\"‚ùå Error actualizando estad√≠sticas:\", statsResult.message);\n      }\n\n      // Usar los valores calculados por CorrectStatisticsCalculator\n      const finalPair1Games = statsResult.pair1Stats.gamesWon;\n      const finalPair2Games = statsResult.pair2Stats.gamesWon;\n      const finalIsTie = statsResult.isTie;\n      const finalWinnerId = statsResult.winnerId;\n\n      // Notificar al componente padre para actualizar la tabla autom√°ticamente\n      onUpdate();\n\n      // Generar mensaje de √©xito usando el resultado de estad√≠sticas\n      const message = statsResult.success ? statsResult.message : `‚úÖ Partido finalizado exitosamente.\\n\\nüìä Resultado: ${finalPair1Games}-${finalPair2Games} juegos`;\n      return {\n        success: true,\n        message,\n        isTie: finalIsTie,\n        winnerId: finalWinnerId,\n        pair1Games: finalPair1Games,\n        pair2Games: finalPair2Games,\n        pair1TotalPoints: statsResult.pair1Stats.points,\n        pair2TotalPoints: statsResult.pair2Stats.points\n      };\n    } catch (error) {\n      console.error(\"‚ùå Error finalizando partido:\", error);\n      return {\n        success: false,\n        message: `Error al finalizar el partido: ${error}`,\n        isTie: false,\n        pair1Games: 0,\n        pair2Games: 0,\n        pair1TotalPoints: 0,\n        pair2TotalPoints: 0\n      };\n    }\n  }\n\n  /**\n   * Valida si se puede finalizar un partido (l√≥gica ultra permisiva)\n   */\n  static canFinishMatch(games) {\n    if (games.length === 0) {\n      return false;\n    }\n\n    // Verificar que todos los juegos tengan marcadores v√°lidos (permitir 0)\n    for (const game of games) {\n      if (game.is_tie_break) {\n        if (game.tie_break_pair1_points < 0 || game.tie_break_pair2_points < 0) {\n          return false;\n        }\n      } else {\n        if (game.pair1_games < 0 || game.pair2_games < 0) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Calcula el estado actual del partido para mostrar\n   */\n  static calculateMatchStatus(match, games, pairs) {\n    if (games.length === 0) {\n      return {\n        pair1Games: 0,\n        pair2Games: 0,\n        isTie: false,\n        canFinish: false,\n        reason: \"No hay juegos registrados\"\n      };\n    }\n    let pair1Games = 0;\n    let pair2Games = 0;\n    games.forEach((game, index) => {\n      if (game.is_tie_break) {\n        if (game.tie_break_pair1_points >= 10 && game.tie_break_pair1_points - game.tie_break_pair2_points >= 2) {\n          pair1Games++;\n        } else if (game.tie_break_pair2_points >= 10 && game.tie_break_pair2_points - game.tie_break_pair1_points >= 2) {\n          pair2Games++;\n        } else {\n          // EMPATE EN TIE-BREAK - AMBAS PAREJAS GANAN 1 JUEGO\n          pair1Games++;\n          pair2Games++;\n        }\n      } else {\n        if (game.pair1_games > game.pair2_games) {\n          pair1Games++;\n        } else if (game.pair2_games > game.pair1_games) {\n          pair2Games++;\n        } else {\n          // EMPATE EN JUEGO - AMBAS PAREJAS GANAN 1 JUEGO\n          pair1Games++;\n          pair2Games++;\n        }\n      }\n    });\n    const isTie = pair1Games === pair2Games;\n    const winnerId = isTie ? undefined : pair1Games > pair2Games ? match.pair1_id : match.pair2_id;\n    const canFinish = this.canFinishMatch(games);\n    const reason = canFinish ? \"Puede finalizar\" : \"Marcadores inv√°lidos\";\n    return {\n      pair1Games,\n      pair2Games,\n      isTie,\n      winnerId,\n      canFinish,\n      reason\n    };\n  }\n}","map":{"version":3,"names":["updateMatch","MatchResultCalculator","FlexibleMatchFinisher","finishMatch","match","games","pairs","onUpdate","console","log","id","length","success","message","isTie","pair1Games","pair2Games","pair1TotalPoints","pair2TotalPoints","forEach","game","index","pair1_games","pair2_games","is_tie_break","tie_break_pair1","tie_break_pair1_points","tie_break_pair2","tie_break_pair2_points","winnerId","undefined","pair1_id","pair2_id","winner_id","is_finished","statsResult","accumulateMatchStatistics","error","finalPair1Games","pair1Stats","gamesWon","finalPair2Games","pair2Stats","finalIsTie","finalWinnerId","points","canFinishMatch","calculateMatchStatus","canFinish","reason"],"sources":["/Users/nedev/padel-tournament-app/src/components/FlexibleMatchFinisher.tsx"],"sourcesContent":["import { Game, Match, Pair } from \"../lib/database\";\nimport { updateMatch } from \"../lib/database\";\nimport { MatchResultCalculator } from \"./MatchResultCalculator\";\n\nexport interface FlexibleMatchResult {\n  success: boolean;\n  message: string;\n  isTie: boolean;\n  winnerId?: string;\n  pair1Games: number;\n  pair2Games: number;\n  pair1TotalPoints: number;\n  pair2TotalPoints: number;\n}\n\nexport class FlexibleMatchFinisher {\n  /**\n   * Finaliza un partido con l√≥gica simple que suma juegos tal como est√°n\n   */\n  static async finishMatch(\n    match: Match,\n    games: Game[],\n    pairs: Pair[],\n    onUpdate: () => void\n  ): Promise<FlexibleMatchResult> {\n    console.log(\"=== FINALIZANDO PARTIDO CON FLEXIBLEMATCHFINISHER ===\");\n    console.log(\"Match:\", match.id);\n    console.log(\"Games:\", games.length);\n\n    try {\n      // Validar que hay juegos\n      if (games.length === 0) {\n        return {\n          success: false,\n          message: \"No se puede finalizar un partido sin juegos\",\n          isTie: false,\n          pair1Games: 0,\n          pair2Games: 0,\n          pair1TotalPoints: 0,\n          pair2TotalPoints: 0,\n        };\n      }\n\n      // Calcular juegos ganados por cada pareja - L√ìGICA SIMPLE\n      let pair1Games = 0;\n      let pair2Games = 0;\n      let pair1TotalPoints = 0;\n      let pair2TotalPoints = 0;\n\n      games.forEach((game, index) => {\n        console.log(`Analizando Juego ${index + 1}:`, {\n          pair1_games: game.pair1_games,\n          pair2_games: game.pair2_games,\n          is_tie_break: game.is_tie_break,\n          tie_break_pair1: game.tie_break_pair1_points,\n          tie_break_pair2: game.tie_break_pair2_points,\n        });\n\n        if (game.is_tie_break) {\n          // Para tie-breaks - L√ìGICA SIMPLE\n          if (\n            game.tie_break_pair1_points >= 10 &&\n            game.tie_break_pair1_points - game.tie_break_pair2_points >= 2\n          ) {\n            pair1Games++;\n            console.log(\"Tie-break ganado por pareja 1\");\n          } else if (\n            game.tie_break_pair2_points >= 10 &&\n            game.tie_break_pair2_points - game.tie_break_pair1_points >= 2\n          ) {\n            pair2Games++;\n            console.log(\"Tie-break ganado por pareja 2\");\n          } else {\n            // EMPATE EN TIE-BREAK - AMBAS PAREJAS GANAN 1 JUEGO\n            pair1Games++;\n            pair2Games++;\n            console.log(\"Tie-break empatado - ambas parejas ganan 1 juego\");\n          }\n          pair1TotalPoints += game.tie_break_pair1_points;\n          pair2TotalPoints += game.tie_break_pair2_points;\n        } else {\n          // Para juegos normales - L√ìGICA SIMPLE\n          if (game.pair1_games > game.pair2_games) {\n            pair1Games++;\n            console.log(\"Juego normal ganado por pareja 1\");\n          } else if (game.pair2_games > game.pair1_games) {\n            pair2Games++;\n            console.log(\"Juego normal ganado por pareja 2\");\n          } else {\n            // EMPATE EN JUEGO - AMBAS PAREJAS GANAN 1 JUEGO\n            pair1Games++;\n            pair2Games++;\n            console.log(\"Juego normal empatado - ambas parejas ganan 1 juego\");\n          }\n          pair1TotalPoints += game.pair1_games;\n          pair2TotalPoints += game.pair2_games;\n        }\n      });\n\n      console.log(\"Resultado calculado:\", {\n        pair1Games,\n        pair2Games,\n        pair1TotalPoints,\n        pair2TotalPoints,\n      });\n\n      // Determinar si es empate (incluyendo empates parciales)\n      const isTie = pair1Games === pair2Games;\n      const winnerId = isTie\n        ? undefined\n        : pair1Games > pair2Games\n        ? match.pair1_id\n        : match.pair2_id;\n\n      console.log(\"Decisi√≥n final:\", {\n        isTie,\n        winnerId,\n        pair1Games,\n        pair2Games,\n      });\n\n      // Actualizar el partido en la base de datos\n      await updateMatch(match.id, {\n        winner_id: winnerId,\n        is_finished: true,\n      });\n\n      console.log(\"‚úÖ Partido actualizado en base de datos\");\n\n      // ACUMULAR estad√≠sticas del partido (solo al finalizar)\n      const statsResult = await MatchResultCalculator.accumulateMatchStatistics(\n        match,\n        games,\n        pairs\n      );\n\n      if (statsResult.success) {\n        console.log(\"‚úÖ Estad√≠sticas actualizadas correctamente\");\n      } else {\n        console.error(\n          \"‚ùå Error actualizando estad√≠sticas:\",\n          statsResult.message\n        );\n      }\n\n      // Usar los valores calculados por CorrectStatisticsCalculator\n      const finalPair1Games = statsResult.pair1Stats.gamesWon;\n      const finalPair2Games = statsResult.pair2Stats.gamesWon;\n      const finalIsTie = statsResult.isTie;\n      const finalWinnerId = statsResult.winnerId;\n\n      // Notificar al componente padre para actualizar la tabla autom√°ticamente\n      onUpdate();\n\n      // Generar mensaje de √©xito usando el resultado de estad√≠sticas\n      const message = statsResult.success\n        ? statsResult.message\n        : `‚úÖ Partido finalizado exitosamente.\\n\\nüìä Resultado: ${finalPair1Games}-${finalPair2Games} juegos`;\n\n      return {\n        success: true,\n        message,\n        isTie: finalIsTie,\n        winnerId: finalWinnerId,\n        pair1Games: finalPair1Games,\n        pair2Games: finalPair2Games,\n        pair1TotalPoints: statsResult.pair1Stats.points,\n        pair2TotalPoints: statsResult.pair2Stats.points,\n      };\n    } catch (error) {\n      console.error(\"‚ùå Error finalizando partido:\", error);\n      return {\n        success: false,\n        message: `Error al finalizar el partido: ${error}`,\n        isTie: false,\n        pair1Games: 0,\n        pair2Games: 0,\n        pair1TotalPoints: 0,\n        pair2TotalPoints: 0,\n      };\n    }\n  }\n\n  /**\n   * Valida si se puede finalizar un partido (l√≥gica ultra permisiva)\n   */\n  static canFinishMatch(games: Game[]): boolean {\n    if (games.length === 0) {\n      return false;\n    }\n\n    // Verificar que todos los juegos tengan marcadores v√°lidos (permitir 0)\n    for (const game of games) {\n      if (game.is_tie_break) {\n        if (\n          game.tie_break_pair1_points < 0 ||\n          game.tie_break_pair2_points < 0\n        ) {\n          return false;\n        }\n      } else {\n        if (game.pair1_games < 0 || game.pair2_games < 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Calcula el estado actual del partido para mostrar\n   */\n  static calculateMatchStatus(\n    match: Match,\n    games: Game[],\n    pairs: Pair[]\n  ): {\n    pair1Games: number;\n    pair2Games: number;\n    isTie: boolean;\n    winnerId?: string;\n    canFinish: boolean;\n    reason: string;\n  } {\n    if (games.length === 0) {\n      return {\n        pair1Games: 0,\n        pair2Games: 0,\n        isTie: false,\n        canFinish: false,\n        reason: \"No hay juegos registrados\",\n      };\n    }\n\n    let pair1Games = 0;\n    let pair2Games = 0;\n\n    games.forEach((game, index) => {\n      if (game.is_tie_break) {\n        if (\n          game.tie_break_pair1_points >= 10 &&\n          game.tie_break_pair1_points - game.tie_break_pair2_points >= 2\n        ) {\n          pair1Games++;\n        } else if (\n          game.tie_break_pair2_points >= 10 &&\n          game.tie_break_pair2_points - game.tie_break_pair1_points >= 2\n        ) {\n          pair2Games++;\n        } else {\n          // EMPATE EN TIE-BREAK - AMBAS PAREJAS GANAN 1 JUEGO\n          pair1Games++;\n          pair2Games++;\n        }\n      } else {\n        if (game.pair1_games > game.pair2_games) {\n          pair1Games++;\n        } else if (game.pair2_games > game.pair1_games) {\n          pair2Games++;\n        } else {\n          // EMPATE EN JUEGO - AMBAS PAREJAS GANAN 1 JUEGO\n          pair1Games++;\n          pair2Games++;\n        }\n      }\n    });\n\n    const isTie = pair1Games === pair2Games;\n    const winnerId = isTie\n      ? undefined\n      : pair1Games > pair2Games\n      ? match.pair1_id\n      : match.pair2_id;\n\n    const canFinish = this.canFinishMatch(games);\n    const reason = canFinish ? \"Puede finalizar\" : \"Marcadores inv√°lidos\";\n\n    return {\n      pair1Games,\n      pair2Games,\n      isTie,\n      winnerId,\n      canFinish,\n      reason,\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}