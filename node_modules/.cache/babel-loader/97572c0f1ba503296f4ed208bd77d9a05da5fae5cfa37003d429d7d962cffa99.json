{"ast":null,"code":"import{updatePair,getPairs,getMatches,getGames}from\"../lib/database\";export class SetCalculator{/**\n   * Calcula estad√≠sticas detectando sets cuando una pareja llega a 6 puntos\n   */static calculateMatchStatistics(match,games){let pair1GamesWon=0;let pair2GamesWon=0;let pair1TotalPoints=0;let pair2TotalPoints=0;console.log(\"üéØ === INICIO C√ÅLCULO DE ESTAD√çSTICAS ===\");console.log(\"üéØ Partido ID:\",match.id);console.log(\"üéØ Total de juegos:\",games.length);// Contar juegos ganados y verificar sets por cada juego\ngames.forEach((game,index)=>{console.log(`üìä === JUEGO ${index+1} ===`);console.log(\"üìä Datos del juego:\",JSON.stringify(game,null,2));if(game.is_tie_break){console.log(\"üìä Es un tie-break\");// Para tie-breaks\nif(game.tie_break_pair1_points>=10&&game.tie_break_pair1_points-game.tie_break_pair2_points>=2){pair1GamesWon++;console.log(`‚úÖ Pareja 1 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`);}else if(game.tie_break_pair2_points>=10&&game.tie_break_pair2_points-game.tie_break_pair1_points>=2){pair2GamesWon++;console.log(`‚úÖ Pareja 2 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`);}else{// Empate en tie-break - ambas ganan 1 juego\npair1GamesWon++;pair2GamesWon++;console.log(`ü§ù Empate en tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points} - ambas ganan 1 juego`);}pair1TotalPoints+=game.tie_break_pair1_points;pair2TotalPoints+=game.tie_break_pair2_points;}else{console.log(\"üìä Es un juego normal\");console.log(`üìä Puntos Pareja 1: ${game.pair1_games}, Puntos Pareja 2: ${game.pair2_games}`);// Para juegos normales\nif(game.pair1_games>game.pair2_games){pair1GamesWon++;console.log(`‚úÖ Pareja 1 gana juego: ${game.pair1_games}-${game.pair2_games}`);}else if(game.pair2_games>game.pair1_games){pair2GamesWon++;console.log(`‚úÖ Pareja 2 gana juego: ${game.pair1_games}-${game.pair2_games}`);}else{// Empate en juego - ambas ganan 1 juego\npair1GamesWon++;pair2GamesWon++;console.log(`ü§ù Empate en juego: ${game.pair1_games}-${game.pair2_games} - ambas ganan 1 juego`);}pair1TotalPoints+=game.pair1_games;pair2TotalPoints+=game.pair2_games;}console.log(`üìä Despu√©s del juego ${index+1}: Pareja 1 = ${pair1GamesWon} juegos, Pareja 2 = ${pair2GamesWon} juegos`);});console.log(\"üîç === VERIFICACI√ìN DE SETS ===\");console.log(`üîç Pareja 1 tiene ${pair1GamesWon} juegos ganados`);console.log(`üîç Pareja 2 tiene ${pair2GamesWon} juegos ganados`);// Calcular sets ganados - CRITERIO: Si en un juego una pareja llega a 6 puntos, gana 1 set\nlet pair1SetsWon=0;let pair2SetsWon=0;// Verificar cada juego para ver si alguna pareja lleg√≥ a 6 puntos\ngames.forEach((game,index)=>{if(!game.is_tie_break){console.log(`üîç Verificando juego ${index+1} para sets:`);console.log(`üîç Pareja 1: ${game.pair1_games} puntos, Pareja 2: ${game.pair2_games} puntos`);// Si una pareja llega a 6 puntos en este juego, gana 1 set\nif(game.pair1_games>=6){pair1SetsWon=1;console.log(`üèÜ Pareja 1 gana 1 SET en juego ${index+1} con ${game.pair1_games} puntos`);}if(game.pair2_games>=6){pair2SetsWon=1;console.log(`üèÜ Pareja 2 gana 1 SET en juego ${index+1} con ${game.pair2_games} puntos`);}}});console.log(`üìä Sets finales: Pareja 1 = ${pair1SetsWon}, Pareja 2 = ${pair2SetsWon}`);// Determinar si es empate\nconst isTie=pair1GamesWon===pair2GamesWon&&pair1SetsWon===pair2SetsWon;console.log(\"üìä === RESULTADO FINAL ===\");console.log(`üìä Juegos: ${pair1GamesWon}-${pair2GamesWon}`);console.log(`üìä Sets: ${pair1SetsWon}-${pair2SetsWon}`);console.log(`üìä Puntos totales: ${pair1TotalPoints}-${pair2TotalPoints}`);console.log(`üìä Es empate: ${isTie}`);console.log(\"üéØ === FIN C√ÅLCULO DE ESTAD√çSTICAS ===\");return{pair1GamesWon,pair2GamesWon,pair1SetsWon,pair2SetsWon,pair1TotalPoints,pair2TotalPoints,isTie};}/**\n   * Actualiza estad√≠sticas de un partido espec√≠fico\n   */static async updateMatchStatistics(match,games,pairs){try{console.log(\"üîÑ === INICIO ACTUALIZACI√ìN DE ESTAD√çSTICAS ===\");const stats=this.calculateMatchStatistics(match,games);const pair1=pairs.find(p=>p.id===match.pair1_id);const pair2=pairs.find(p=>p.id===match.pair2_id);console.log(\"üìä Actualizando estad√≠sticas del partido:\",{pair1GamesWon:stats.pair1GamesWon,pair2GamesWon:stats.pair2GamesWon,pair1SetsWon:stats.pair1SetsWon,pair2SetsWon:stats.pair2SetsWon,isTie:stats.isTie});// ACTUALIZAR ESTAD√çSTICAS EN LA BASE DE DATOS INMEDIATAMENTE\nif(pair1){var _pair1$player,_pair1$player2;console.log(`üìä Actualizando Pareja 1: ${(_pair1$player=pair1.player1)===null||_pair1$player===void 0?void 0:_pair1$player.name} y ${(_pair1$player2=pair1.player2)===null||_pair1$player2===void 0?void 0:_pair1$player2.name}`);console.log(`üìä Estad√≠sticas actuales: ${pair1.games_won} juegos, ${pair1.sets_won} sets, ${pair1.points} puntos`);console.log(`üìä Agregando: ${stats.pair1GamesWon} juegos, ${stats.pair1SetsWon} sets, ${stats.pair1TotalPoints} puntos`);await updatePair(pair1.id,{games_won:pair1.games_won+stats.pair1GamesWon,sets_won:pair1.sets_won+stats.pair1SetsWon,points:pair1.points+stats.pair1TotalPoints,matches_played:pair1.matches_played+1});console.log(`‚úÖ Pareja 1 actualizada: ${stats.pair1GamesWon} juegos, ${stats.pair1SetsWon} sets`);}if(pair2){var _pair2$player,_pair2$player2;console.log(`üìä Actualizando Pareja 2: ${(_pair2$player=pair2.player1)===null||_pair2$player===void 0?void 0:_pair2$player.name} y ${(_pair2$player2=pair2.player2)===null||_pair2$player2===void 0?void 0:_pair2$player2.name}`);console.log(`üìä Estad√≠sticas actuales: ${pair2.games_won} juegos, ${pair2.sets_won} sets, ${pair2.points} puntos`);console.log(`üìä Agregando: ${stats.pair2GamesWon} juegos, ${stats.pair2SetsWon} sets, ${stats.pair2TotalPoints} puntos`);await updatePair(pair2.id,{games_won:pair2.games_won+stats.pair2GamesWon,sets_won:pair2.sets_won+stats.pair2SetsWon,points:pair2.points+stats.pair2TotalPoints,matches_played:pair2.matches_played+1});console.log(`‚úÖ Pareja 2 actualizada: ${stats.pair2GamesWon} juegos, ${stats.pair2SetsWon} sets`);}// Determinar ganador basado en SETS GANADOS (criterio principal)\nlet winnerId;if(stats.isTie){// Es un empate\nwinnerId=undefined;console.log(\"ü§ù Partido termin√≥ en EMPATE\");}else if(stats.pair1SetsWon>stats.pair2SetsWon){winnerId=match.pair1_id;console.log(\"üèÜ Pareja 1 gana por sets\");}else if(stats.pair2SetsWon>stats.pair1SetsWon){winnerId=match.pair2_id;console.log(\"üèÜ Pareja 2 gana por sets\");}else{// Empate en sets - verificar por puntos\nif(stats.pair1GamesWon>stats.pair2GamesWon){winnerId=match.pair1_id;console.log(\"üèÜ Pareja 1 gana por puntos\");}else if(stats.pair2GamesWon>stats.pair1GamesWon){winnerId=match.pair2_id;console.log(\"üèÜ Pareja 2 gana por puntos\");}else{// Empate total\nwinnerId=undefined;console.log(\"ü§ù Empate total\");}}let message;if(stats.isTie){message=`‚úÖ Partido finalizado.\\n\\nü§ù EMPATE (${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets)`;}else if(winnerId){var _pair1$player3,_pair1$player4,_pair2$player3,_pair2$player4;const winnerName=winnerId===match.pair1_id?`${pair1===null||pair1===void 0?void 0:(_pair1$player3=pair1.player1)===null||_pair1$player3===void 0?void 0:_pair1$player3.name} y ${pair1===null||pair1===void 0?void 0:(_pair1$player4=pair1.player2)===null||_pair1$player4===void 0?void 0:_pair1$player4.name}`:`${pair2===null||pair2===void 0?void 0:(_pair2$player3=pair2.player1)===null||_pair2$player3===void 0?void 0:_pair2$player3.name} y ${pair2===null||pair2===void 0?void 0:(_pair2$player4=pair2.player2)===null||_pair2$player4===void 0?void 0:_pair2$player4.name}`;message=`‚úÖ Partido finalizado.\\n\\nüèÜ Ganador: ${winnerName} (${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets)`;}else{message=`‚úÖ Partido finalizado.\\n\\nü§ù Empate (${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets)`;}console.log(\"üîÑ === FIN ACTUALIZACI√ìN DE ESTAD√çSTICAS ===\");return{success:true,message,pair1Stats:{gamesWon:stats.pair1GamesWon,setsWon:stats.pair1SetsWon,points:stats.pair1TotalPoints},pair2Stats:{gamesWon:stats.pair2GamesWon,setsWon:stats.pair2SetsWon,points:stats.pair2TotalPoints},winnerId,isTie:stats.isTie};}catch(error){console.error(\"‚ùå Error actualizando estad√≠sticas:\",error);return{success:false,message:`Error actualizando estad√≠sticas: ${error}`,pair1Stats:{gamesWon:0,setsWon:0,points:0},pair2Stats:{gamesWon:0,setsWon:0,points:0},isTie:false};}}/**\n   * Recalcula TODAS las estad√≠sticas desde cero para un torneo\n   */static async recalculateAllStatistics(tournamentId){try{console.log(\"üîÑ === INICIO REC√ÅLCULO COMPLETO ===\");console.log(\"üîÑ Recalculando TODAS las estad√≠sticas desde cero...\");// Obtener todas las parejas del torneo\nconst pairs=await getPairs(tournamentId);console.log(`üìä Total de parejas: ${pairs.length}`);// Resetear TODAS las estad√≠sticas a 0\nconsole.log(\"üìä Reseteando estad√≠sticas de todas las parejas...\");for(const pair of pairs){var _pair$player,_pair$player2;await updatePair(pair.id,{games_won:0,sets_won:0,points:0,matches_played:0});console.log(`‚úÖ Pareja ${(_pair$player=pair.player1)===null||_pair$player===void 0?void 0:_pair$player.name} y ${(_pair$player2=pair.player2)===null||_pair$player2===void 0?void 0:_pair$player2.name} reseteada`);}console.log(\"‚úÖ Todas las estad√≠sticas reseteadas a 0\");// Obtener todos los partidos del torneo\nconst matches=await getMatches(tournamentId);console.log(`üìã Total de partidos: ${matches.length}`);console.log(`üìã Partidos finalizados: ${matches.filter(m=>m.is_finished).length}`);// Contadores acumulados para cada pareja\nconst pairStats={};// Inicializar contadores\npairs.forEach(pair=>{pairStats[pair.id]={games:0,sets:0,points:0,matches:0};});// Recalcular estad√≠sticas para cada partido finalizado\nlet processedMatches=0;for(const match of matches){if(match.is_finished){console.log(`üéØ === PROCESANDO PARTIDO ${match.id} ===`);const games=await getGames(match.id);console.log(`üìä Partido tiene ${games.length} juegos`);const stats=this.calculateMatchStatistics(match,games);console.log(`üìà Estad√≠sticas calculadas: ${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets`);// Acumular estad√≠sticas para pareja 1\nif(pairStats[match.pair1_id]){const beforeGames=pairStats[match.pair1_id].games;const beforeSets=pairStats[match.pair1_id].sets;pairStats[match.pair1_id].games+=stats.pair1GamesWon;pairStats[match.pair1_id].sets+=stats.pair1SetsWon;pairStats[match.pair1_id].points+=stats.pair1TotalPoints;pairStats[match.pair1_id].matches+=1;console.log(`üìä Pareja 1 acumulado: ${beforeGames}‚Üí${pairStats[match.pair1_id].games} juegos, ${beforeSets}‚Üí${pairStats[match.pair1_id].sets} sets`);}// Acumular estad√≠sticas para pareja 2\nif(pairStats[match.pair2_id]){const beforeGames=pairStats[match.pair2_id].games;const beforeSets=pairStats[match.pair2_id].sets;pairStats[match.pair2_id].games+=stats.pair2GamesWon;pairStats[match.pair2_id].sets+=stats.pair2SetsWon;pairStats[match.pair2_id].points+=stats.pair2TotalPoints;pairStats[match.pair2_id].matches+=1;console.log(`üìä Pareja 2 acumulado: ${beforeGames}‚Üí${pairStats[match.pair2_id].games} juegos, ${beforeSets}‚Üí${pairStats[match.pair2_id].sets} sets`);}console.log(`‚úÖ Partido ${match.id} procesado: ${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets, Empate: ${stats.isTie}`);processedMatches++;}}// Actualizar todas las parejas con las estad√≠sticas finales\nconsole.log(\"üìä === ACTUALIZANDO ESTAD√çSTICAS FINALES ===\");for(const pair of pairs){const stats=pairStats[pair.id];if(stats){var _pair$player3,_pair$player4,_pair$player5,_pair$player6;console.log(`üìä Actualizando ${(_pair$player3=pair.player1)===null||_pair$player3===void 0?void 0:_pair$player3.name} y ${(_pair$player4=pair.player2)===null||_pair$player4===void 0?void 0:_pair$player4.name}:`);console.log(`üìä Juegos: ${stats.games}, Sets: ${stats.sets}, Puntos: ${stats.points}, Partidos: ${stats.matches}`);await updatePair(pair.id,{games_won:stats.games,sets_won:stats.sets,points:stats.points,matches_played:stats.matches});console.log(`‚úÖ ${(_pair$player5=pair.player1)===null||_pair$player5===void 0?void 0:_pair$player5.name} y ${(_pair$player6=pair.player2)===null||_pair$player6===void 0?void 0:_pair$player6.name}: ${stats.games} juegos, ${stats.sets} sets, ${stats.points} puntos totales, ${stats.matches} partidos`);}}console.log(`‚úÖ Recalculaci√≥n completa: ${processedMatches} partidos procesados`);console.log(\"üîÑ === FIN REC√ÅLCULO COMPLETO ===\");return{success:true,message:`‚úÖ Estad√≠sticas recalculadas correctamente. ${processedMatches} partidos procesados.`};}catch(error){console.error(\"‚ùå Error recalculando estad√≠sticas:\",error);return{success:false,message:`Error recalculando estad√≠sticas: ${error}`};}}/**\n   * Calcula el ranking de parejas basado en SETS GANADOS como criterio principal\n   */static calculateRanking(pairs){return[...pairs].sort((a,b)=>{// Criterio 1: Sets ganados (descendente) - CRITERIO PRINCIPAL\nif(b.sets_won!==a.sets_won){return b.sets_won-a.sets_won;}// Criterio 2: Puntos totales (descendente)\nif(b.points!==a.points){return b.points-a.points;}// Criterio 3: Menos partidos jugados (mejor eficiencia)\nreturn a.matches_played-b.matches_played;});}}","map":{"version":3,"names":["updatePair","getPairs","getMatches","getGames","SetCalculator","calculateMatchStatistics","match","games","pair1GamesWon","pair2GamesWon","pair1TotalPoints","pair2TotalPoints","console","log","id","length","forEach","game","index","JSON","stringify","is_tie_break","tie_break_pair1_points","tie_break_pair2_points","pair1_games","pair2_games","pair1SetsWon","pair2SetsWon","isTie","updateMatchStatistics","pairs","stats","pair1","find","p","pair1_id","pair2","pair2_id","_pair1$player","_pair1$player2","player1","name","player2","games_won","sets_won","points","matches_played","_pair2$player","_pair2$player2","winnerId","undefined","message","_pair1$player3","_pair1$player4","_pair2$player3","_pair2$player4","winnerName","success","pair1Stats","gamesWon","setsWon","pair2Stats","error","recalculateAllStatistics","tournamentId","pair","_pair$player","_pair$player2","matches","filter","m","is_finished","pairStats","sets","processedMatches","beforeGames","beforeSets","_pair$player3","_pair$player4","_pair$player5","_pair$player6","calculateRanking","sort","a","b"],"sources":["/Users/nedev/padel-tournament-app/src/components/SetCalculator.tsx"],"sourcesContent":["import { Game, Match, Pair } from \"../lib/database\";\nimport { updatePair, getPairs, getMatches, getGames } from \"../lib/database\";\n\nexport interface SetCalculatorResult {\n  success: boolean;\n  message: string;\n  pair1Stats: {\n    gamesWon: number;\n    setsWon: number;\n    points: number;\n  };\n  pair2Stats: {\n    gamesWon: number;\n    setsWon: number;\n    points: number;\n  };\n  winnerId?: string;\n  isTie: boolean;\n}\n\nexport class SetCalculator {\n  /**\n   * Calcula estad√≠sticas detectando sets cuando una pareja llega a 6 puntos\n   */\n  static calculateMatchStatistics(\n    match: Match,\n    games: Game[]\n  ): {\n    pair1GamesWon: number;\n    pair2GamesWon: number;\n    pair1SetsWon: number;\n    pair2SetsWon: number;\n    pair1TotalPoints: number;\n    pair2TotalPoints: number;\n    isTie: boolean;\n  } {\n    let pair1GamesWon = 0;\n    let pair2GamesWon = 0;\n    let pair1TotalPoints = 0;\n    let pair2TotalPoints = 0;\n\n    console.log(\"üéØ === INICIO C√ÅLCULO DE ESTAD√çSTICAS ===\");\n    console.log(\"üéØ Partido ID:\", match.id);\n    console.log(\"üéØ Total de juegos:\", games.length);\n\n    // Contar juegos ganados y verificar sets por cada juego\n    games.forEach((game, index) => {\n      console.log(`üìä === JUEGO ${index + 1} ===`);\n      console.log(\"üìä Datos del juego:\", JSON.stringify(game, null, 2));\n\n      if (game.is_tie_break) {\n        console.log(\"üìä Es un tie-break\");\n        // Para tie-breaks\n        if (\n          game.tie_break_pair1_points >= 10 &&\n          game.tie_break_pair1_points - game.tie_break_pair2_points >= 2\n        ) {\n          pair1GamesWon++;\n          console.log(\n            `‚úÖ Pareja 1 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`\n          );\n        } else if (\n          game.tie_break_pair2_points >= 10 &&\n          game.tie_break_pair2_points - game.tie_break_pair1_points >= 2\n        ) {\n          pair2GamesWon++;\n          console.log(\n            `‚úÖ Pareja 2 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`\n          );\n        } else {\n          // Empate en tie-break - ambas ganan 1 juego\n          pair1GamesWon++;\n          pair2GamesWon++;\n          console.log(\n            `ü§ù Empate en tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points} - ambas ganan 1 juego`\n          );\n        }\n        pair1TotalPoints += game.tie_break_pair1_points;\n        pair2TotalPoints += game.tie_break_pair2_points;\n      } else {\n        console.log(\"üìä Es un juego normal\");\n        console.log(\n          `üìä Puntos Pareja 1: ${game.pair1_games}, Puntos Pareja 2: ${game.pair2_games}`\n        );\n\n        // Para juegos normales\n        if (game.pair1_games > game.pair2_games) {\n          pair1GamesWon++;\n          console.log(\n            `‚úÖ Pareja 1 gana juego: ${game.pair1_games}-${game.pair2_games}`\n          );\n        } else if (game.pair2_games > game.pair1_games) {\n          pair2GamesWon++;\n          console.log(\n            `‚úÖ Pareja 2 gana juego: ${game.pair1_games}-${game.pair2_games}`\n          );\n        } else {\n          // Empate en juego - ambas ganan 1 juego\n          pair1GamesWon++;\n          pair2GamesWon++;\n          console.log(\n            `ü§ù Empate en juego: ${game.pair1_games}-${game.pair2_games} - ambas ganan 1 juego`\n          );\n        }\n        pair1TotalPoints += game.pair1_games;\n        pair2TotalPoints += game.pair2_games;\n      }\n\n      console.log(\n        `üìä Despu√©s del juego ${\n          index + 1\n        }: Pareja 1 = ${pair1GamesWon} juegos, Pareja 2 = ${pair2GamesWon} juegos`\n      );\n    });\n\n    console.log(\"üîç === VERIFICACI√ìN DE SETS ===\");\n    console.log(`üîç Pareja 1 tiene ${pair1GamesWon} juegos ganados`);\n    console.log(`üîç Pareja 2 tiene ${pair2GamesWon} juegos ganados`);\n\n    // Calcular sets ganados - CRITERIO: Si en un juego una pareja llega a 6 puntos, gana 1 set\n    let pair1SetsWon = 0;\n    let pair2SetsWon = 0;\n\n    // Verificar cada juego para ver si alguna pareja lleg√≥ a 6 puntos\n    games.forEach((game, index) => {\n      if (!game.is_tie_break) {\n        console.log(`üîç Verificando juego ${index + 1} para sets:`);\n        console.log(\n          `üîç Pareja 1: ${game.pair1_games} puntos, Pareja 2: ${game.pair2_games} puntos`\n        );\n\n        // Si una pareja llega a 6 puntos en este juego, gana 1 set\n        if (game.pair1_games >= 6) {\n          pair1SetsWon = 1;\n          console.log(\n            `üèÜ Pareja 1 gana 1 SET en juego ${index + 1} con ${\n              game.pair1_games\n            } puntos`\n          );\n        }\n\n        if (game.pair2_games >= 6) {\n          pair2SetsWon = 1;\n          console.log(\n            `üèÜ Pareja 2 gana 1 SET en juego ${index + 1} con ${\n              game.pair2_games\n            } puntos`\n          );\n        }\n      }\n    });\n\n    console.log(\n      `üìä Sets finales: Pareja 1 = ${pair1SetsWon}, Pareja 2 = ${pair2SetsWon}`\n    );\n\n    // Determinar si es empate\n    const isTie =\n      pair1GamesWon === pair2GamesWon && pair1SetsWon === pair2SetsWon;\n\n    console.log(\"üìä === RESULTADO FINAL ===\");\n    console.log(`üìä Juegos: ${pair1GamesWon}-${pair2GamesWon}`);\n    console.log(`üìä Sets: ${pair1SetsWon}-${pair2SetsWon}`);\n    console.log(`üìä Puntos totales: ${pair1TotalPoints}-${pair2TotalPoints}`);\n    console.log(`üìä Es empate: ${isTie}`);\n    console.log(\"üéØ === FIN C√ÅLCULO DE ESTAD√çSTICAS ===\");\n\n    return {\n      pair1GamesWon,\n      pair2GamesWon,\n      pair1SetsWon,\n      pair2SetsWon,\n      pair1TotalPoints,\n      pair2TotalPoints,\n      isTie,\n    };\n  }\n\n  /**\n   * Actualiza estad√≠sticas de un partido espec√≠fico\n   */\n  static async updateMatchStatistics(\n    match: Match,\n    games: Game[],\n    pairs: Pair[]\n  ): Promise<SetCalculatorResult> {\n    try {\n      console.log(\"üîÑ === INICIO ACTUALIZACI√ìN DE ESTAD√çSTICAS ===\");\n\n      const stats = this.calculateMatchStatistics(match, games);\n      const pair1 = pairs.find((p) => p.id === match.pair1_id);\n      const pair2 = pairs.find((p) => p.id === match.pair2_id);\n\n      console.log(\"üìä Actualizando estad√≠sticas del partido:\", {\n        pair1GamesWon: stats.pair1GamesWon,\n        pair2GamesWon: stats.pair2GamesWon,\n        pair1SetsWon: stats.pair1SetsWon,\n        pair2SetsWon: stats.pair2SetsWon,\n        isTie: stats.isTie,\n      });\n\n      // ACTUALIZAR ESTAD√çSTICAS EN LA BASE DE DATOS INMEDIATAMENTE\n      if (pair1) {\n        console.log(\n          `üìä Actualizando Pareja 1: ${pair1.player1?.name} y ${pair1.player2?.name}`\n        );\n        console.log(\n          `üìä Estad√≠sticas actuales: ${pair1.games_won} juegos, ${pair1.sets_won} sets, ${pair1.points} puntos`\n        );\n        console.log(\n          `üìä Agregando: ${stats.pair1GamesWon} juegos, ${stats.pair1SetsWon} sets, ${stats.pair1TotalPoints} puntos`\n        );\n\n        await updatePair(pair1.id, {\n          games_won: pair1.games_won + stats.pair1GamesWon,\n          sets_won: pair1.sets_won + stats.pair1SetsWon,\n          points: pair1.points + stats.pair1TotalPoints,\n          matches_played: pair1.matches_played + 1,\n        });\n        console.log(\n          `‚úÖ Pareja 1 actualizada: ${stats.pair1GamesWon} juegos, ${stats.pair1SetsWon} sets`\n        );\n      }\n\n      if (pair2) {\n        console.log(\n          `üìä Actualizando Pareja 2: ${pair2.player1?.name} y ${pair2.player2?.name}`\n        );\n        console.log(\n          `üìä Estad√≠sticas actuales: ${pair2.games_won} juegos, ${pair2.sets_won} sets, ${pair2.points} puntos`\n        );\n        console.log(\n          `üìä Agregando: ${stats.pair2GamesWon} juegos, ${stats.pair2SetsWon} sets, ${stats.pair2TotalPoints} puntos`\n        );\n\n        await updatePair(pair2.id, {\n          games_won: pair2.games_won + stats.pair2GamesWon,\n          sets_won: pair2.sets_won + stats.pair2SetsWon,\n          points: pair2.points + stats.pair2TotalPoints,\n          matches_played: pair2.matches_played + 1,\n        });\n        console.log(\n          `‚úÖ Pareja 2 actualizada: ${stats.pair2GamesWon} juegos, ${stats.pair2SetsWon} sets`\n        );\n      }\n\n      // Determinar ganador basado en SETS GANADOS (criterio principal)\n      let winnerId: string | undefined;\n\n      if (stats.isTie) {\n        // Es un empate\n        winnerId = undefined;\n        console.log(\"ü§ù Partido termin√≥ en EMPATE\");\n      } else if (stats.pair1SetsWon > stats.pair2SetsWon) {\n        winnerId = match.pair1_id;\n        console.log(\"üèÜ Pareja 1 gana por sets\");\n      } else if (stats.pair2SetsWon > stats.pair1SetsWon) {\n        winnerId = match.pair2_id;\n        console.log(\"üèÜ Pareja 2 gana por sets\");\n      } else {\n        // Empate en sets - verificar por puntos\n        if (stats.pair1GamesWon > stats.pair2GamesWon) {\n          winnerId = match.pair1_id;\n          console.log(\"üèÜ Pareja 1 gana por puntos\");\n        } else if (stats.pair2GamesWon > stats.pair1GamesWon) {\n          winnerId = match.pair2_id;\n          console.log(\"üèÜ Pareja 2 gana por puntos\");\n        } else {\n          // Empate total\n          winnerId = undefined;\n          console.log(\"ü§ù Empate total\");\n        }\n      }\n\n      let message: string;\n      if (stats.isTie) {\n        message = `‚úÖ Partido finalizado.\\n\\nü§ù EMPATE (${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets)`;\n      } else if (winnerId) {\n        const winnerName =\n          winnerId === match.pair1_id\n            ? `${pair1?.player1?.name} y ${pair1?.player2?.name}`\n            : `${pair2?.player1?.name} y ${pair2?.player2?.name}`;\n        message = `‚úÖ Partido finalizado.\\n\\nüèÜ Ganador: ${winnerName} (${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets)`;\n      } else {\n        message = `‚úÖ Partido finalizado.\\n\\nü§ù Empate (${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets)`;\n      }\n\n      console.log(\"üîÑ === FIN ACTUALIZACI√ìN DE ESTAD√çSTICAS ===\");\n\n      return {\n        success: true,\n        message,\n        pair1Stats: {\n          gamesWon: stats.pair1GamesWon,\n          setsWon: stats.pair1SetsWon,\n          points: stats.pair1TotalPoints,\n        },\n        pair2Stats: {\n          gamesWon: stats.pair2GamesWon,\n          setsWon: stats.pair2SetsWon,\n          points: stats.pair2TotalPoints,\n        },\n        winnerId,\n        isTie: stats.isTie,\n      };\n    } catch (error) {\n      console.error(\"‚ùå Error actualizando estad√≠sticas:\", error);\n      return {\n        success: false,\n        message: `Error actualizando estad√≠sticas: ${error}`,\n        pair1Stats: { gamesWon: 0, setsWon: 0, points: 0 },\n        pair2Stats: { gamesWon: 0, setsWon: 0, points: 0 },\n        isTie: false,\n      };\n    }\n  }\n\n  /**\n   * Recalcula TODAS las estad√≠sticas desde cero para un torneo\n   */\n  static async recalculateAllStatistics(tournamentId: string): Promise<{\n    success: boolean;\n    message: string;\n  }> {\n    try {\n      console.log(\"üîÑ === INICIO REC√ÅLCULO COMPLETO ===\");\n      console.log(\"üîÑ Recalculando TODAS las estad√≠sticas desde cero...\");\n\n      // Obtener todas las parejas del torneo\n      const pairs = await getPairs(tournamentId);\n      console.log(`üìä Total de parejas: ${pairs.length}`);\n\n      // Resetear TODAS las estad√≠sticas a 0\n      console.log(\"üìä Reseteando estad√≠sticas de todas las parejas...\");\n      for (const pair of pairs) {\n        await updatePair(pair.id, {\n          games_won: 0,\n          sets_won: 0,\n          points: 0,\n          matches_played: 0,\n        });\n        console.log(\n          `‚úÖ Pareja ${pair.player1?.name} y ${pair.player2?.name} reseteada`\n        );\n      }\n\n      console.log(\"‚úÖ Todas las estad√≠sticas reseteadas a 0\");\n\n      // Obtener todos los partidos del torneo\n      const matches = await getMatches(tournamentId);\n      console.log(`üìã Total de partidos: ${matches.length}`);\n      console.log(\n        `üìã Partidos finalizados: ${\n          matches.filter((m) => m.is_finished).length\n        }`\n      );\n\n      // Contadores acumulados para cada pareja\n      const pairStats: {\n        [pairId: string]: {\n          games: number;\n          sets: number;\n          points: number;\n          matches: number;\n        };\n      } = {};\n\n      // Inicializar contadores\n      pairs.forEach((pair) => {\n        pairStats[pair.id] = { games: 0, sets: 0, points: 0, matches: 0 };\n      });\n\n      // Recalcular estad√≠sticas para cada partido finalizado\n      let processedMatches = 0;\n      for (const match of matches) {\n        if (match.is_finished) {\n          console.log(`üéØ === PROCESANDO PARTIDO ${match.id} ===`);\n          const games = await getGames(match.id);\n          console.log(`üìä Partido tiene ${games.length} juegos`);\n\n          const stats = this.calculateMatchStatistics(match, games);\n          console.log(\n            `üìà Estad√≠sticas calculadas: ${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets`\n          );\n\n          // Acumular estad√≠sticas para pareja 1\n          if (pairStats[match.pair1_id]) {\n            const beforeGames = pairStats[match.pair1_id].games;\n            const beforeSets = pairStats[match.pair1_id].sets;\n\n            pairStats[match.pair1_id].games += stats.pair1GamesWon;\n            pairStats[match.pair1_id].sets += stats.pair1SetsWon;\n            pairStats[match.pair1_id].points += stats.pair1TotalPoints;\n            pairStats[match.pair1_id].matches += 1;\n\n            console.log(\n              `üìä Pareja 1 acumulado: ${beforeGames}‚Üí${\n                pairStats[match.pair1_id].games\n              } juegos, ${beforeSets}‚Üí${pairStats[match.pair1_id].sets} sets`\n            );\n          }\n\n          // Acumular estad√≠sticas para pareja 2\n          if (pairStats[match.pair2_id]) {\n            const beforeGames = pairStats[match.pair2_id].games;\n            const beforeSets = pairStats[match.pair2_id].sets;\n\n            pairStats[match.pair2_id].games += stats.pair2GamesWon;\n            pairStats[match.pair2_id].sets += stats.pair2SetsWon;\n            pairStats[match.pair2_id].points += stats.pair2TotalPoints;\n            pairStats[match.pair2_id].matches += 1;\n\n            console.log(\n              `üìä Pareja 2 acumulado: ${beforeGames}‚Üí${\n                pairStats[match.pair2_id].games\n              } juegos, ${beforeSets}‚Üí${pairStats[match.pair2_id].sets} sets`\n            );\n          }\n\n          console.log(\n            `‚úÖ Partido ${match.id} procesado: ${stats.pair1GamesWon}-${stats.pair2GamesWon} juegos, ${stats.pair1SetsWon}-${stats.pair2SetsWon} sets, Empate: ${stats.isTie}`\n          );\n          processedMatches++;\n        }\n      }\n\n      // Actualizar todas las parejas con las estad√≠sticas finales\n      console.log(\"üìä === ACTUALIZANDO ESTAD√çSTICAS FINALES ===\");\n      for (const pair of pairs) {\n        const stats = pairStats[pair.id];\n        if (stats) {\n          console.log(\n            `üìä Actualizando ${pair.player1?.name} y ${pair.player2?.name}:`\n          );\n          console.log(\n            `üìä Juegos: ${stats.games}, Sets: ${stats.sets}, Puntos: ${stats.points}, Partidos: ${stats.matches}`\n          );\n\n          await updatePair(pair.id, {\n            games_won: stats.games,\n            sets_won: stats.sets,\n            points: stats.points,\n            matches_played: stats.matches,\n          });\n          console.log(\n            `‚úÖ ${pair.player1?.name} y ${pair.player2?.name}: ${stats.games} juegos, ${stats.sets} sets, ${stats.points} puntos totales, ${stats.matches} partidos`\n          );\n        }\n      }\n\n      console.log(\n        `‚úÖ Recalculaci√≥n completa: ${processedMatches} partidos procesados`\n      );\n      console.log(\"üîÑ === FIN REC√ÅLCULO COMPLETO ===\");\n      return {\n        success: true,\n        message: `‚úÖ Estad√≠sticas recalculadas correctamente. ${processedMatches} partidos procesados.`,\n      };\n    } catch (error) {\n      console.error(\"‚ùå Error recalculando estad√≠sticas:\", error);\n      return {\n        success: false,\n        message: `Error recalculando estad√≠sticas: ${error}`,\n      };\n    }\n  }\n\n  /**\n   * Calcula el ranking de parejas basado en SETS GANADOS como criterio principal\n   */\n  static calculateRanking(pairs: Pair[]): Pair[] {\n    return [...pairs].sort((a, b) => {\n      // Criterio 1: Sets ganados (descendente) - CRITERIO PRINCIPAL\n      if (b.sets_won !== a.sets_won) {\n        return b.sets_won - a.sets_won;\n      }\n\n      // Criterio 2: Puntos totales (descendente)\n      if (b.points !== a.points) {\n        return b.points - a.points;\n      }\n\n      // Criterio 3: Menos partidos jugados (mejor eficiencia)\n      return a.matches_played - b.matches_played;\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}