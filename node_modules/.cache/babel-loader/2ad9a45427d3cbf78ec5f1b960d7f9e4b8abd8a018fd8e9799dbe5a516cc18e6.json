{"ast":null,"code":"import { getGames } from \"../lib/database\";\nexport class TournamentWinnerCalculator {\n  /**\n   * Calcula el ganador del torneo basado en criterios espec√≠ficos\n   */\n  static async calculateTournamentWinner(pairs, matches) {\n    try {\n      console.log(\"üèÜ === CALCULANDO GANADOR DEL TORNEO ===\");\n\n      // Obtener todos los juegos de todos los partidos\n      const allGames = [];\n      for (const match of matches) {\n        if (match.is_finished) {\n          const matchGames = await getGames(match.id);\n          allGames.push(...matchGames);\n        }\n      }\n      console.log(`üìä Total de juegos encontrados: ${allGames.length}`);\n\n      // Calcular estad√≠sticas acumuladas para cada pareja\n      const pairStats = new Map();\n\n      // Inicializar estad√≠sticas\n      for (const pair of pairs) {\n        pairStats.set(pair.id, {\n          totalPoints: 0,\n          totalSets: 0,\n          totalGames: 0,\n          matchesPlayed: 0,\n          wins: 0\n        });\n      }\n\n      // Procesar cada partido finalizado\n      for (const match of matches) {\n        if (match.is_finished) {\n          const matchGames = allGames.filter(g => g.match_id === match.id);\n          if (matchGames.length > 0) {\n            // Calcular estad√≠sticas del partido\n            const matchStats = this.calculateMatchStats(matchGames);\n\n            // Acumular para pareja 1\n            const pair1Stats = pairStats.get(match.pair1_id);\n            pair1Stats.totalPoints += matchStats.pair1Points;\n            pair1Stats.totalSets += matchStats.pair1Sets;\n            pair1Stats.totalGames += matchStats.pair1Games;\n            pair1Stats.matchesPlayed += 1;\n            if (matchStats.pair1Points > matchStats.pair2Points) {\n              pair1Stats.wins += 1;\n            }\n\n            // Acumular para pareja 2\n            const pair2Stats = pairStats.get(match.pair2_id);\n            pair2Stats.totalPoints += matchStats.pair2Points;\n            pair2Stats.totalSets += matchStats.pair2Sets;\n            pair2Stats.totalGames += matchStats.pair2Games;\n            pair2Stats.matchesPlayed += 1;\n            if (matchStats.pair2Points > matchStats.pair1Points) {\n              pair2Stats.wins += 1;\n            }\n            console.log(`üìä Partido ${match.id}:`);\n            console.log(`   Pareja 1 (${match.pair1_id}): ${matchStats.pair1Points} pts, ${matchStats.pair1Sets} sets, ${matchStats.pair1Games} juegos`);\n            console.log(`   Pareja 2 (${match.pair2_id}): ${matchStats.pair2Points} pts, ${matchStats.pair2Sets} sets, ${matchStats.pair2Games} juegos`);\n          }\n        }\n      }\n\n      // Crear array de candidatos al ganador\n      const candidates = [];\n      for (const pair of pairs) {\n        const stats = pairStats.get(pair.id);\n        if (stats && stats.matchesPlayed > 0) {\n          var _pair$player, _pair$player2;\n          const winPercentage = stats.wins / stats.matchesPlayed * 100;\n          candidates.push({\n            pair,\n            totalPoints: stats.totalPoints,\n            totalSets: stats.totalSets,\n            totalGames: stats.totalGames,\n            matchesPlayed: stats.matchesPlayed,\n            winPercentage\n          });\n          console.log(`üèÜ Candidato: ${(_pair$player = pair.player1) === null || _pair$player === void 0 ? void 0 : _pair$player.name} y ${(_pair$player2 = pair.player2) === null || _pair$player2 === void 0 ? void 0 : _pair$player2.name}`);\n          console.log(`   Puntos totales: ${stats.totalPoints}`);\n          console.log(`   Sets totales: ${stats.totalSets}`);\n          console.log(`   Juegos totales: ${stats.totalGames}`);\n          console.log(`   Partidos jugados: ${stats.matchesPlayed}`);\n          console.log(`   Porcentaje de victorias: ${winPercentage.toFixed(1)}%`);\n        }\n      }\n\n      // Ordenar candidatos por criterios\n      candidates.sort((a, b) => {\n        // Criterio 1: Puntos totales (descendente) - CRITERIO PRINCIPAL\n        if (a.totalPoints !== b.totalPoints) {\n          return b.totalPoints - a.totalPoints;\n        }\n\n        // Criterio 2: Sets ganados (descendente) - CRITERIO DE DESEMPATE\n        if (a.totalSets !== b.totalSets) {\n          return b.totalSets - a.totalSets;\n        }\n\n        // Criterio 3: Juegos ganados (descendente)\n        if (a.totalGames !== b.totalGames) {\n          return b.totalGames - a.totalGames;\n        }\n\n        // Criterio 4: Porcentaje de victorias (descendente)\n        if (a.winPercentage !== b.winPercentage) {\n          return b.winPercentage - a.winPercentage;\n        }\n\n        // Criterio 5: Menos partidos jugados (mejor eficiencia)\n        return a.matchesPlayed - b.matchesPlayed;\n      });\n      const winner = candidates.length > 0 ? candidates[0] : null;\n      if (winner) {\n        var _winner$pair$player, _winner$pair$player2;\n        console.log(`üèÜ GANADOR DEL TORNEO: ${(_winner$pair$player = winner.pair.player1) === null || _winner$pair$player === void 0 ? void 0 : _winner$pair$player.name} y ${(_winner$pair$player2 = winner.pair.player2) === null || _winner$pair$player2 === void 0 ? void 0 : _winner$pair$player2.name}`);\n        console.log(`   Puntos totales: ${winner.totalPoints}`);\n        console.log(`   Sets totales: ${winner.totalSets}`);\n        console.log(`   Juegos totales: ${winner.totalGames}`);\n        console.log(`   Partidos jugados: ${winner.matchesPlayed}`);\n        console.log(`   Porcentaje de victorias: ${winner.winPercentage.toFixed(1)}%`);\n      } else {\n        console.log(\"‚ùå No se encontr√≥ ganador\");\n      }\n      console.log(\"üèÜ === FIN CALCULACI√ìN GANADOR ===\");\n      return winner;\n    } catch (error) {\n      console.error(\"‚ùå Error al calcular ganador del torneo:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Calcula las estad√≠sticas de un partido basado en sus juegos\n   */\n  static calculateMatchStats(games) {\n    let pair1Points = 0;\n    let pair2Points = 0;\n    let pair1Sets = 0;\n    let pair2Sets = 0;\n    let pair1Games = 0;\n    let pair2Games = 0;\n    for (const game of games) {\n      const pair1GamePoints = game.pair1_games;\n      const pair2GamePoints = game.pair2_games;\n\n      // Sumar puntos del juego\n      pair1Points += pair1GamePoints;\n      pair2Points += pair2GamePoints;\n\n      // Determinar ganador del juego\n      if (pair1GamePoints > pair2GamePoints) {\n        pair1Games += 1;\n        // Si lleg√≥ a 6 puntos, gana un set\n        if (pair1GamePoints >= 6) {\n          pair1Sets += 1;\n        }\n      } else if (pair2GamePoints > pair1GamePoints) {\n        pair2Games += 1;\n        // Si lleg√≥ a 6 puntos, gana un set\n        if (pair2GamePoints >= 6) {\n          pair2Sets += 1;\n        }\n      }\n      // Si es empate, no se suma juego ni set\n    }\n    return {\n      pair1Points,\n      pair2Points,\n      pair1Sets,\n      pair2Sets,\n      pair1Games,\n      pair2Games\n    };\n  }\n}","map":{"version":3,"names":["getGames","TournamentWinnerCalculator","calculateTournamentWinner","pairs","matches","console","log","allGames","match","is_finished","matchGames","id","push","length","pairStats","Map","pair","set","totalPoints","totalSets","totalGames","matchesPlayed","wins","filter","g","match_id","matchStats","calculateMatchStats","pair1Stats","get","pair1_id","pair1Points","pair1Sets","pair1Games","pair2Points","pair2Stats","pair2_id","pair2Sets","pair2Games","candidates","stats","_pair$player","_pair$player2","winPercentage","player1","name","player2","toFixed","sort","a","b","winner","_winner$pair$player","_winner$pair$player2","error","games","game","pair1GamePoints","pair1_games","pair2GamePoints","pair2_games"],"sources":["/Users/nedev/padel-tournament-app/src/components/TournamentWinnerCalculator.tsx"],"sourcesContent":["import React from \"react\";\nimport { Pair, Match, Game } from \"../lib/database\";\nimport { getGames } from \"../lib/database\";\n\nexport interface TournamentWinner {\n  pair: Pair;\n  totalPoints: number;\n  totalSets: number;\n  totalGames: number;\n  matchesPlayed: number;\n  winPercentage: number;\n}\n\nexport class TournamentWinnerCalculator {\n  /**\n   * Calcula el ganador del torneo basado en criterios espec√≠ficos\n   */\n  static async calculateTournamentWinner(\n    pairs: Pair[],\n    matches: Match[]\n  ): Promise<TournamentWinner | null> {\n    try {\n      console.log(\"üèÜ === CALCULANDO GANADOR DEL TORNEO ===\");\n\n      // Obtener todos los juegos de todos los partidos\n      const allGames: Game[] = [];\n      for (const match of matches) {\n        if (match.is_finished) {\n          const matchGames = await getGames(match.id);\n          allGames.push(...matchGames);\n        }\n      }\n\n      console.log(`üìä Total de juegos encontrados: ${allGames.length}`);\n\n      // Calcular estad√≠sticas acumuladas para cada pareja\n      const pairStats = new Map<\n        string,\n        {\n          totalPoints: number;\n          totalSets: number;\n          totalGames: number;\n          matchesPlayed: number;\n          wins: number;\n        }\n      >();\n\n      // Inicializar estad√≠sticas\n      for (const pair of pairs) {\n        pairStats.set(pair.id, {\n          totalPoints: 0,\n          totalSets: 0,\n          totalGames: 0,\n          matchesPlayed: 0,\n          wins: 0,\n        });\n      }\n\n      // Procesar cada partido finalizado\n      for (const match of matches) {\n        if (match.is_finished) {\n          const matchGames = allGames.filter((g) => g.match_id === match.id);\n\n          if (matchGames.length > 0) {\n            // Calcular estad√≠sticas del partido\n            const matchStats = this.calculateMatchStats(matchGames);\n\n            // Acumular para pareja 1\n            const pair1Stats = pairStats.get(match.pair1_id)!;\n            pair1Stats.totalPoints += matchStats.pair1Points;\n            pair1Stats.totalSets += matchStats.pair1Sets;\n            pair1Stats.totalGames += matchStats.pair1Games;\n            pair1Stats.matchesPlayed += 1;\n            if (matchStats.pair1Points > matchStats.pair2Points) {\n              pair1Stats.wins += 1;\n            }\n\n            // Acumular para pareja 2\n            const pair2Stats = pairStats.get(match.pair2_id)!;\n            pair2Stats.totalPoints += matchStats.pair2Points;\n            pair2Stats.totalSets += matchStats.pair2Sets;\n            pair2Stats.totalGames += matchStats.pair2Games;\n            pair2Stats.matchesPlayed += 1;\n            if (matchStats.pair2Points > matchStats.pair1Points) {\n              pair2Stats.wins += 1;\n            }\n\n            console.log(`üìä Partido ${match.id}:`);\n            console.log(\n              `   Pareja 1 (${match.pair1_id}): ${matchStats.pair1Points} pts, ${matchStats.pair1Sets} sets, ${matchStats.pair1Games} juegos`\n            );\n            console.log(\n              `   Pareja 2 (${match.pair2_id}): ${matchStats.pair2Points} pts, ${matchStats.pair2Sets} sets, ${matchStats.pair2Games} juegos`\n            );\n          }\n        }\n      }\n\n      // Crear array de candidatos al ganador\n      const candidates: TournamentWinner[] = [];\n\n      for (const pair of pairs) {\n        const stats = pairStats.get(pair.id);\n        if (stats && stats.matchesPlayed > 0) {\n          const winPercentage = (stats.wins / stats.matchesPlayed) * 100;\n\n          candidates.push({\n            pair,\n            totalPoints: stats.totalPoints,\n            totalSets: stats.totalSets,\n            totalGames: stats.totalGames,\n            matchesPlayed: stats.matchesPlayed,\n            winPercentage,\n          });\n\n          console.log(\n            `üèÜ Candidato: ${pair.player1?.name} y ${pair.player2?.name}`\n          );\n          console.log(`   Puntos totales: ${stats.totalPoints}`);\n          console.log(`   Sets totales: ${stats.totalSets}`);\n          console.log(`   Juegos totales: ${stats.totalGames}`);\n          console.log(`   Partidos jugados: ${stats.matchesPlayed}`);\n          console.log(\n            `   Porcentaje de victorias: ${winPercentage.toFixed(1)}%`\n          );\n        }\n      }\n\n      // Ordenar candidatos por criterios\n      candidates.sort((a, b) => {\n        // Criterio 1: Puntos totales (descendente) - CRITERIO PRINCIPAL\n        if (a.totalPoints !== b.totalPoints) {\n          return b.totalPoints - a.totalPoints;\n        }\n\n        // Criterio 2: Sets ganados (descendente) - CRITERIO DE DESEMPATE\n        if (a.totalSets !== b.totalSets) {\n          return b.totalSets - a.totalSets;\n        }\n\n        // Criterio 3: Juegos ganados (descendente)\n        if (a.totalGames !== b.totalGames) {\n          return b.totalGames - a.totalGames;\n        }\n\n        // Criterio 4: Porcentaje de victorias (descendente)\n        if (a.winPercentage !== b.winPercentage) {\n          return b.winPercentage - a.winPercentage;\n        }\n\n        // Criterio 5: Menos partidos jugados (mejor eficiencia)\n        return a.matchesPlayed - b.matchesPlayed;\n      });\n\n      const winner = candidates.length > 0 ? candidates[0] : null;\n\n      if (winner) {\n        console.log(\n          `üèÜ GANADOR DEL TORNEO: ${winner.pair.player1?.name} y ${winner.pair.player2?.name}`\n        );\n        console.log(`   Puntos totales: ${winner.totalPoints}`);\n        console.log(`   Sets totales: ${winner.totalSets}`);\n        console.log(`   Juegos totales: ${winner.totalGames}`);\n        console.log(`   Partidos jugados: ${winner.matchesPlayed}`);\n        console.log(\n          `   Porcentaje de victorias: ${winner.winPercentage.toFixed(1)}%`\n        );\n      } else {\n        console.log(\"‚ùå No se encontr√≥ ganador\");\n      }\n\n      console.log(\"üèÜ === FIN CALCULACI√ìN GANADOR ===\");\n      return winner;\n    } catch (error) {\n      console.error(\"‚ùå Error al calcular ganador del torneo:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Calcula las estad√≠sticas de un partido basado en sus juegos\n   */\n  private static calculateMatchStats(games: Game[]): {\n    pair1Points: number;\n    pair2Points: number;\n    pair1Sets: number;\n    pair2Sets: number;\n    pair1Games: number;\n    pair2Games: number;\n  } {\n    let pair1Points = 0;\n    let pair2Points = 0;\n    let pair1Sets = 0;\n    let pair2Sets = 0;\n    let pair1Games = 0;\n    let pair2Games = 0;\n\n    for (const game of games) {\n      const pair1GamePoints = game.pair1_games;\n      const pair2GamePoints = game.pair2_games;\n\n      // Sumar puntos del juego\n      pair1Points += pair1GamePoints;\n      pair2Points += pair2GamePoints;\n\n      // Determinar ganador del juego\n      if (pair1GamePoints > pair2GamePoints) {\n        pair1Games += 1;\n        // Si lleg√≥ a 6 puntos, gana un set\n        if (pair1GamePoints >= 6) {\n          pair1Sets += 1;\n        }\n      } else if (pair2GamePoints > pair1GamePoints) {\n        pair2Games += 1;\n        // Si lleg√≥ a 6 puntos, gana un set\n        if (pair2GamePoints >= 6) {\n          pair2Sets += 1;\n        }\n      }\n      // Si es empate, no se suma juego ni set\n    }\n\n    return {\n      pair1Points,\n      pair2Points,\n      pair1Sets,\n      pair2Sets,\n      pair1Games,\n      pair2Games,\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}