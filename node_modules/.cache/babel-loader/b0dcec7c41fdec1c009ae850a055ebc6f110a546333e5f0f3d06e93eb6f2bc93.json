{"ast":null,"code":"import{updateMatch}from\"../lib/database\";import{MatchResultCalculator}from\"./MatchResultCalculator\";export class FlexibleMatchFinisher{/**\n   * Finaliza un partido con l√≥gica simple que suma juegos tal como est√°n\n   */static async finishMatch(match,games,pairs,onUpdate){console.log(\"=== FINALIZANDO PARTIDO CON FLEXIBLEMATCHFINISHER ===\");console.log(\"Match:\",match.id);console.log(\"Games:\",games.length);try{// Validar que hay juegos\nif(games.length===0){return{success:false,message:\"No se puede finalizar un partido sin juegos\",isTie:false,pair1Games:0,pair2Games:0,pair1TotalPoints:0,pair2TotalPoints:0};}// Calcular juegos ganados por cada pareja - L√ìGICA SIMPLE\nlet pair1Games=0;let pair2Games=0;let pair1TotalPoints=0;let pair2TotalPoints=0;games.forEach((game,index)=>{console.log(`Analizando Juego ${index+1}:`,{pair1_games:game.pair1_games,pair2_games:game.pair2_games,is_tie_break:game.is_tie_break,tie_break_pair1:game.tie_break_pair1_points,tie_break_pair2:game.tie_break_pair2_points});if(game.is_tie_break){// Para tie-breaks - L√ìGICA SIMPLE\nif(game.tie_break_pair1_points>=10&&game.tie_break_pair1_points-game.tie_break_pair2_points>=2){pair1Games++;console.log(\"Tie-break ganado por pareja 1\");}else if(game.tie_break_pair2_points>=10&&game.tie_break_pair2_points-game.tie_break_pair1_points>=2){pair2Games++;console.log(\"Tie-break ganado por pareja 2\");}else{// EMPATE EN TIE-BREAK - AMBAS PAREJAS GANAN 1 JUEGO\npair1Games++;pair2Games++;console.log(\"Tie-break empatado - ambas parejas ganan 1 juego\");}pair1TotalPoints+=game.tie_break_pair1_points;pair2TotalPoints+=game.tie_break_pair2_points;}else{// Para juegos normales - L√ìGICA SIMPLE\nif(game.pair1_games>game.pair2_games){pair1Games++;console.log(\"Juego normal ganado por pareja 1\");}else if(game.pair2_games>game.pair1_games){pair2Games++;console.log(\"Juego normal ganado por pareja 2\");}else{// EMPATE EN JUEGO - AMBAS PAREJAS GANAN 1 JUEGO\npair1Games++;pair2Games++;console.log(\"Juego normal empatado - ambas parejas ganan 1 juego\");}pair1TotalPoints+=game.pair1_games;pair2TotalPoints+=game.pair2_games;}});console.log(\"Resultado calculado:\",{pair1Games,pair2Games,pair1TotalPoints,pair2TotalPoints});// Determinar si es empate (incluyendo empates parciales)\nconst isTie=pair1Games===pair2Games;const winnerId=isTie?undefined:pair1Games>pair2Games?match.pair1_id:match.pair2_id;console.log(\"Decisi√≥n final:\",{isTie,winnerId,pair1Games,pair2Games});// Actualizar el partido en la base de datos\nawait updateMatch(match.id,{winner_id:winnerId,is_finished:true});console.log(\"‚úÖ Partido actualizado en base de datos\");// ACUMULAR estad√≠sticas del partido (solo al finalizar)\nconst statsResult=await MatchResultCalculator.accumulateMatchStatistics(match,games,pairs);if(statsResult.success){console.log(\"‚úÖ Estad√≠sticas actualizadas correctamente\");}else{console.error(\"‚ùå Error actualizando estad√≠sticas:\",statsResult.message);}// Usar los valores calculados por CorrectStatisticsCalculator\nconst finalPair1Games=statsResult.pair1Stats.gamesWon;const finalPair2Games=statsResult.pair2Stats.gamesWon;const finalIsTie=statsResult.isTie;const finalWinnerId=statsResult.winnerId;// Notificar al componente padre para actualizar la tabla autom√°ticamente\nonUpdate();// Generar mensaje de √©xito usando el resultado de estad√≠sticas\nconst message=statsResult.success?statsResult.message:`‚úÖ Partido finalizado exitosamente.\\n\\nüìä Resultado: ${finalPair1Games}-${finalPair2Games} juegos`;return{success:true,message,isTie:finalIsTie,winnerId:finalWinnerId,pair1Games:finalPair1Games,pair2Games:finalPair2Games,pair1TotalPoints:statsResult.pair1Stats.points,pair2TotalPoints:statsResult.pair2Stats.points};}catch(error){console.error(\"‚ùå Error finalizando partido:\",error);return{success:false,message:`Error al finalizar el partido: ${error}`,isTie:false,pair1Games:0,pair2Games:0,pair1TotalPoints:0,pair2TotalPoints:0};}}/**\n   * Valida si se puede finalizar un partido (l√≥gica ultra permisiva)\n   */static canFinishMatch(games){if(games.length===0){return false;}// Verificar que todos los juegos tengan marcadores v√°lidos (permitir 0)\nfor(const game of games){if(game.is_tie_break){if(game.tie_break_pair1_points<0||game.tie_break_pair2_points<0){return false;}}else{if(game.pair1_games<0||game.pair2_games<0){return false;}}}return true;}/**\n   * Calcula el estado actual del partido para mostrar\n   */static calculateMatchStatus(match,games,pairs){if(games.length===0){return{pair1Games:0,pair2Games:0,isTie:false,canFinish:false,reason:\"No hay juegos registrados\"};}let pair1Games=0;let pair2Games=0;games.forEach((game,index)=>{if(game.is_tie_break){if(game.tie_break_pair1_points>=10&&game.tie_break_pair1_points-game.tie_break_pair2_points>=2){pair1Games++;}else if(game.tie_break_pair2_points>=10&&game.tie_break_pair2_points-game.tie_break_pair1_points>=2){pair2Games++;}else{// EMPATE EN TIE-BREAK - AMBAS PAREJAS GANAN 1 JUEGO\npair1Games++;pair2Games++;}}else{if(game.pair1_games>game.pair2_games){pair1Games++;}else if(game.pair2_games>game.pair1_games){pair2Games++;}else{// EMPATE EN JUEGO - AMBAS PAREJAS GANAN 1 JUEGO\npair1Games++;pair2Games++;}}});const isTie=pair1Games===pair2Games;const winnerId=isTie?undefined:pair1Games>pair2Games?match.pair1_id:match.pair2_id;const canFinish=this.canFinishMatch(games);const reason=canFinish?\"Puede finalizar\":\"Marcadores inv√°lidos\";return{pair1Games,pair2Games,isTie,winnerId,canFinish,reason};}}","map":{"version":3,"names":["updateMatch","MatchResultCalculator","FlexibleMatchFinisher","finishMatch","match","games","pairs","onUpdate","console","log","id","length","success","message","isTie","pair1Games","pair2Games","pair1TotalPoints","pair2TotalPoints","forEach","game","index","pair1_games","pair2_games","is_tie_break","tie_break_pair1","tie_break_pair1_points","tie_break_pair2","tie_break_pair2_points","winnerId","undefined","pair1_id","pair2_id","winner_id","is_finished","statsResult","accumulateMatchStatistics","error","finalPair1Games","pair1Stats","gamesWon","finalPair2Games","pair2Stats","finalIsTie","finalWinnerId","points","canFinishMatch","calculateMatchStatus","canFinish","reason"],"sources":["/Users/nedev/padel-tournament-app/src/components/FlexibleMatchFinisher.tsx"],"sourcesContent":["import { Game, Match, Pair } from \"../lib/database\";\nimport { updateMatch } from \"../lib/database\";\nimport { MatchResultCalculator } from \"./MatchResultCalculator\";\n\nexport interface FlexibleMatchResult {\n  success: boolean;\n  message: string;\n  isTie: boolean;\n  winnerId?: string;\n  pair1Games: number;\n  pair2Games: number;\n  pair1TotalPoints: number;\n  pair2TotalPoints: number;\n}\n\nexport class FlexibleMatchFinisher {\n  /**\n   * Finaliza un partido con l√≥gica simple que suma juegos tal como est√°n\n   */\n  static async finishMatch(\n    match: Match,\n    games: Game[],\n    pairs: Pair[],\n    onUpdate: () => void\n  ): Promise<FlexibleMatchResult> {\n    console.log(\"=== FINALIZANDO PARTIDO CON FLEXIBLEMATCHFINISHER ===\");\n    console.log(\"Match:\", match.id);\n    console.log(\"Games:\", games.length);\n\n    try {\n      // Validar que hay juegos\n      if (games.length === 0) {\n        return {\n          success: false,\n          message: \"No se puede finalizar un partido sin juegos\",\n          isTie: false,\n          pair1Games: 0,\n          pair2Games: 0,\n          pair1TotalPoints: 0,\n          pair2TotalPoints: 0,\n        };\n      }\n\n      // Calcular juegos ganados por cada pareja - L√ìGICA SIMPLE\n      let pair1Games = 0;\n      let pair2Games = 0;\n      let pair1TotalPoints = 0;\n      let pair2TotalPoints = 0;\n\n      games.forEach((game, index) => {\n        console.log(`Analizando Juego ${index + 1}:`, {\n          pair1_games: game.pair1_games,\n          pair2_games: game.pair2_games,\n          is_tie_break: game.is_tie_break,\n          tie_break_pair1: game.tie_break_pair1_points,\n          tie_break_pair2: game.tie_break_pair2_points,\n        });\n\n        if (game.is_tie_break) {\n          // Para tie-breaks - L√ìGICA SIMPLE\n          if (\n            game.tie_break_pair1_points >= 10 &&\n            game.tie_break_pair1_points - game.tie_break_pair2_points >= 2\n          ) {\n            pair1Games++;\n            console.log(\"Tie-break ganado por pareja 1\");\n          } else if (\n            game.tie_break_pair2_points >= 10 &&\n            game.tie_break_pair2_points - game.tie_break_pair1_points >= 2\n          ) {\n            pair2Games++;\n            console.log(\"Tie-break ganado por pareja 2\");\n          } else {\n            // EMPATE EN TIE-BREAK - AMBAS PAREJAS GANAN 1 JUEGO\n            pair1Games++;\n            pair2Games++;\n            console.log(\"Tie-break empatado - ambas parejas ganan 1 juego\");\n          }\n          pair1TotalPoints += game.tie_break_pair1_points;\n          pair2TotalPoints += game.tie_break_pair2_points;\n        } else {\n          // Para juegos normales - L√ìGICA SIMPLE\n          if (game.pair1_games > game.pair2_games) {\n            pair1Games++;\n            console.log(\"Juego normal ganado por pareja 1\");\n          } else if (game.pair2_games > game.pair1_games) {\n            pair2Games++;\n            console.log(\"Juego normal ganado por pareja 2\");\n          } else {\n            // EMPATE EN JUEGO - AMBAS PAREJAS GANAN 1 JUEGO\n            pair1Games++;\n            pair2Games++;\n            console.log(\"Juego normal empatado - ambas parejas ganan 1 juego\");\n          }\n          pair1TotalPoints += game.pair1_games;\n          pair2TotalPoints += game.pair2_games;\n        }\n      });\n\n      console.log(\"Resultado calculado:\", {\n        pair1Games,\n        pair2Games,\n        pair1TotalPoints,\n        pair2TotalPoints,\n      });\n\n      // Determinar si es empate (incluyendo empates parciales)\n      const isTie = pair1Games === pair2Games;\n      const winnerId = isTie\n        ? undefined\n        : pair1Games > pair2Games\n        ? match.pair1_id\n        : match.pair2_id;\n\n      console.log(\"Decisi√≥n final:\", {\n        isTie,\n        winnerId,\n        pair1Games,\n        pair2Games,\n      });\n\n      // Actualizar el partido en la base de datos\n      await updateMatch(match.id, {\n        winner_id: winnerId,\n        is_finished: true,\n      });\n\n      console.log(\"‚úÖ Partido actualizado en base de datos\");\n\n      // ACUMULAR estad√≠sticas del partido (solo al finalizar)\n      const statsResult = await MatchResultCalculator.accumulateMatchStatistics(\n        match,\n        games,\n        pairs\n      );\n\n      if (statsResult.success) {\n        console.log(\"‚úÖ Estad√≠sticas actualizadas correctamente\");\n      } else {\n        console.error(\n          \"‚ùå Error actualizando estad√≠sticas:\",\n          statsResult.message\n        );\n      }\n\n      // Usar los valores calculados por CorrectStatisticsCalculator\n      const finalPair1Games = statsResult.pair1Stats.gamesWon;\n      const finalPair2Games = statsResult.pair2Stats.gamesWon;\n      const finalIsTie = statsResult.isTie;\n      const finalWinnerId = statsResult.winnerId;\n\n      // Notificar al componente padre para actualizar la tabla autom√°ticamente\n      onUpdate();\n\n      // Generar mensaje de √©xito usando el resultado de estad√≠sticas\n      const message = statsResult.success\n        ? statsResult.message\n        : `‚úÖ Partido finalizado exitosamente.\\n\\nüìä Resultado: ${finalPair1Games}-${finalPair2Games} juegos`;\n\n      return {\n        success: true,\n        message,\n        isTie: finalIsTie,\n        winnerId: finalWinnerId,\n        pair1Games: finalPair1Games,\n        pair2Games: finalPair2Games,\n        pair1TotalPoints: statsResult.pair1Stats.points,\n        pair2TotalPoints: statsResult.pair2Stats.points,\n      };\n    } catch (error) {\n      console.error(\"‚ùå Error finalizando partido:\", error);\n      return {\n        success: false,\n        message: `Error al finalizar el partido: ${error}`,\n        isTie: false,\n        pair1Games: 0,\n        pair2Games: 0,\n        pair1TotalPoints: 0,\n        pair2TotalPoints: 0,\n      };\n    }\n  }\n\n  /**\n   * Valida si se puede finalizar un partido (l√≥gica ultra permisiva)\n   */\n  static canFinishMatch(games: Game[]): boolean {\n    if (games.length === 0) {\n      return false;\n    }\n\n    // Verificar que todos los juegos tengan marcadores v√°lidos (permitir 0)\n    for (const game of games) {\n      if (game.is_tie_break) {\n        if (\n          game.tie_break_pair1_points < 0 ||\n          game.tie_break_pair2_points < 0\n        ) {\n          return false;\n        }\n      } else {\n        if (game.pair1_games < 0 || game.pair2_games < 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Calcula el estado actual del partido para mostrar\n   */\n  static calculateMatchStatus(\n    match: Match,\n    games: Game[],\n    pairs: Pair[]\n  ): {\n    pair1Games: number;\n    pair2Games: number;\n    isTie: boolean;\n    winnerId?: string;\n    canFinish: boolean;\n    reason: string;\n  } {\n    if (games.length === 0) {\n      return {\n        pair1Games: 0,\n        pair2Games: 0,\n        isTie: false,\n        canFinish: false,\n        reason: \"No hay juegos registrados\",\n      };\n    }\n\n    let pair1Games = 0;\n    let pair2Games = 0;\n\n    games.forEach((game, index) => {\n      if (game.is_tie_break) {\n        if (\n          game.tie_break_pair1_points >= 10 &&\n          game.tie_break_pair1_points - game.tie_break_pair2_points >= 2\n        ) {\n          pair1Games++;\n        } else if (\n          game.tie_break_pair2_points >= 10 &&\n          game.tie_break_pair2_points - game.tie_break_pair1_points >= 2\n        ) {\n          pair2Games++;\n        } else {\n          // EMPATE EN TIE-BREAK - AMBAS PAREJAS GANAN 1 JUEGO\n          pair1Games++;\n          pair2Games++;\n        }\n      } else {\n        if (game.pair1_games > game.pair2_games) {\n          pair1Games++;\n        } else if (game.pair2_games > game.pair1_games) {\n          pair2Games++;\n        } else {\n          // EMPATE EN JUEGO - AMBAS PAREJAS GANAN 1 JUEGO\n          pair1Games++;\n          pair2Games++;\n        }\n      }\n    });\n\n    const isTie = pair1Games === pair2Games;\n    const winnerId = isTie\n      ? undefined\n      : pair1Games > pair2Games\n      ? match.pair1_id\n      : match.pair2_id;\n\n    const canFinish = this.canFinishMatch(games);\n    const reason = canFinish ? \"Puede finalizar\" : \"Marcadores inv√°lidos\";\n\n    return {\n      pair1Games,\n      pair2Games,\n      isTie,\n      winnerId,\n      canFinish,\n      reason,\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}