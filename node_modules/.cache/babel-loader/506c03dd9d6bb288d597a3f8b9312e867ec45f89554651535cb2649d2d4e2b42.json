{"ast":null,"code":"import { updatePair, getPairs, getMatches, getGames } from \"../lib/database\";\nexport class MatchResultCalculator {\n  /**\n   * Calcula estadísticas de un partido específico\n   */\n  static calculateMatchStatistics(match, games) {\n    console.log(\"🎯 === CÁLCULO DE ESTADÍSTICAS DEL PARTIDO ===\");\n    console.log(\"🎯 Partido ID:\", match.id);\n    console.log(\"🎯 Total de juegos:\", games.length);\n    let pair1GamesWon = 0;\n    let pair2GamesWon = 0;\n    let pair1TotalPoints = 0;\n    let pair2TotalPoints = 0;\n    let pair1SetsWon = 0;\n    let pair2SetsWon = 0;\n\n    // Procesar cada juego del partido\n    games.forEach((game, index) => {\n      console.log(`📊 === JUEGO ${index + 1} ===`);\n      console.log(\"📊 Datos del juego:\", {\n        pair1_games: game.pair1_games,\n        pair2_games: game.pair2_games,\n        is_tie_break: game.is_tie_break,\n        tie_break_pair1: game.tie_break_pair1_points,\n        tie_break_pair2: game.tie_break_pair2_points\n      });\n      if (game.is_tie_break) {\n        console.log(\"📊 Es un tie-break\");\n        // Para tie-breaks\n        if (game.tie_break_pair1_points > game.tie_break_pair2_points) {\n          pair1GamesWon++;\n          console.log(`✅ Pareja 1 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`);\n        } else if (game.tie_break_pair2_points > game.tie_break_pair1_points) {\n          pair2GamesWon++;\n          console.log(`✅ Pareja 2 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`);\n        } else {\n          console.log(`🤝 Empate en tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`);\n        }\n        pair1TotalPoints += game.tie_break_pair1_points || 0;\n        pair2TotalPoints += game.tie_break_pair2_points || 0;\n      } else {\n        console.log(\"📊 Es un juego normal\");\n        console.log(`📊 Puntos Pareja 1: ${game.pair1_games}, Puntos Pareja 2: ${game.pair2_games}`);\n\n        // Para juegos normales\n        if (game.pair1_games > game.pair2_games) {\n          pair1GamesWon++;\n          console.log(`✅ Pareja 1 gana juego: ${game.pair1_games}-${game.pair2_games}`);\n        } else if (game.pair2_games > game.pair1_games) {\n          pair2GamesWon++;\n          console.log(`✅ Pareja 2 gana juego: ${game.pair1_games}-${game.pair2_games}`);\n        } else {\n          console.log(`🤝 Empate en juego: ${game.pair1_games}-${game.pair2_games}`);\n        }\n        pair1TotalPoints += game.pair1_games;\n        pair2TotalPoints += game.pair2_games;\n      }\n\n      // Verificar si alguna pareja llegó a 6 puntos en este juego (gana 1 set)\n      if (!game.is_tie_break) {\n        if (game.pair1_games >= 6) {\n          pair1SetsWon++;\n          console.log(`🏆 Pareja 1 gana 1 SET en juego ${index + 1} con ${game.pair1_games} puntos`);\n        }\n        if (game.pair2_games >= 6) {\n          pair2SetsWon++;\n          console.log(`🏆 Pareja 2 gana 1 SET en juego ${index + 1} con ${game.pair2_games} puntos`);\n        }\n      }\n      console.log(`📊 Después del juego ${index + 1}: Pareja 1 = ${pair1GamesWon} juegos, Pareja 2 = ${pair2GamesWon} juegos`);\n    });\n    console.log(\"🔍 === RESULTADO FINAL DEL PARTIDO ===\");\n    console.log(`🔍 Juegos: Pareja 1 = ${pair1GamesWon}, Pareja 2 = ${pair2GamesWon}`);\n    console.log(`🔍 Sets: Pareja 1 = ${pair1SetsWon}, Pareja 2 = ${pair2SetsWon}`);\n    console.log(`🔍 Puntos totales: Pareja 1 = ${pair1TotalPoints}, Pareja 2 = ${pair2TotalPoints}`);\n\n    // Determinar si es empate (cuando los puntos totales son iguales)\n    const isTie = pair1TotalPoints === pair2TotalPoints;\n    console.log(`🔍 Es empate: ${isTie} (${pair1TotalPoints}-${pair2TotalPoints} puntos totales)`);\n    console.log(\"🎯 === FIN CÁLCULO DEL PARTIDO ===\");\n    return {\n      pair1GamesWon,\n      pair2GamesWon,\n      pair1SetsWon,\n      pair2SetsWon,\n      pair1TotalPoints,\n      pair2TotalPoints,\n      isTie\n    };\n  }\n\n  /**\n   * SOLO recalcula estadísticas del partido (sin acumular)\n   * Se usa cuando se corrige un juego\n   */\n  static async recalculateMatchStatistics(match, games, pairs) {\n    try {\n      console.log(\"🔄 === RECÁLCULO DE ESTADÍSTICAS DEL PARTIDO ===\");\n      console.log(\"🔄 SOLO recálculo - NO acumula estadísticas\");\n      const stats = this.calculateMatchStatistics(match, games);\n      const pair1 = pairs.find(p => p.id === match.pair1_id);\n      const pair2 = pairs.find(p => p.id === match.pair2_id);\n      console.log(\"📊 Estadísticas recalculadas del partido:\", {\n        pair1GamesWon: stats.pair1GamesWon,\n        pair2GamesWon: stats.pair2GamesWon,\n        pair1SetsWon: stats.pair1SetsWon,\n        pair2SetsWon: stats.pair2SetsWon,\n        isTie: stats.isTie\n      });\n\n      // NO actualizar estadísticas en la base de datos\n      // Solo calcular para mostrar en la interfaz\n      console.log(\"✅ Solo recálculo completado - NO se actualizaron estadísticas\");\n\n      // Determinar ganador del partido\n      let winnerId;\n      console.log(\"🏆 === DETERMINACIÓN DEL GANADOR DEL PARTIDO ===\");\n      console.log(`🏆 Sets: Pareja 1 = ${stats.pair1SetsWon}, Pareja 2 = ${stats.pair2SetsWon}`);\n      console.log(`🏆 Juegos: Pareja 1 = ${stats.pair1GamesWon}, Pareja 2 = ${stats.pair2GamesWon}`);\n      console.log(`🏆 Es empate: ${stats.isTie}`);\n      if (stats.isTie) {\n        winnerId = undefined;\n        console.log(\"🤝 Partido terminó en EMPATE por puntos totales\");\n      } else if (stats.pair1TotalPoints > stats.pair2TotalPoints) {\n        winnerId = match.pair1_id;\n        console.log(\"🏆 Pareja 1 gana por puntos totales\");\n      } else if (stats.pair2TotalPoints > stats.pair1TotalPoints) {\n        winnerId = match.pair2_id;\n        console.log(\"🏆 Pareja 2 gana por puntos totales\");\n      } else {\n        winnerId = undefined;\n        console.log(\"❌ Caso inesperado en determinación del ganador\");\n      }\n      let message;\n      if (stats.isTie) {\n        message = `✅ Partido recalculado.\\n\\n🤝 EMPATE (${stats.pair1TotalPoints}-${stats.pair2TotalPoints} puntos totales)`;\n      } else if (winnerId) {\n        var _pair1$player, _pair1$player2, _pair2$player, _pair2$player2;\n        const winnerName = winnerId === match.pair1_id ? `${pair1 === null || pair1 === void 0 ? void 0 : (_pair1$player = pair1.player1) === null || _pair1$player === void 0 ? void 0 : _pair1$player.name} y ${pair1 === null || pair1 === void 0 ? void 0 : (_pair1$player2 = pair1.player2) === null || _pair1$player2 === void 0 ? void 0 : _pair1$player2.name}` : `${pair2 === null || pair2 === void 0 ? void 0 : (_pair2$player = pair2.player1) === null || _pair2$player === void 0 ? void 0 : _pair2$player.name} y ${pair2 === null || pair2 === void 0 ? void 0 : (_pair2$player2 = pair2.player2) === null || _pair2$player2 === void 0 ? void 0 : _pair2$player2.name}`;\n        message = `✅ Partido recalculado.\\n\\n🏆 Ganador: ${winnerName} (${stats.pair1TotalPoints}-${stats.pair2TotalPoints} puntos totales)`;\n      } else {\n        message = `✅ Partido recalculado.\\n\\n🤝 Empate (${stats.pair1TotalPoints}-${stats.pair2TotalPoints} puntos totales)`;\n      }\n      console.log(\"🔄 === FIN RECÁLCULO DEL PARTIDO ===\");\n      return {\n        success: true,\n        message,\n        pair1Stats: {\n          gamesWon: stats.pair1GamesWon,\n          setsWon: stats.pair1SetsWon,\n          points: stats.pair1TotalPoints\n        },\n        pair2Stats: {\n          gamesWon: stats.pair2GamesWon,\n          setsWon: stats.pair2SetsWon,\n          points: stats.pair2TotalPoints\n        },\n        winnerId,\n        isTie: stats.isTie\n      };\n    } catch (error) {\n      console.error(\"❌ Error en recalculateMatchStatistics:\", error);\n      return {\n        success: false,\n        message: \"Error al recalcular estadísticas del partido\",\n        pair1Stats: {\n          gamesWon: 0,\n          setsWon: 0,\n          points: 0\n        },\n        pair2Stats: {\n          gamesWon: 0,\n          setsWon: 0,\n          points: 0\n        },\n        isTie: false\n      };\n    }\n  }\n\n  /**\n   * ACUMULA estadísticas del partido a las estadísticas totales\n   * Se usa SOLO cuando se finaliza el partido\n   */\n  static async accumulateMatchStatistics(match, games, pairs) {\n    try {\n      console.log(\"🏆 === ACUMULACIÓN DE ESTADÍSTICAS DEL PARTIDO ===\");\n      console.log(\"🏆 ACUMULANDO estadísticas al finalizar partido\");\n      const stats = this.calculateMatchStatistics(match, games);\n      const pair1 = pairs.find(p => p.id === match.pair1_id);\n      const pair2 = pairs.find(p => p.id === match.pair2_id);\n      console.log(\"📊 Estadísticas del partido a acumular:\", {\n        pair1GamesWon: stats.pair1GamesWon,\n        pair2GamesWon: stats.pair2GamesWon,\n        pair1SetsWon: stats.pair1SetsWon,\n        pair2SetsWon: stats.pair2SetsWon,\n        isTie: stats.isTie\n      });\n\n      // ACUMULAR estadísticas en la base de datos\n      if (pair1) {\n        var _pair1$player3, _pair1$player4;\n        console.log(`📊 Acumulando Pareja 1: ${(_pair1$player3 = pair1.player1) === null || _pair1$player3 === void 0 ? void 0 : _pair1$player3.name} y ${(_pair1$player4 = pair1.player2) === null || _pair1$player4 === void 0 ? void 0 : _pair1$player4.name}`);\n        console.log(`📊 Estadísticas actuales: ${pair1.games_won} juegos, ${pair1.sets_won} sets, ${pair1.points} puntos, ${pair1.matches_played} partidos`);\n        console.log(`📊 Estadísticas del partido: ${stats.pair1GamesWon} juegos, ${stats.pair1SetsWon} sets, ${stats.pair1TotalPoints} puntos`);\n        await updatePair(pair1.id, {\n          games_won: pair1.games_won + stats.pair1GamesWon,\n          sets_won: pair1.sets_won + stats.pair1SetsWon,\n          points: pair1.points + stats.pair1TotalPoints,\n          matches_played: pair1.matches_played + 1\n        });\n        console.log(`✅ Pareja 1 acumulada: ${pair1.games_won + stats.pair1GamesWon} juegos, ${pair1.sets_won + stats.pair1SetsWon} sets, ${pair1.points + stats.pair1TotalPoints} puntos, ${pair1.matches_played + 1} partidos`);\n      }\n      if (pair2) {\n        var _pair2$player3, _pair2$player4;\n        console.log(`📊 Acumulando Pareja 2: ${(_pair2$player3 = pair2.player1) === null || _pair2$player3 === void 0 ? void 0 : _pair2$player3.name} y ${(_pair2$player4 = pair2.player2) === null || _pair2$player4 === void 0 ? void 0 : _pair2$player4.name}`);\n        console.log(`📊 Estadísticas actuales: ${pair2.games_won} juegos, ${pair2.sets_won} sets, ${pair2.points} puntos, ${pair2.matches_played} partidos`);\n        console.log(`📊 Estadísticas del partido: ${stats.pair2GamesWon} juegos, ${stats.pair2SetsWon} sets, ${stats.pair2TotalPoints} puntos`);\n        await updatePair(pair2.id, {\n          games_won: pair2.games_won + stats.pair2GamesWon,\n          sets_won: pair2.sets_won + stats.pair2SetsWon,\n          points: pair2.points + stats.pair2TotalPoints,\n          matches_played: pair2.matches_played + 1\n        });\n        console.log(`✅ Pareja 2 acumulada: ${pair2.games_won + stats.pair2GamesWon} juegos, ${pair2.sets_won + stats.pair2SetsWon} sets, ${pair2.points + stats.pair2TotalPoints} puntos, ${pair2.matches_played + 1} partidos`);\n      }\n\n      // Determinar ganador\n      let winnerId;\n      console.log(\"🏆 === DETERMINACIÓN DEL GANADOR ===\");\n      console.log(`🏆 Sets: Pareja 1 = ${stats.pair1SetsWon}, Pareja 2 = ${stats.pair2SetsWon}`);\n      console.log(`🏆 Juegos: Pareja 1 = ${stats.pair1GamesWon}, Pareja 2 = ${stats.pair2GamesWon}`);\n      console.log(`🏆 Es empate: ${stats.isTie}`);\n      if (stats.isTie) {\n        winnerId = undefined;\n        console.log(\"🤝 Partido terminó en EMPATE por puntos totales\");\n      } else if (stats.pair1TotalPoints > stats.pair2TotalPoints) {\n        winnerId = match.pair1_id;\n        console.log(\"🏆 Pareja 1 gana por puntos totales\");\n      } else if (stats.pair2TotalPoints > stats.pair1TotalPoints) {\n        winnerId = match.pair2_id;\n        console.log(\"🏆 Pareja 2 gana por puntos totales\");\n      } else {\n        winnerId = undefined;\n        console.log(\"❌ Caso inesperado en determinación del ganador\");\n      }\n      let message;\n      if (stats.isTie) {\n        message = `✅ Partido finalizado.\\n\\n🤝 EMPATE (${stats.pair1TotalPoints}-${stats.pair2TotalPoints} puntos totales)`;\n      } else if (winnerId) {\n        var _pair1$player5, _pair1$player6, _pair2$player5, _pair2$player6;\n        const winnerName = winnerId === match.pair1_id ? `${pair1 === null || pair1 === void 0 ? void 0 : (_pair1$player5 = pair1.player1) === null || _pair1$player5 === void 0 ? void 0 : _pair1$player5.name} y ${pair1 === null || pair1 === void 0 ? void 0 : (_pair1$player6 = pair1.player2) === null || _pair1$player6 === void 0 ? void 0 : _pair1$player6.name}` : `${pair2 === null || pair2 === void 0 ? void 0 : (_pair2$player5 = pair2.player1) === null || _pair2$player5 === void 0 ? void 0 : _pair2$player5.name} y ${pair2 === null || pair2 === void 0 ? void 0 : (_pair2$player6 = pair2.player2) === null || _pair2$player6 === void 0 ? void 0 : _pair2$player6.name}`;\n        message = `✅ Partido finalizado.\\n\\n🏆 Ganador: ${winnerName} (${stats.pair1TotalPoints}-${stats.pair2TotalPoints} puntos totales)`;\n      } else {\n        message = `✅ Partido finalizado.\\n\\n🤝 Empate (${stats.pair1TotalPoints}-${stats.pair2TotalPoints} puntos totales)`;\n      }\n      console.log(\"🏆 === FIN ACUMULACIÓN DEL PARTIDO ===\");\n      return {\n        success: true,\n        message,\n        pair1Stats: {\n          gamesWon: stats.pair1GamesWon,\n          setsWon: stats.pair1SetsWon,\n          points: stats.pair1TotalPoints\n        },\n        pair2Stats: {\n          gamesWon: stats.pair2GamesWon,\n          setsWon: stats.pair2SetsWon,\n          points: stats.pair2TotalPoints\n        },\n        winnerId,\n        isTie: stats.isTie\n      };\n    } catch (error) {\n      console.error(\"❌ Error en accumulateMatchStatistics:\", error);\n      return {\n        success: false,\n        message: \"Error al acumular estadísticas del partido\",\n        pair1Stats: {\n          gamesWon: 0,\n          setsWon: 0,\n          points: 0\n        },\n        pair2Stats: {\n          gamesWon: 0,\n          setsWon: 0,\n          points: 0\n        },\n        isTie: false\n      };\n    }\n  }\n\n  /**\n   * Recalcula todas las estadísticas del torneo\n   */\n  static async recalculateAllStatistics(tournamentId) {\n    try {\n      console.log(\"🔄 === INICIO RECÁLCULO COMPLETO ===\");\n\n      // Obtener todos los datos del torneo\n      const pairs = await getPairs(tournamentId);\n      const matches = await getMatches(tournamentId);\n\n      // Resetear todas las estadísticas de las parejas\n      console.log(\"🔄 Reseteando estadísticas de todas las parejas...\");\n      for (const pair of pairs) {\n        await updatePair(pair.id, {\n          games_won: 0,\n          sets_won: 0,\n          points: 0,\n          matches_played: 0\n        });\n      }\n\n      // Crear un mapa para acumular estadísticas de cada pareja\n      const pairStats = new Map();\n\n      // Inicializar estadísticas para todas las parejas\n      for (const pair of pairs) {\n        pairStats.set(pair.id, {\n          gamesWon: 0,\n          setsWon: 0,\n          points: 0,\n          matchesPlayed: 0\n        });\n      }\n\n      // Procesar cada partido finalizado y acumular estadísticas\n      let processedMatches = 0;\n      for (const match of matches) {\n        if (match.is_finished) {\n          console.log(`🔄 Procesando partido finalizado: ${match.id}`);\n          const games = await getGames(match.id);\n          if (games.length > 0) {\n            const stats = this.calculateMatchStatistics(match, games);\n\n            // Acumular estadísticas para pareja 1\n            const pair1Stats = pairStats.get(match.pair1_id);\n            pair1Stats.gamesWon += stats.pair1GamesWon;\n            pair1Stats.setsWon += stats.pair1SetsWon;\n            pair1Stats.points += stats.pair1TotalPoints;\n            pair1Stats.matchesPlayed += 1;\n\n            // Acumular estadísticas para pareja 2\n            const pair2Stats = pairStats.get(match.pair2_id);\n            pair2Stats.gamesWon += stats.pair2GamesWon;\n            pair2Stats.setsWon += stats.pair2SetsWon;\n            pair2Stats.points += stats.pair2TotalPoints;\n            pair2Stats.matchesPlayed += 1;\n            processedMatches++;\n          }\n        }\n      }\n\n      // Actualizar todas las parejas con sus estadísticas acumuladas\n      console.log(\"🔄 Actualizando estadísticas acumuladas...\");\n      for (const pair of pairs) {\n        const stats = pairStats.get(pair.id);\n        if (stats) {\n          await updatePair(pair.id, {\n            games_won: stats.gamesWon,\n            sets_won: stats.setsWon,\n            points: stats.points,\n            matches_played: stats.matchesPlayed\n          });\n          console.log(`📊 Pareja ${pair.id}: ${stats.points} puntos, ${stats.setsWon} sets, ${stats.gamesWon} juegos, ${stats.matchesPlayed} partidos`);\n        }\n      }\n      console.log(`✅ Estadísticas recalculadas para ${processedMatches} partidos`);\n      console.log(\"🔄 === FIN RECÁLCULO COMPLETO ===\");\n      return {\n        success: true,\n        message: `✅ Estadísticas recalculadas exitosamente para ${processedMatches} partidos`\n      };\n    } catch (error) {\n      console.error(\"❌ Error en recalculateAllStatistics:\", error);\n      return {\n        success: false,\n        message: \"Error al recalcular estadísticas del torneo\"\n      };\n    }\n  }\n\n  /**\n   * Calcula el ranking de las parejas\n   */\n  static calculateRanking(pairs) {\n    return [...pairs].sort((a, b) => {\n      // Criterio 1: Puntos totales (descendente) - CRITERIO PRINCIPAL\n      if (a.points !== b.points) {\n        return b.points - a.points;\n      }\n      // Criterio 2: Sets ganados (descendente) - CRITERIO DE DESEMPATE\n      if (a.sets_won !== b.sets_won) {\n        return b.sets_won - a.sets_won;\n      }\n      // Criterio 3: Juegos ganados (descendente)\n      if (a.games_won !== b.games_won) {\n        return b.games_won - a.games_won;\n      }\n      // Criterio 4: Menos partidos jugados (mejor eficiencia)\n      return a.matches_played - b.matches_played;\n    });\n  }\n}","map":{"version":3,"names":["updatePair","getPairs","getMatches","getGames","MatchResultCalculator","calculateMatchStatistics","match","games","console","log","id","length","pair1GamesWon","pair2GamesWon","pair1TotalPoints","pair2TotalPoints","pair1SetsWon","pair2SetsWon","forEach","game","index","pair1_games","pair2_games","is_tie_break","tie_break_pair1","tie_break_pair1_points","tie_break_pair2","tie_break_pair2_points","isTie","recalculateMatchStatistics","pairs","stats","pair1","find","p","pair1_id","pair2","pair2_id","winnerId","undefined","message","_pair1$player","_pair1$player2","_pair2$player","_pair2$player2","winnerName","player1","name","player2","success","pair1Stats","gamesWon","setsWon","points","pair2Stats","error","accumulateMatchStatistics","_pair1$player3","_pair1$player4","games_won","sets_won","matches_played","_pair2$player3","_pair2$player4","_pair1$player5","_pair1$player6","_pair2$player5","_pair2$player6","recalculateAllStatistics","tournamentId","matches","pair","pairStats","Map","set","matchesPlayed","processedMatches","is_finished","get","calculateRanking","sort","a","b"],"sources":["/Users/nedev/padel-tournament-app/src/components/MatchResultCalculator.tsx"],"sourcesContent":["import { Game, Match, Pair } from \"../lib/database\";\nimport { updatePair, getPairs, getMatches, getGames } from \"../lib/database\";\n\nexport interface MatchResult {\n  success: boolean;\n  message: string;\n  pair1Stats: {\n    gamesWon: number;\n    setsWon: number;\n    points: number;\n  };\n  pair2Stats: {\n    gamesWon: number;\n    setsWon: number;\n    points: number;\n  };\n  winnerId?: string;\n  isTie: boolean;\n}\n\nexport class MatchResultCalculator {\n  /**\n   * Calcula estadísticas de un partido específico\n   */\n  static calculateMatchStatistics(\n    match: Match,\n    games: Game[]\n  ): {\n    pair1GamesWon: number;\n    pair2GamesWon: number;\n    pair1SetsWon: number;\n    pair2SetsWon: number;\n    pair1TotalPoints: number;\n    pair2TotalPoints: number;\n    isTie: boolean;\n  } {\n    console.log(\"🎯 === CÁLCULO DE ESTADÍSTICAS DEL PARTIDO ===\");\n    console.log(\"🎯 Partido ID:\", match.id);\n    console.log(\"🎯 Total de juegos:\", games.length);\n\n    let pair1GamesWon = 0;\n    let pair2GamesWon = 0;\n    let pair1TotalPoints = 0;\n    let pair2TotalPoints = 0;\n    let pair1SetsWon = 0;\n    let pair2SetsWon = 0;\n\n    // Procesar cada juego del partido\n    games.forEach((game, index) => {\n      console.log(`📊 === JUEGO ${index + 1} ===`);\n      console.log(\"📊 Datos del juego:\", {\n        pair1_games: game.pair1_games,\n        pair2_games: game.pair2_games,\n        is_tie_break: game.is_tie_break,\n        tie_break_pair1: game.tie_break_pair1_points,\n        tie_break_pair2: game.tie_break_pair2_points,\n      });\n\n      if (game.is_tie_break) {\n        console.log(\"📊 Es un tie-break\");\n        // Para tie-breaks\n        if (game.tie_break_pair1_points > game.tie_break_pair2_points) {\n          pair1GamesWon++;\n          console.log(\n            `✅ Pareja 1 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`\n          );\n        } else if (game.tie_break_pair2_points > game.tie_break_pair1_points) {\n          pair2GamesWon++;\n          console.log(\n            `✅ Pareja 2 gana tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`\n          );\n        } else {\n          console.log(\n            `🤝 Empate en tie-break: ${game.tie_break_pair1_points}-${game.tie_break_pair2_points}`\n          );\n        }\n        pair1TotalPoints += game.tie_break_pair1_points || 0;\n        pair2TotalPoints += game.tie_break_pair2_points || 0;\n      } else {\n        console.log(\"📊 Es un juego normal\");\n        console.log(\n          `📊 Puntos Pareja 1: ${game.pair1_games}, Puntos Pareja 2: ${game.pair2_games}`\n        );\n\n        // Para juegos normales\n        if (game.pair1_games > game.pair2_games) {\n          pair1GamesWon++;\n          console.log(\n            `✅ Pareja 1 gana juego: ${game.pair1_games}-${game.pair2_games}`\n          );\n        } else if (game.pair2_games > game.pair1_games) {\n          pair2GamesWon++;\n          console.log(\n            `✅ Pareja 2 gana juego: ${game.pair1_games}-${game.pair2_games}`\n          );\n        } else {\n          console.log(\n            `🤝 Empate en juego: ${game.pair1_games}-${game.pair2_games}`\n          );\n        }\n        pair1TotalPoints += game.pair1_games;\n        pair2TotalPoints += game.pair2_games;\n      }\n\n      // Verificar si alguna pareja llegó a 6 puntos en este juego (gana 1 set)\n      if (!game.is_tie_break) {\n        if (game.pair1_games >= 6) {\n          pair1SetsWon++;\n          console.log(\n            `🏆 Pareja 1 gana 1 SET en juego ${index + 1} con ${\n              game.pair1_games\n            } puntos`\n          );\n        }\n        if (game.pair2_games >= 6) {\n          pair2SetsWon++;\n          console.log(\n            `🏆 Pareja 2 gana 1 SET en juego ${index + 1} con ${\n              game.pair2_games\n            } puntos`\n          );\n        }\n      }\n\n      console.log(\n        `📊 Después del juego ${\n          index + 1\n        }: Pareja 1 = ${pair1GamesWon} juegos, Pareja 2 = ${pair2GamesWon} juegos`\n      );\n    });\n\n    console.log(\"🔍 === RESULTADO FINAL DEL PARTIDO ===\");\n    console.log(\n      `🔍 Juegos: Pareja 1 = ${pair1GamesWon}, Pareja 2 = ${pair2GamesWon}`\n    );\n    console.log(\n      `🔍 Sets: Pareja 1 = ${pair1SetsWon}, Pareja 2 = ${pair2SetsWon}`\n    );\n    console.log(\n      `🔍 Puntos totales: Pareja 1 = ${pair1TotalPoints}, Pareja 2 = ${pair2TotalPoints}`\n    );\n\n    // Determinar si es empate (cuando los puntos totales son iguales)\n    const isTie = pair1TotalPoints === pair2TotalPoints;\n    console.log(\n      `🔍 Es empate: ${isTie} (${pair1TotalPoints}-${pair2TotalPoints} puntos totales)`\n    );\n\n    console.log(\"🎯 === FIN CÁLCULO DEL PARTIDO ===\");\n\n    return {\n      pair1GamesWon,\n      pair2GamesWon,\n      pair1SetsWon,\n      pair2SetsWon,\n      pair1TotalPoints,\n      pair2TotalPoints,\n      isTie,\n    };\n  }\n\n  /**\n   * SOLO recalcula estadísticas del partido (sin acumular)\n   * Se usa cuando se corrige un juego\n   */\n  static async recalculateMatchStatistics(\n    match: Match,\n    games: Game[],\n    pairs: Pair[]\n  ): Promise<MatchResult> {\n    try {\n      console.log(\"🔄 === RECÁLCULO DE ESTADÍSTICAS DEL PARTIDO ===\");\n      console.log(\"🔄 SOLO recálculo - NO acumula estadísticas\");\n\n      const stats = this.calculateMatchStatistics(match, games);\n      const pair1 = pairs.find((p) => p.id === match.pair1_id);\n      const pair2 = pairs.find((p) => p.id === match.pair2_id);\n\n      console.log(\"📊 Estadísticas recalculadas del partido:\", {\n        pair1GamesWon: stats.pair1GamesWon,\n        pair2GamesWon: stats.pair2GamesWon,\n        pair1SetsWon: stats.pair1SetsWon,\n        pair2SetsWon: stats.pair2SetsWon,\n        isTie: stats.isTie,\n      });\n\n      // NO actualizar estadísticas en la base de datos\n      // Solo calcular para mostrar en la interfaz\n      console.log(\n        \"✅ Solo recálculo completado - NO se actualizaron estadísticas\"\n      );\n\n      // Determinar ganador del partido\n      let winnerId: string | undefined;\n\n      console.log(\"🏆 === DETERMINACIÓN DEL GANADOR DEL PARTIDO ===\");\n      console.log(\n        `🏆 Sets: Pareja 1 = ${stats.pair1SetsWon}, Pareja 2 = ${stats.pair2SetsWon}`\n      );\n      console.log(\n        `🏆 Juegos: Pareja 1 = ${stats.pair1GamesWon}, Pareja 2 = ${stats.pair2GamesWon}`\n      );\n      console.log(`🏆 Es empate: ${stats.isTie}`);\n\n      if (stats.isTie) {\n        winnerId = undefined;\n        console.log(\"🤝 Partido terminó en EMPATE por puntos totales\");\n      } else if (stats.pair1TotalPoints > stats.pair2TotalPoints) {\n        winnerId = match.pair1_id;\n        console.log(\"🏆 Pareja 1 gana por puntos totales\");\n      } else if (stats.pair2TotalPoints > stats.pair1TotalPoints) {\n        winnerId = match.pair2_id;\n        console.log(\"🏆 Pareja 2 gana por puntos totales\");\n      } else {\n        winnerId = undefined;\n        console.log(\"❌ Caso inesperado en determinación del ganador\");\n      }\n\n      let message: string;\n      if (stats.isTie) {\n        message = `✅ Partido recalculado.\\n\\n🤝 EMPATE (${stats.pair1TotalPoints}-${stats.pair2TotalPoints} puntos totales)`;\n      } else if (winnerId) {\n        const winnerName =\n          winnerId === match.pair1_id\n            ? `${pair1?.player1?.name} y ${pair1?.player2?.name}`\n            : `${pair2?.player1?.name} y ${pair2?.player2?.name}`;\n        message = `✅ Partido recalculado.\\n\\n🏆 Ganador: ${winnerName} (${stats.pair1TotalPoints}-${stats.pair2TotalPoints} puntos totales)`;\n      } else {\n        message = `✅ Partido recalculado.\\n\\n🤝 Empate (${stats.pair1TotalPoints}-${stats.pair2TotalPoints} puntos totales)`;\n      }\n\n      console.log(\"🔄 === FIN RECÁLCULO DEL PARTIDO ===\");\n\n      return {\n        success: true,\n        message,\n        pair1Stats: {\n          gamesWon: stats.pair1GamesWon,\n          setsWon: stats.pair1SetsWon,\n          points: stats.pair1TotalPoints,\n        },\n        pair2Stats: {\n          gamesWon: stats.pair2GamesWon,\n          setsWon: stats.pair2SetsWon,\n          points: stats.pair2TotalPoints,\n        },\n        winnerId,\n        isTie: stats.isTie,\n      };\n    } catch (error) {\n      console.error(\"❌ Error en recalculateMatchStatistics:\", error);\n      return {\n        success: false,\n        message: \"Error al recalcular estadísticas del partido\",\n        pair1Stats: { gamesWon: 0, setsWon: 0, points: 0 },\n        pair2Stats: { gamesWon: 0, setsWon: 0, points: 0 },\n        isTie: false,\n      };\n    }\n  }\n\n  /**\n   * ACUMULA estadísticas del partido a las estadísticas totales\n   * Se usa SOLO cuando se finaliza el partido\n   */\n  static async accumulateMatchStatistics(\n    match: Match,\n    games: Game[],\n    pairs: Pair[]\n  ): Promise<MatchResult> {\n    try {\n      console.log(\"🏆 === ACUMULACIÓN DE ESTADÍSTICAS DEL PARTIDO ===\");\n      console.log(\"🏆 ACUMULANDO estadísticas al finalizar partido\");\n\n      const stats = this.calculateMatchStatistics(match, games);\n      const pair1 = pairs.find((p) => p.id === match.pair1_id);\n      const pair2 = pairs.find((p) => p.id === match.pair2_id);\n\n      console.log(\"📊 Estadísticas del partido a acumular:\", {\n        pair1GamesWon: stats.pair1GamesWon,\n        pair2GamesWon: stats.pair2GamesWon,\n        pair1SetsWon: stats.pair1SetsWon,\n        pair2SetsWon: stats.pair2SetsWon,\n        isTie: stats.isTie,\n      });\n\n      // ACUMULAR estadísticas en la base de datos\n      if (pair1) {\n        console.log(\n          `📊 Acumulando Pareja 1: ${pair1.player1?.name} y ${pair1.player2?.name}`\n        );\n        console.log(\n          `📊 Estadísticas actuales: ${pair1.games_won} juegos, ${pair1.sets_won} sets, ${pair1.points} puntos, ${pair1.matches_played} partidos`\n        );\n        console.log(\n          `📊 Estadísticas del partido: ${stats.pair1GamesWon} juegos, ${stats.pair1SetsWon} sets, ${stats.pair1TotalPoints} puntos`\n        );\n\n        await updatePair(pair1.id, {\n          games_won: pair1.games_won + stats.pair1GamesWon,\n          sets_won: pair1.sets_won + stats.pair1SetsWon,\n          points: pair1.points + stats.pair1TotalPoints,\n          matches_played: pair1.matches_played + 1,\n        });\n\n        console.log(\n          `✅ Pareja 1 acumulada: ${\n            pair1.games_won + stats.pair1GamesWon\n          } juegos, ${pair1.sets_won + stats.pair1SetsWon} sets, ${\n            pair1.points + stats.pair1TotalPoints\n          } puntos, ${pair1.matches_played + 1} partidos`\n        );\n      }\n\n      if (pair2) {\n        console.log(\n          `📊 Acumulando Pareja 2: ${pair2.player1?.name} y ${pair2.player2?.name}`\n        );\n        console.log(\n          `📊 Estadísticas actuales: ${pair2.games_won} juegos, ${pair2.sets_won} sets, ${pair2.points} puntos, ${pair2.matches_played} partidos`\n        );\n        console.log(\n          `📊 Estadísticas del partido: ${stats.pair2GamesWon} juegos, ${stats.pair2SetsWon} sets, ${stats.pair2TotalPoints} puntos`\n        );\n\n        await updatePair(pair2.id, {\n          games_won: pair2.games_won + stats.pair2GamesWon,\n          sets_won: pair2.sets_won + stats.pair2SetsWon,\n          points: pair2.points + stats.pair2TotalPoints,\n          matches_played: pair2.matches_played + 1,\n        });\n\n        console.log(\n          `✅ Pareja 2 acumulada: ${\n            pair2.games_won + stats.pair2GamesWon\n          } juegos, ${pair2.sets_won + stats.pair2SetsWon} sets, ${\n            pair2.points + stats.pair2TotalPoints\n          } puntos, ${pair2.matches_played + 1} partidos`\n        );\n      }\n\n      // Determinar ganador\n      let winnerId: string | undefined;\n\n      console.log(\"🏆 === DETERMINACIÓN DEL GANADOR ===\");\n      console.log(\n        `🏆 Sets: Pareja 1 = ${stats.pair1SetsWon}, Pareja 2 = ${stats.pair2SetsWon}`\n      );\n      console.log(\n        `🏆 Juegos: Pareja 1 = ${stats.pair1GamesWon}, Pareja 2 = ${stats.pair2GamesWon}`\n      );\n      console.log(`🏆 Es empate: ${stats.isTie}`);\n\n      if (stats.isTie) {\n        winnerId = undefined;\n        console.log(\"🤝 Partido terminó en EMPATE por puntos totales\");\n      } else if (stats.pair1TotalPoints > stats.pair2TotalPoints) {\n        winnerId = match.pair1_id;\n        console.log(\"🏆 Pareja 1 gana por puntos totales\");\n      } else if (stats.pair2TotalPoints > stats.pair1TotalPoints) {\n        winnerId = match.pair2_id;\n        console.log(\"🏆 Pareja 2 gana por puntos totales\");\n      } else {\n        winnerId = undefined;\n        console.log(\"❌ Caso inesperado en determinación del ganador\");\n      }\n\n      let message: string;\n      if (stats.isTie) {\n        message = `✅ Partido finalizado.\\n\\n🤝 EMPATE (${stats.pair1TotalPoints}-${stats.pair2TotalPoints} puntos totales)`;\n      } else if (winnerId) {\n        const winnerName =\n          winnerId === match.pair1_id\n            ? `${pair1?.player1?.name} y ${pair1?.player2?.name}`\n            : `${pair2?.player1?.name} y ${pair2?.player2?.name}`;\n        message = `✅ Partido finalizado.\\n\\n🏆 Ganador: ${winnerName} (${stats.pair1TotalPoints}-${stats.pair2TotalPoints} puntos totales)`;\n      } else {\n        message = `✅ Partido finalizado.\\n\\n🤝 Empate (${stats.pair1TotalPoints}-${stats.pair2TotalPoints} puntos totales)`;\n      }\n\n      console.log(\"🏆 === FIN ACUMULACIÓN DEL PARTIDO ===\");\n\n      return {\n        success: true,\n        message,\n        pair1Stats: {\n          gamesWon: stats.pair1GamesWon,\n          setsWon: stats.pair1SetsWon,\n          points: stats.pair1TotalPoints,\n        },\n        pair2Stats: {\n          gamesWon: stats.pair2GamesWon,\n          setsWon: stats.pair2SetsWon,\n          points: stats.pair2TotalPoints,\n        },\n        winnerId,\n        isTie: stats.isTie,\n      };\n    } catch (error) {\n      console.error(\"❌ Error en accumulateMatchStatistics:\", error);\n      return {\n        success: false,\n        message: \"Error al acumular estadísticas del partido\",\n        pair1Stats: { gamesWon: 0, setsWon: 0, points: 0 },\n        pair2Stats: { gamesWon: 0, setsWon: 0, points: 0 },\n        isTie: false,\n      };\n    }\n  }\n\n  /**\n   * Recalcula todas las estadísticas del torneo\n   */\n  static async recalculateAllStatistics(tournamentId: string): Promise<{\n    success: boolean;\n    message: string;\n  }> {\n    try {\n      console.log(\"🔄 === INICIO RECÁLCULO COMPLETO ===\");\n\n      // Obtener todos los datos del torneo\n      const pairs = await getPairs(tournamentId);\n      const matches = await getMatches(tournamentId);\n\n      // Resetear todas las estadísticas de las parejas\n      console.log(\"🔄 Reseteando estadísticas de todas las parejas...\");\n      for (const pair of pairs) {\n        await updatePair(pair.id, {\n          games_won: 0,\n          sets_won: 0,\n          points: 0,\n          matches_played: 0,\n        });\n      }\n\n      // Crear un mapa para acumular estadísticas de cada pareja\n      const pairStats = new Map<\n        string,\n        {\n          gamesWon: number;\n          setsWon: number;\n          points: number;\n          matchesPlayed: number;\n        }\n      >();\n\n      // Inicializar estadísticas para todas las parejas\n      for (const pair of pairs) {\n        pairStats.set(pair.id, {\n          gamesWon: 0,\n          setsWon: 0,\n          points: 0,\n          matchesPlayed: 0,\n        });\n      }\n\n      // Procesar cada partido finalizado y acumular estadísticas\n      let processedMatches = 0;\n      for (const match of matches) {\n        if (match.is_finished) {\n          console.log(`🔄 Procesando partido finalizado: ${match.id}`);\n          const games = await getGames(match.id);\n\n          if (games.length > 0) {\n            const stats = this.calculateMatchStatistics(match, games);\n\n            // Acumular estadísticas para pareja 1\n            const pair1Stats = pairStats.get(match.pair1_id)!;\n            pair1Stats.gamesWon += stats.pair1GamesWon;\n            pair1Stats.setsWon += stats.pair1SetsWon;\n            pair1Stats.points += stats.pair1TotalPoints;\n            pair1Stats.matchesPlayed += 1;\n\n            // Acumular estadísticas para pareja 2\n            const pair2Stats = pairStats.get(match.pair2_id)!;\n            pair2Stats.gamesWon += stats.pair2GamesWon;\n            pair2Stats.setsWon += stats.pair2SetsWon;\n            pair2Stats.points += stats.pair2TotalPoints;\n            pair2Stats.matchesPlayed += 1;\n\n            processedMatches++;\n          }\n        }\n      }\n\n      // Actualizar todas las parejas con sus estadísticas acumuladas\n      console.log(\"🔄 Actualizando estadísticas acumuladas...\");\n      for (const pair of pairs) {\n        const stats = pairStats.get(pair.id);\n        if (stats) {\n          await updatePair(pair.id, {\n            games_won: stats.gamesWon,\n            sets_won: stats.setsWon,\n            points: stats.points,\n            matches_played: stats.matchesPlayed,\n          });\n          console.log(\n            `📊 Pareja ${pair.id}: ${stats.points} puntos, ${stats.setsWon} sets, ${stats.gamesWon} juegos, ${stats.matchesPlayed} partidos`\n          );\n        }\n      }\n\n      console.log(\n        `✅ Estadísticas recalculadas para ${processedMatches} partidos`\n      );\n      console.log(\"🔄 === FIN RECÁLCULO COMPLETO ===\");\n\n      return {\n        success: true,\n        message: `✅ Estadísticas recalculadas exitosamente para ${processedMatches} partidos`,\n      };\n    } catch (error) {\n      console.error(\"❌ Error en recalculateAllStatistics:\", error);\n      return {\n        success: false,\n        message: \"Error al recalcular estadísticas del torneo\",\n      };\n    }\n  }\n\n  /**\n   * Calcula el ranking de las parejas\n   */\n  static calculateRanking(pairs: Pair[]): Pair[] {\n    return [...pairs].sort((a, b) => {\n      // Criterio 1: Puntos totales (descendente) - CRITERIO PRINCIPAL\n      if (a.points !== b.points) {\n        return b.points - a.points;\n      }\n      // Criterio 2: Sets ganados (descendente) - CRITERIO DE DESEMPATE\n      if (a.sets_won !== b.sets_won) {\n        return b.sets_won - a.sets_won;\n      }\n      // Criterio 3: Juegos ganados (descendente)\n      if (a.games_won !== b.games_won) {\n        return b.games_won - a.games_won;\n      }\n      // Criterio 4: Menos partidos jugados (mejor eficiencia)\n      return a.matches_played - b.matches_played;\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}