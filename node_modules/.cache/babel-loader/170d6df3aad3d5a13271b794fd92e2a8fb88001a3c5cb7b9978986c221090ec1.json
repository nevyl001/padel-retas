{"ast":null,"code":"import{getGames}from\"../lib/database\";export class TournamentWinnerCalculator{/**\n   * Calcula el ganador del torneo basado en criterios espec√≠ficos\n   */static async calculateTournamentWinner(pairs,matches){try{console.log(\"üèÜ === CALCULANDO GANADOR DEL TORNEO ===\");// Obtener todos los juegos de todos los partidos\nconst allGames=[];for(const match of matches){if(match.is_finished){const matchGames=await getGames(match.id);allGames.push(...matchGames);}}console.log(`üìä Total de juegos encontrados: ${allGames.length}`);// Calcular estad√≠sticas acumuladas para cada pareja\nconst pairStats=new Map();// Inicializar estad√≠sticas\nfor(const pair of pairs){pairStats.set(pair.id,{totalPoints:0,totalSets:0,totalGames:0,matchesPlayed:0,wins:0});}// Procesar cada partido finalizado\nfor(const match of matches){if(match.is_finished){const matchGames=allGames.filter(g=>g.match_id===match.id);if(matchGames.length>0){// Calcular estad√≠sticas del partido\nconst matchStats=this.calculateMatchStats(matchGames);// Acumular para pareja 1\nconst pair1Stats=pairStats.get(match.pair1_id);pair1Stats.totalPoints+=matchStats.pair1Points;pair1Stats.totalSets+=matchStats.pair1Sets;pair1Stats.totalGames+=matchStats.pair1Games;pair1Stats.matchesPlayed+=1;if(matchStats.pair1Points>matchStats.pair2Points){pair1Stats.wins+=1;}// Acumular para pareja 2\nconst pair2Stats=pairStats.get(match.pair2_id);pair2Stats.totalPoints+=matchStats.pair2Points;pair2Stats.totalSets+=matchStats.pair2Sets;pair2Stats.totalGames+=matchStats.pair2Games;pair2Stats.matchesPlayed+=1;if(matchStats.pair2Points>matchStats.pair1Points){pair2Stats.wins+=1;}console.log(`üìä Partido ${match.id}:`);console.log(`   Pareja 1 (${match.pair1_id}): ${matchStats.pair1Points} pts, ${matchStats.pair1Sets} sets, ${matchStats.pair1Games} juegos`);console.log(`   Pareja 2 (${match.pair2_id}): ${matchStats.pair2Points} pts, ${matchStats.pair2Sets} sets, ${matchStats.pair2Games} juegos`);}}}// Crear array de candidatos al ganador\nconst candidates=[];for(const pair of pairs){const stats=pairStats.get(pair.id);if(stats&&stats.matchesPlayed>0){var _pair$player,_pair$player2;const winPercentage=stats.wins/stats.matchesPlayed*100;candidates.push({pair,totalPoints:stats.totalPoints,totalSets:stats.totalSets,totalGames:stats.totalGames,matchesPlayed:stats.matchesPlayed,winPercentage});console.log(`üèÜ Candidato: ${(_pair$player=pair.player1)===null||_pair$player===void 0?void 0:_pair$player.name} y ${(_pair$player2=pair.player2)===null||_pair$player2===void 0?void 0:_pair$player2.name}`);console.log(`   Puntos totales: ${stats.totalPoints}`);console.log(`   Sets totales: ${stats.totalSets}`);console.log(`   Juegos totales: ${stats.totalGames}`);console.log(`   Partidos jugados: ${stats.matchesPlayed}`);console.log(`   Porcentaje de victorias: ${winPercentage.toFixed(1)}%`);}}// Ordenar candidatos por criterios\ncandidates.sort((a,b)=>{// Criterio 1: Puntos totales (descendente) - CRITERIO PRINCIPAL\nif(a.totalPoints!==b.totalPoints){return b.totalPoints-a.totalPoints;}// Criterio 2: Sets ganados (descendente) - CRITERIO DE DESEMPATE\nif(a.totalSets!==b.totalSets){return b.totalSets-a.totalSets;}// Criterio 3: Juegos ganados (descendente)\nif(a.totalGames!==b.totalGames){return b.totalGames-a.totalGames;}// Criterio 4: Porcentaje de victorias (descendente)\nif(a.winPercentage!==b.winPercentage){return b.winPercentage-a.winPercentage;}// Criterio 5: Menos partidos jugados (mejor eficiencia)\nreturn a.matchesPlayed-b.matchesPlayed;});const winner=candidates.length>0?candidates[0]:null;if(winner){var _winner$pair$player,_winner$pair$player2;console.log(`üèÜ GANADOR DEL TORNEO: ${(_winner$pair$player=winner.pair.player1)===null||_winner$pair$player===void 0?void 0:_winner$pair$player.name} y ${(_winner$pair$player2=winner.pair.player2)===null||_winner$pair$player2===void 0?void 0:_winner$pair$player2.name}`);console.log(`   Puntos totales: ${winner.totalPoints}`);console.log(`   Sets totales: ${winner.totalSets}`);console.log(`   Juegos totales: ${winner.totalGames}`);console.log(`   Partidos jugados: ${winner.matchesPlayed}`);console.log(`   Porcentaje de victorias: ${winner.winPercentage.toFixed(1)}%`);}else{console.log(\"‚ùå No se encontr√≥ ganador\");}console.log(\"üèÜ === FIN CALCULACI√ìN GANADOR ===\");return winner;}catch(error){console.error(\"‚ùå Error al calcular ganador del torneo:\",error);return null;}}/**\n   * Calcula las estad√≠sticas de un partido basado en sus juegos\n   */static calculateMatchStats(games){let pair1Points=0;let pair2Points=0;let pair1Sets=0;let pair2Sets=0;let pair1Games=0;let pair2Games=0;for(const game of games){const pair1GamePoints=game.pair1_games;const pair2GamePoints=game.pair2_games;// Sumar puntos del juego\npair1Points+=pair1GamePoints;pair2Points+=pair2GamePoints;// Determinar ganador del juego\nif(pair1GamePoints>pair2GamePoints){pair1Games+=1;// Si lleg√≥ a 6 puntos, gana un set\nif(pair1GamePoints>=6){pair1Sets+=1;}}else if(pair2GamePoints>pair1GamePoints){pair2Games+=1;// Si lleg√≥ a 6 puntos, gana un set\nif(pair2GamePoints>=6){pair2Sets+=1;}}// Si es empate, no se suma juego ni set\n}return{pair1Points,pair2Points,pair1Sets,pair2Sets,pair1Games,pair2Games};}}","map":{"version":3,"names":["getGames","TournamentWinnerCalculator","calculateTournamentWinner","pairs","matches","console","log","allGames","match","is_finished","matchGames","id","push","length","pairStats","Map","pair","set","totalPoints","totalSets","totalGames","matchesPlayed","wins","filter","g","match_id","matchStats","calculateMatchStats","pair1Stats","get","pair1_id","pair1Points","pair1Sets","pair1Games","pair2Points","pair2Stats","pair2_id","pair2Sets","pair2Games","candidates","stats","_pair$player","_pair$player2","winPercentage","player1","name","player2","toFixed","sort","a","b","winner","_winner$pair$player","_winner$pair$player2","error","games","game","pair1GamePoints","pair1_games","pair2GamePoints","pair2_games"],"sources":["/Users/nedev/padel-tournament-app/src/components/TournamentWinnerCalculator.tsx"],"sourcesContent":["import React from \"react\";\nimport { Pair, Match, Game } from \"../lib/database\";\nimport { getGames } from \"../lib/database\";\n\nexport interface TournamentWinner {\n  pair: Pair;\n  totalPoints: number;\n  totalSets: number;\n  totalGames: number;\n  matchesPlayed: number;\n  winPercentage: number;\n}\n\nexport class TournamentWinnerCalculator {\n  /**\n   * Calcula el ganador del torneo basado en criterios espec√≠ficos\n   */\n  static async calculateTournamentWinner(\n    pairs: Pair[],\n    matches: Match[]\n  ): Promise<TournamentWinner | null> {\n    try {\n      console.log(\"üèÜ === CALCULANDO GANADOR DEL TORNEO ===\");\n\n      // Obtener todos los juegos de todos los partidos\n      const allGames: Game[] = [];\n      for (const match of matches) {\n        if (match.is_finished) {\n          const matchGames = await getGames(match.id);\n          allGames.push(...matchGames);\n        }\n      }\n\n      console.log(`üìä Total de juegos encontrados: ${allGames.length}`);\n\n      // Calcular estad√≠sticas acumuladas para cada pareja\n      const pairStats = new Map<\n        string,\n        {\n          totalPoints: number;\n          totalSets: number;\n          totalGames: number;\n          matchesPlayed: number;\n          wins: number;\n        }\n      >();\n\n      // Inicializar estad√≠sticas\n      for (const pair of pairs) {\n        pairStats.set(pair.id, {\n          totalPoints: 0,\n          totalSets: 0,\n          totalGames: 0,\n          matchesPlayed: 0,\n          wins: 0,\n        });\n      }\n\n      // Procesar cada partido finalizado\n      for (const match of matches) {\n        if (match.is_finished) {\n          const matchGames = allGames.filter((g) => g.match_id === match.id);\n\n          if (matchGames.length > 0) {\n            // Calcular estad√≠sticas del partido\n            const matchStats = this.calculateMatchStats(matchGames);\n\n            // Acumular para pareja 1\n            const pair1Stats = pairStats.get(match.pair1_id)!;\n            pair1Stats.totalPoints += matchStats.pair1Points;\n            pair1Stats.totalSets += matchStats.pair1Sets;\n            pair1Stats.totalGames += matchStats.pair1Games;\n            pair1Stats.matchesPlayed += 1;\n            if (matchStats.pair1Points > matchStats.pair2Points) {\n              pair1Stats.wins += 1;\n            }\n\n            // Acumular para pareja 2\n            const pair2Stats = pairStats.get(match.pair2_id)!;\n            pair2Stats.totalPoints += matchStats.pair2Points;\n            pair2Stats.totalSets += matchStats.pair2Sets;\n            pair2Stats.totalGames += matchStats.pair2Games;\n            pair2Stats.matchesPlayed += 1;\n            if (matchStats.pair2Points > matchStats.pair1Points) {\n              pair2Stats.wins += 1;\n            }\n\n            console.log(`üìä Partido ${match.id}:`);\n            console.log(\n              `   Pareja 1 (${match.pair1_id}): ${matchStats.pair1Points} pts, ${matchStats.pair1Sets} sets, ${matchStats.pair1Games} juegos`\n            );\n            console.log(\n              `   Pareja 2 (${match.pair2_id}): ${matchStats.pair2Points} pts, ${matchStats.pair2Sets} sets, ${matchStats.pair2Games} juegos`\n            );\n          }\n        }\n      }\n\n      // Crear array de candidatos al ganador\n      const candidates: TournamentWinner[] = [];\n\n      for (const pair of pairs) {\n        const stats = pairStats.get(pair.id);\n        if (stats && stats.matchesPlayed > 0) {\n          const winPercentage = (stats.wins / stats.matchesPlayed) * 100;\n\n          candidates.push({\n            pair,\n            totalPoints: stats.totalPoints,\n            totalSets: stats.totalSets,\n            totalGames: stats.totalGames,\n            matchesPlayed: stats.matchesPlayed,\n            winPercentage,\n          });\n\n          console.log(\n            `üèÜ Candidato: ${pair.player1?.name} y ${pair.player2?.name}`\n          );\n          console.log(`   Puntos totales: ${stats.totalPoints}`);\n          console.log(`   Sets totales: ${stats.totalSets}`);\n          console.log(`   Juegos totales: ${stats.totalGames}`);\n          console.log(`   Partidos jugados: ${stats.matchesPlayed}`);\n          console.log(\n            `   Porcentaje de victorias: ${winPercentage.toFixed(1)}%`\n          );\n        }\n      }\n\n      // Ordenar candidatos por criterios\n      candidates.sort((a, b) => {\n        // Criterio 1: Puntos totales (descendente) - CRITERIO PRINCIPAL\n        if (a.totalPoints !== b.totalPoints) {\n          return b.totalPoints - a.totalPoints;\n        }\n\n        // Criterio 2: Sets ganados (descendente) - CRITERIO DE DESEMPATE\n        if (a.totalSets !== b.totalSets) {\n          return b.totalSets - a.totalSets;\n        }\n\n        // Criterio 3: Juegos ganados (descendente)\n        if (a.totalGames !== b.totalGames) {\n          return b.totalGames - a.totalGames;\n        }\n\n        // Criterio 4: Porcentaje de victorias (descendente)\n        if (a.winPercentage !== b.winPercentage) {\n          return b.winPercentage - a.winPercentage;\n        }\n\n        // Criterio 5: Menos partidos jugados (mejor eficiencia)\n        return a.matchesPlayed - b.matchesPlayed;\n      });\n\n      const winner = candidates.length > 0 ? candidates[0] : null;\n\n      if (winner) {\n        console.log(\n          `üèÜ GANADOR DEL TORNEO: ${winner.pair.player1?.name} y ${winner.pair.player2?.name}`\n        );\n        console.log(`   Puntos totales: ${winner.totalPoints}`);\n        console.log(`   Sets totales: ${winner.totalSets}`);\n        console.log(`   Juegos totales: ${winner.totalGames}`);\n        console.log(`   Partidos jugados: ${winner.matchesPlayed}`);\n        console.log(\n          `   Porcentaje de victorias: ${winner.winPercentage.toFixed(1)}%`\n        );\n      } else {\n        console.log(\"‚ùå No se encontr√≥ ganador\");\n      }\n\n      console.log(\"üèÜ === FIN CALCULACI√ìN GANADOR ===\");\n      return winner;\n    } catch (error) {\n      console.error(\"‚ùå Error al calcular ganador del torneo:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Calcula las estad√≠sticas de un partido basado en sus juegos\n   */\n  private static calculateMatchStats(games: Game[]): {\n    pair1Points: number;\n    pair2Points: number;\n    pair1Sets: number;\n    pair2Sets: number;\n    pair1Games: number;\n    pair2Games: number;\n  } {\n    let pair1Points = 0;\n    let pair2Points = 0;\n    let pair1Sets = 0;\n    let pair2Sets = 0;\n    let pair1Games = 0;\n    let pair2Games = 0;\n\n    for (const game of games) {\n      const pair1GamePoints = game.pair1_games;\n      const pair2GamePoints = game.pair2_games;\n\n      // Sumar puntos del juego\n      pair1Points += pair1GamePoints;\n      pair2Points += pair2GamePoints;\n\n      // Determinar ganador del juego\n      if (pair1GamePoints > pair2GamePoints) {\n        pair1Games += 1;\n        // Si lleg√≥ a 6 puntos, gana un set\n        if (pair1GamePoints >= 6) {\n          pair1Sets += 1;\n        }\n      } else if (pair2GamePoints > pair1GamePoints) {\n        pair2Games += 1;\n        // Si lleg√≥ a 6 puntos, gana un set\n        if (pair2GamePoints >= 6) {\n          pair2Sets += 1;\n        }\n      }\n      // Si es empate, no se suma juego ni set\n    }\n\n    return {\n      pair1Points,\n      pair2Points,\n      pair1Sets,\n      pair2Sets,\n      pair1Games,\n      pair2Games,\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}